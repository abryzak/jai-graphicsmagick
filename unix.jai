//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



QuantumDepth :: 8;

MaxTextExtent :: 2053;

MagickSignature :: 0xabacadab;

MagickPass :: 1;
MagickFail :: 0;

MagickTrue :: 1;
MagickFalse :: 0;

MagickLogFilename :: "log.mgk";

MaxColormapSize :: 256;
MaxMap :: 255;
MaxMapDepth :: 8;
MaxMapFloat :: 255.0;
MaxMapDouble :: 255.0;
MaxRGB :: 255;
MaxRGBFloat :: 255.0;
MaxRGBDouble :: 255.0;

OpaqueOpacity :: 0;
TransparentOpacity :: MaxRGB;

MAGICK_PIXELS_BGRA :: 1;

MinBlobExtent :: 32768;

ExtendedSignedIntegralType :: magick_int64_t;

ExtendedUnsignedIntegralType :: magick_uint64_t;

MagickSignedType :: magick_int64_t;

MagickUnsignedType :: magick_uint64_t;

MAGICK_RANDOM_MAX :: 4294967295;

MAGICK_OPT_NO_SIGNAL_HANDER :: 0x0001;

MaxTreeDepth :: 8;
NodesInAList :: 1536;

MagickPackageName :: "GraphicsMagick";
MagickCopyright :: "Copyright (C) 2002-2023 GraphicsMagick Group.\nAdditional copyrights and licenses apply to this software.\nSee http://www.GraphicsMagick.org/www/Copyright.html for details.";
MagickLibVersion :: 0x272404;
MagickLibVersionText :: "1.3.42";

MagickChangeDate :: "20230923";
MagickReleaseDate :: "2023-09-23";

MagickLibInterfaceNewest :: 27;
MagickLibInterfaceOldest :: 3;

MagickQuantumDepth :: "Q8";

CloneDrawingWand :: MagickCloneDrawingWand;

DestroyDrawingWand :: MagickDestroyDrawingWand;

DrawAffine :: MagickDrawAffine;

DrawAllocateWand :: MagickDrawAllocateWand;

DrawAnnotation :: MagickDrawAnnotation;

DrawArc :: MagickDrawArc;

DrawBezier :: MagickDrawBezier;

DrawClearException :: MagickDrawClearException;

DrawCircle :: MagickDrawCircle;

DrawColor :: MagickDrawColor;

DrawComment :: MagickDrawComment;

DrawComposite :: MagickDrawComposite;

DrawEllipse :: MagickDrawEllipse;

DrawGetClipPath :: MagickDrawGetClipPath;

DrawGetClipRule :: MagickDrawGetClipRule;

DrawGetClipUnits :: MagickDrawGetClipUnits;

DrawGetException :: MagickDrawGetException;

DrawGetFillColor :: MagickDrawGetFillColor;

DrawGetFillOpacity :: MagickDrawGetFillOpacity;

DrawGetFillRule :: MagickDrawGetFillRule;

DrawGetFont :: MagickDrawGetFont;

DrawGetFontFamily :: MagickDrawGetFontFamily;

DrawGetFontSize :: MagickDrawGetFontSize;

DrawGetFontStretch :: MagickDrawGetFontStretch;

DrawGetFontStyle :: MagickDrawGetFontStyle;

DrawGetFontWeight :: MagickDrawGetFontWeight;

DrawGetGravity :: MagickDrawGetGravity;

DrawGetStrokeAntialias :: MagickDrawGetStrokeAntialias;

DrawGetStrokeColor :: MagickDrawGetStrokeColor;

DrawGetStrokeDashArray :: MagickDrawGetStrokeDashArray;

DrawGetStrokeDashOffset :: MagickDrawGetStrokeDashOffset;

DrawGetStrokeLineCap :: MagickDrawGetStrokeLineCap;

DrawGetStrokeLineJoin :: MagickDrawGetStrokeLineJoin;

DrawGetStrokeMiterLimit :: MagickDrawGetStrokeMiterLimit;

DrawGetStrokeOpacity :: MagickDrawGetStrokeOpacity;

DrawGetStrokeWidth :: MagickDrawGetStrokeWidth;

DrawGetTextAntialias :: MagickDrawGetTextAntialias;

DrawGetTextDecoration :: MagickDrawGetTextDecoration;

DrawGetTextEncoding :: MagickDrawGetTextEncoding;

DrawGetTextUnderColor :: MagickDrawGetTextUnderColor;

DrawLine :: MagickDrawLine;

DrawMatte :: MagickDrawMatte;

DrawPathClose :: MagickDrawPathClose;

DrawPathCurveToAbsolute :: MagickDrawPathCurveToAbsolute;

DrawPathCurveToQuadraticBezierAbsolute :: MagickDrawPathCurveToQuadraticBezierAbsolute;

DrawPathCurveToQuadraticBezierRelative :: MagickDrawPathCurveToQuadraticBezierRelative;

DrawPathCurveToQuadraticBezierSmoothAbsolute :: MagickDrawPathCurveToQuadraticBezierSmoothAbsolute;

DrawPathCurveToQuadraticBezierSmoothRelative :: MagickDrawPathCurveToQuadraticBezierSmoothRelative;

DrawPathCurveToRelative :: MagickDrawPathCurveToRelative;

DrawPathCurveToSmoothAbsolute :: MagickDrawPathCurveToSmoothAbsolute;

DrawPathCurveToSmoothRelative :: MagickDrawPathCurveToSmoothRelative;

DrawPathEllipticArcAbsolute :: MagickDrawPathEllipticArcAbsolute;

DrawPathEllipticArcRelative :: MagickDrawPathEllipticArcRelative;

DrawPathFinish :: MagickDrawPathFinish;

DrawPathLineToAbsolute :: MagickDrawPathLineToAbsolute;

DrawPathLineToHorizontalAbsolute :: MagickDrawPathLineToHorizontalAbsolute;

DrawPathLineToHorizontalRelative :: MagickDrawPathLineToHorizontalRelative;

DrawPathLineToRelative :: MagickDrawPathLineToRelative;

DrawPathLineToVerticalAbsolute :: MagickDrawPathLineToVerticalAbsolute;

DrawPathLineToVerticalRelative :: MagickDrawPathLineToVerticalRelative;

DrawPathMoveToAbsolute :: MagickDrawPathMoveToAbsolute;

DrawPathMoveToRelative :: MagickDrawPathMoveToRelative;

DrawPathStart :: MagickDrawPathStart;

DrawPeekGraphicContext :: MagickDrawPeekGraphicContext;

DrawPoint :: MagickDrawPoint;

DrawPolygon :: MagickDrawPolygon;

DrawPolyline :: MagickDrawPolyline;

DrawPopClipPath :: MagickDrawPopClipPath;

DrawPopDefs :: MagickDrawPopDefs;

DrawPopGraphicContext :: MagickDrawPopGraphicContext;

DrawPopPattern :: MagickDrawPopPattern;

DrawPushClipPath :: MagickDrawPushClipPath;

DrawPushDefs :: MagickDrawPushDefs;

DrawPushGraphicContext :: MagickDrawPushGraphicContext;

DrawPushPattern :: MagickDrawPushPattern;

DrawRectangle :: MagickDrawRectangle;

DrawRender :: MagickDrawRender;

DrawRotate :: MagickDrawRotate;

DrawRoundRectangle :: MagickDrawRoundRectangle;

DrawScale :: MagickDrawScale;

DrawSetClipPath :: MagickDrawSetClipPath;

DrawSetClipRule :: MagickDrawSetClipRule;

DrawSetClipUnits :: MagickDrawSetClipUnits;

DrawSetFillColor :: MagickDrawSetFillColor;

DrawSetFillOpacity :: MagickDrawSetFillOpacity;

DrawSetFillPatternURL :: MagickDrawSetFillPatternURL;

DrawSetFillRule :: MagickDrawSetFillRule;

DrawSetFont :: MagickDrawSetFont;

DrawSetFontFamily :: MagickDrawSetFontFamily;

DrawSetFontSize :: MagickDrawSetFontSize;

DrawSetFontStretch :: MagickDrawSetFontStretch;

DrawSetFontStyle :: MagickDrawSetFontStyle;

DrawSetFontWeight :: MagickDrawSetFontWeight;

DrawSetGravity :: MagickDrawSetGravity;

DrawSetStrokeAntialias :: MagickDrawSetStrokeAntialias;

DrawSetStrokeColor :: MagickDrawSetStrokeColor;

DrawSetStrokeDashArray :: MagickDrawSetStrokeDashArray;

DrawSetStrokeDashOffset :: MagickDrawSetStrokeDashOffset;

DrawSetStrokeLineCap :: MagickDrawSetStrokeLineCap;

DrawSetStrokeLineJoin :: MagickDrawSetStrokeLineJoin;

DrawSetStrokeMiterLimit :: MagickDrawSetStrokeMiterLimit;

DrawSetStrokeOpacity :: MagickDrawSetStrokeOpacity;

DrawSetStrokePatternURL :: MagickDrawSetStrokePatternURL;

DrawSetStrokeWidth :: MagickDrawSetStrokeWidth;

DrawSetTextAntialias :: MagickDrawSetTextAntialias;

DrawSetTextDecoration :: MagickDrawSetTextDecoration;

DrawSetTextEncoding :: MagickDrawSetTextEncoding;

DrawSetTextUnderColor :: MagickDrawSetTextUnderColor;

DrawSetViewbox :: MagickDrawSetViewbox;

DrawSkewX :: MagickDrawSkewX;

DrawSkewY :: MagickDrawSkewY;

DrawTranslate :: MagickDrawTranslate;

NewDrawingWand :: MagickNewDrawingWand;

MagickSizeType :: magick_int64_t;

/* The following typedefs are subtituted when using Unixish configure */
magick_int8_t :: s8;
magick_uint8_t :: u8;

magick_int16_t :: s16;
magick_uint16_t :: u16;

magick_int32_t :: s32;
magick_uint32_t :: u32;

magick_int64_t :: s64;
magick_uint64_t :: u64;

/* 64-bit file and blob offset type */
magick_off_t :: magick_int64_t;

ImagePtr :: *_Image;

_Ascii85InfoPtr_ :: *_Ascii85Info;

_BlobInfo :: struct {}
_BlobInfoPtr_ :: *_BlobInfo;

_CacheInfo :: struct {}
_CacheInfoPtr_ :: *_CacheInfo;

_ImageAttributePtr_ :: *_ImageAttribute;

_SemaphoreInfo :: struct {}
_SemaphoreInfoPtr_ :: *_SemaphoreInfo;

_ThreadViewSet :: struct {}
_ThreadViewSetPtr_ :: *_ThreadViewSet;

ViewInfo :: *void;

ColorspaceType :: enum u32 {
    UndefinedColorspace    :: 0;
    RGBColorspace          :: 1;
    GRAYColorspace         :: 2;
    TransparentColorspace  :: 3;
    OHTAColorspace         :: 4;
    XYZColorspace          :: 5;
    YCCColorspace          :: 6;
    YIQColorspace          :: 7;
    YPbPrColorspace        :: 8;
    YUVColorspace          :: 9;
    CMYKColorspace         :: 10;
    sRGBColorspace         :: 11;
    HSLColorspace          :: 12;
    HWBColorspace          :: 13;
    LABColorspace          :: 14;
    CineonLogRGBColorspace :: 15;
    Rec601LumaColorspace   :: 16;
    Rec601YCbCrColorspace  :: 17;
    Rec709LumaColorspace   :: 18;
    Rec709YCbCrColorspace  :: 19;
}

RGBTransformImage :: (unknown0: ImagePtr, unknown1: ColorspaceType) -> u32 #foreign libgraphicsmagick;
TransformColorspace :: (unknown0: ImagePtr, unknown1: ColorspaceType) -> u32 #foreign libgraphicsmagick;
TransformRGBImage :: (unknown0: ImagePtr, unknown1: ColorspaceType) -> u32 #foreign libgraphicsmagick;

/*
Enum declarations.
*/
ExceptionBaseType :: enum u32 {
    UndefinedExceptionBase :: 0;
    ExceptionBase          :: 1;
    ResourceBase           :: 2;
    ResourceLimitBase      :: 2;
    TypeBase               :: 5;
    AnnotateBase           :: 5;
    OptionBase             :: 10;
    DelegateBase           :: 15;
    MissingDelegateBase    :: 20;
    CorruptImageBase       :: 25;
    FileOpenBase           :: 30;
    BlobBase               :: 35;
    StreamBase             :: 40;
    CacheBase              :: 45;
    CoderBase              :: 50;
    ModuleBase             :: 55;
    DrawBase               :: 60;
    RenderBase             :: 60;
    ImageBase              :: 65;
    WandBase               :: 67;
    TemporaryFileBase      :: 70;
    TransformBase          :: 75;
    XServerBase            :: 80;
    X11Base                :: 81;
    UserBase               :: 82;
    MonitorBase            :: 85;
    LocaleBase             :: 86;
    DeprecateBase          :: 87;
    RegistryBase           :: 90;
    ConfigureBase          :: 95;
}

ExceptionType :: enum u32 {
    UndefinedException        :: 0;
    EventException            :: 100;
    ExceptionEvent            :: 101;
    ResourceEvent             :: 102;
    ResourceLimitEvent        :: 102;
    TypeEvent                 :: 105;
    AnnotateEvent             :: 105;
    OptionEvent               :: 110;
    DelegateEvent             :: 115;
    MissingDelegateEvent      :: 120;
    CorruptImageEvent         :: 125;
    FileOpenEvent             :: 130;
    BlobEvent                 :: 135;
    StreamEvent               :: 140;
    CacheEvent                :: 145;
    CoderEvent                :: 150;
    ModuleEvent               :: 155;
    DrawEvent                 :: 160;
    RenderEvent               :: 160;
    ImageEvent                :: 165;
    WandEvent                 :: 167;
    TemporaryFileEvent        :: 170;
    TransformEvent            :: 175;
    XServerEvent              :: 180;
    X11Event                  :: 181;
    UserEvent                 :: 182;
    MonitorEvent              :: 185;
    LocaleEvent               :: 186;
    DeprecateEvent            :: 187;
    RegistryEvent             :: 190;
    ConfigureEvent            :: 195;

    WarningException          :: 300;
    ExceptionWarning          :: 301;
    ResourceWarning           :: 302;
    ResourceLimitWarning      :: 302;
    TypeWarning               :: 305;
    AnnotateWarning           :: 305;
    OptionWarning             :: 310;
    DelegateWarning           :: 315;
    MissingDelegateWarning    :: 320;
    CorruptImageWarning       :: 325;
    FileOpenWarning           :: 330;
    BlobWarning               :: 335;
    StreamWarning             :: 340;
    CacheWarning              :: 345;
    CoderWarning              :: 350;
    ModuleWarning             :: 355;
    DrawWarning               :: 360;
    RenderWarning             :: 360;
    ImageWarning              :: 365;
    WandWarning               :: 367;
    TemporaryFileWarning      :: 370;
    TransformWarning          :: 375;
    XServerWarning            :: 380;
    X11Warning                :: 381;
    UserWarning               :: 382;
    MonitorWarning            :: 385;
    LocaleWarning             :: 386;
    DeprecateWarning          :: 387;
    RegistryWarning           :: 390;
    ConfigureWarning          :: 395;

    ErrorException            :: 400;
    ExceptionError            :: 401;
    ResourceError             :: 402;
    ResourceLimitError        :: 402;
    TypeError                 :: 405;
    AnnotateError             :: 405;
    OptionError               :: 410;
    DelegateError             :: 415;
    MissingDelegateError      :: 420;
    CorruptImageError         :: 425;
    FileOpenError             :: 430;
    BlobError                 :: 435;
    StreamError               :: 440;
    CacheError                :: 445;
    CoderError                :: 450;
    ModuleError               :: 455;
    DrawError                 :: 460;
    RenderError               :: 460;
    ImageError                :: 465;
    WandError                 :: 467;
    TemporaryFileError        :: 470;
    TransformError            :: 475;
    XServerError              :: 480;
    X11Error                  :: 481;
    UserError                 :: 482;
    MonitorError              :: 485;
    LocaleError               :: 486;
    DeprecateError            :: 487;
    RegistryError             :: 490;
    ConfigureError            :: 495;

    FatalErrorException       :: 700;
    ExceptionFatalError       :: 701;
    ResourceFatalError        :: 702;
    ResourceLimitFatalError   :: 702;
    TypeFatalError            :: 705;
    AnnotateFatalError        :: 705;
    OptionFatalError          :: 710;
    DelegateFatalError        :: 715;
    MissingDelegateFatalError :: 720;
    CorruptImageFatalError    :: 725;
    FileOpenFatalError        :: 730;
    BlobFatalError            :: 735;
    StreamFatalError          :: 740;
    CacheFatalError           :: 745;
    CoderFatalError           :: 750;
    ModuleFatalError          :: 755;
    DrawFatalError            :: 760;
    RenderFatalError          :: 760;
    ImageFatalError           :: 765;
    WandFatalError            :: 767;
    TemporaryFileFatalError   :: 770;
    TransformFatalError       :: 775;
    XServerFatalError         :: 780;
    X11FatalError             :: 781;
    UserFatalError            :: 782;
    MonitorFatalError         :: 785;
    LocaleFatalError          :: 786;
    DeprecateFatalError       :: 787;
    RegistryFatalError        :: 790;
    ConfigureFatalError       :: 795;
}

/*
The ExceptionInfo structure is used to report exceptions to higher level
routines, and to the user.  The ExceptionInfo structure must be initialized
using the GetExceptionInfo() function prior to use.
*/
_ExceptionInfo :: struct {
    /*
    Exception severity, reason, and description
    */
    severity:     ExceptionType;

    reason:       *u8;
    description:  *u8;

    /*
    Value of errno (or equivalent) when exception was thrown.
    */
    error_number: s32;

    /*
    Reporting source module, function (if available), and source
    module line.
    */
    module:       *u8;
    /*
    Reporting source module, function (if available), and source
    module line.
    */
    function:     *u8;

    line:         u64;

    /*
    Structure sanity check
    */
    signature:    u64;
}

/*
The ExceptionInfo structure is used to report exceptions to higher level
routines, and to the user.  The ExceptionInfo structure must be initialized
using the GetExceptionInfo() function prior to use.
*/
ExceptionInfo :: _ExceptionInfo;

/*
Exception typedef declarations.
*/
ErrorHandler :: #type (severity: ExceptionType, reason: *u8, description: *u8) -> void #c_call;

FatalErrorHandler :: #type (severity: ExceptionType, reason: *u8, description: *u8) -> void #c_call;

WarningHandler :: #type (severity: ExceptionType, reason: *u8, description: *u8) -> void #c_call;

/*
Exception declarations.
*/
GetLocaleExceptionMessage :: (severity: ExceptionType, tag: *u8) -> *u8 #foreign libgraphicsmagick;
/*
Exception declarations.
*/
GetLocaleMessage :: (tag: *u8) -> *u8 #foreign libgraphicsmagick;

SetErrorHandler :: (handler: ErrorHandler) -> ErrorHandler #foreign libgraphicsmagick;

SetFatalErrorHandler :: (handler: FatalErrorHandler) -> FatalErrorHandler #foreign libgraphicsmagick;

CatchException :: (exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;
CopyException :: (copy: *ExceptionInfo, original: *ExceptionInfo) -> void #foreign libgraphicsmagick;
DestroyExceptionInfo :: (exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;
GetExceptionInfo :: (exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;
MagickError :: (error: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
MagickFatalError :: (error: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
MagickWarning :: (severity: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
_MagickError :: (severity: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
_MagickFatalError :: (severity: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
_MagickWarning :: (warning: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
SetExceptionInfo :: (exception: *ExceptionInfo, severity: ExceptionType) -> void #foreign libgraphicsmagick;
ThrowException :: (exception: *ExceptionInfo, severity: ExceptionType, reason: *u8, description: *u8) -> void #foreign libgraphicsmagick;
ThrowLoggedException :: (exception: *ExceptionInfo, severity: ExceptionType, reason: *u8, description: *u8, module: *u8, function: *u8, line: u64) -> void #foreign libgraphicsmagick;

SetWarningHandler :: (handler: WarningHandler) -> WarningHandler #foreign libgraphicsmagick;

/* NOTE: any changes to this effect PerlMagick */
LogEventType :: enum u32 {
    UndefinedEventMask     :: 0;
    NoEventsMask           :: 0;
    ConfigureEventMask     :: 1;
    AnnotateEventMask      :: 2;
    RenderEventMask        :: 4;
    TransformEventMask     :: 8;
    LocaleEventMask        :: 16;
    CoderEventMask         :: 32;
    X11EventMask           :: 64;
    CacheEventMask         :: 128;
    BlobEventMask          :: 256;
    DeprecateEventMask     :: 512;
    UserEventMask          :: 1024;
    ResourceEventMask      :: 2048;
    TemporaryFileEventMask :: 4096;

    ExceptionEventMask     :: 458752;
    OptionEventMask        :: 16384;
    InformationEventMask   :: 32768;
    WarningEventMask       :: 65536;
    ErrorEventMask         :: 131072;
    FatalErrorEventMask    :: 262144;
    AllEventsMask          :: 2147483647;
}

/*
Typedef declarations.
*/
LogOutputType :: enum u32 {
    DisabledOutput      :: 0;
    UndefinedOutput     :: 0;
    StdoutOutput        :: 1;
    StderrOutput        :: 2;
    XMLFileOutput       :: 4;
    TXTFileOutput       :: 8;
    Win32DebugOutput    :: 16;
    Win32EventlogOutput :: 32;
    MethodOutput        :: 64;
}

LogMethod :: #type (type: ExceptionType, text: *u8) -> void #c_call;

/*
Method declarations.
*/
IsEventLogging :: () -> u32 #foreign libgraphicsmagick;
/*
Method declarations.
*/
IsEventLogged :: (type: ExceptionType) -> u32 #foreign libgraphicsmagick;
/*
Method declarations.
*/
LogMagickEvent_CFormat :: (type: ExceptionType, module: *u8, function: *u8, line: u64, format: *u8, __args: ..Any) -> u32 #foreign libgraphicsmagick "LogMagickEvent";
LogMagickEvent :: (type: ExceptionType, module: *u8, function: *u8, line: u64, format: string, __args: ..Any) -> u32 {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, format, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return LogMagickEvent_CFormat(type, module, function, line, "%s", formatted_text.data);
} @PrintLike

SetLogEventMask :: (events: *u8) -> u64 #foreign libgraphicsmagick;

SetLogDefaultEventType :: (events: *u8) -> void #foreign libgraphicsmagick;
SetLogDefaultGenerations :: (generations: u64) -> void #foreign libgraphicsmagick;
SetLogDefaultLimit :: (limit: u64) -> void #foreign libgraphicsmagick;
SetLogDefaultFileName :: (filename: *u8) -> void #foreign libgraphicsmagick;
SetLogDefaultFormat :: (format: *u8) -> void #foreign libgraphicsmagick;
SetLogDefaultLogMethod :: (method: LogMethod) -> void #foreign libgraphicsmagick;
SetLogDefaultOutputType :: (output_type: LogOutputType) -> void #foreign libgraphicsmagick;
SetLogFormat :: (format: *u8) -> void #foreign libgraphicsmagick;
SetLogMethod :: (unknown0: LogMethod) -> void #foreign libgraphicsmagick;

/*
Enum declarations.
*/
TimerState :: enum u32 {
    UndefinedTimerState :: 0;
    StoppedTimerState   :: 1;
    RunningTimerState   :: 2;
}

/*
Typedef declarations.
*/
_Timer :: struct {
    start: float64;
    stop:  float64;
    total: float64;
}

/*
Typedef declarations.
*/
Timer :: _Timer;

_TimerInfo :: struct {
    user:      Timer;
    elapsed:   Timer;

    state:     TimerState;

    signature: u64;
}

TimerInfo :: _TimerInfo;

/*
Timer methods.
*/
GetElapsedTime :: (unknown0: *TimerInfo) -> float64 #foreign libgraphicsmagick;
/*
Timer methods.
*/
GetUserTime :: (unknown0: *TimerInfo) -> float64 #foreign libgraphicsmagick;
/*
Timer methods.
*/
GetTimerResolution :: () -> float64 #foreign libgraphicsmagick;

ContinueTimer :: (unknown0: *TimerInfo) -> u32 #foreign libgraphicsmagick;

GetTimerInfo :: (unknown0: *TimerInfo) -> void #foreign libgraphicsmagick;
ResetTimer :: (unknown0: *TimerInfo) -> void #foreign libgraphicsmagick;
StartTimer :: (time_info: *TimerInfo, reset: u32) -> void #foreign libgraphicsmagick;
StopTimer :: (time_info: *TimerInfo) -> void #foreign libgraphicsmagick;

Quantum :: u8;

/*
Enum declarations.
*/
AlphaType :: enum u32 {
    UnspecifiedAlpha  :: 0;
    AssociatedAlpha   :: 1;
    UnassociatedAlpha :: 2;
}

ChannelType :: enum u32 {
    UndefinedChannel :: 0;
    RedChannel       :: 1;
    CyanChannel      :: 2;
    GreenChannel     :: 3;
    MagentaChannel   :: 4;
    BlueChannel      :: 5;
    YellowChannel    :: 6;
    OpacityChannel   :: 7;
    BlackChannel     :: 8;
    MatteChannel     :: 9;
    AllChannels      :: 10;
    GrayChannel      :: 11;
}

ClassType :: enum u32 {
    UndefinedClass :: 0;
    DirectClass    :: 1;
    PseudoClass    :: 2;
}

CompositeOperator :: enum u32 {
    UndefinedCompositeOp   :: 0;
    OverCompositeOp        :: 1;
    InCompositeOp          :: 2;
    OutCompositeOp         :: 3;
    AtopCompositeOp        :: 4;
    XorCompositeOp         :: 5;
    PlusCompositeOp        :: 6;
    MinusCompositeOp       :: 7;
    AddCompositeOp         :: 8;
    SubtractCompositeOp    :: 9;
    DifferenceCompositeOp  :: 10;
    MultiplyCompositeOp    :: 11;
    BumpmapCompositeOp     :: 12;
    CopyCompositeOp        :: 13;
    CopyRedCompositeOp     :: 14;
    CopyGreenCompositeOp   :: 15;
    CopyBlueCompositeOp    :: 16;
    CopyOpacityCompositeOp :: 17;
    ClearCompositeOp       :: 18;
    DissolveCompositeOp    :: 19;
    DisplaceCompositeOp    :: 20;
    ModulateCompositeOp    :: 21;
    ThresholdCompositeOp   :: 22;
    NoCompositeOp          :: 23;
    DarkenCompositeOp      :: 24;
    LightenCompositeOp     :: 25;
    HueCompositeOp         :: 26;
    SaturateCompositeOp    :: 27;
    ColorizeCompositeOp    :: 28;
    LuminizeCompositeOp    :: 29;
    ScreenCompositeOp      :: 30;
    OverlayCompositeOp     :: 31;
    CopyCyanCompositeOp    :: 32;
    CopyMagentaCompositeOp :: 33;
    CopyYellowCompositeOp  :: 34;
    CopyBlackCompositeOp   :: 35;
    DivideCompositeOp      :: 36;
    HardLightCompositeOp   :: 37;
    ExclusionCompositeOp   :: 38;
    ColorDodgeCompositeOp  :: 39;
    ColorBurnCompositeOp   :: 40;
    SoftLightCompositeOp   :: 41;
    LinearBurnCompositeOp  :: 42;
    LinearDodgeCompositeOp :: 43;
    LinearLightCompositeOp :: 44;
    VividLightCompositeOp  :: 45;
    PinLightCompositeOp    :: 46;
    HardMixCompositeOp     :: 47;
}

CompressionType :: enum u32 {
    UndefinedCompression    :: 0;
    NoCompression           :: 1;
    BZipCompression         :: 2;
    FaxCompression          :: 3;
    Group3Compression       :: 3;
    Group4Compression       :: 4;
    JPEGCompression         :: 5;
    LosslessJPEGCompression :: 6;
    LZWCompression          :: 7;
    RLECompression          :: 8;
    ZipCompression          :: 9;
    LZMACompression         :: 10;
    JPEG2000Compression     :: 11;
    JBIG1Compression        :: 12;
    JBIG2Compression        :: 13;
    ZSTDCompression         :: 14;
    WebPCompression         :: 15;
}

DisposeType :: enum u32 {
    UndefinedDispose  :: 0;
    NoneDispose       :: 1;
    BackgroundDispose :: 2;
    PreviousDispose   :: 3;
}

EndianType :: enum u32 {
    UndefinedEndian :: 0;
    LSBEndian       :: 1;
    MSBEndian       :: 2;
    NativeEndian    :: 3;
}

FilterTypes :: enum u32 {
    UndefinedFilter :: 0;
    PointFilter     :: 1;
    BoxFilter       :: 2;
    TriangleFilter  :: 3;
    HermiteFilter   :: 4;
    HanningFilter   :: 5;
    HammingFilter   :: 6;
    BlackmanFilter  :: 7;
    GaussianFilter  :: 8;
    QuadraticFilter :: 9;
    CubicFilter     :: 10;
    CatromFilter    :: 11;
    MitchellFilter  :: 12;
    LanczosFilter   :: 13;
    BesselFilter    :: 14;
    SincFilter      :: 15;
}

GeometryFlags :: enum u32 {
    NoValue      :: 0;

    XValue       :: 1;

    YValue       :: 2;

    WidthValue   :: 4;

    HeightValue  :: 8;

    AllValues    :: 15;

    XNegative    :: 16;

    YNegative    :: 32;
    PercentValue :: 4096;
    AspectValue  :: 8192;
    LessValue    :: 16384;
    GreaterValue :: 32768;
    AreaValue    :: 65536;
    MinimumValue :: 131072;
}

GravityType :: enum u32 {
    ForgetGravity    :: 0;

    NorthWestGravity :: 1;

    NorthGravity     :: 2;

    NorthEastGravity :: 3;

    WestGravity      :: 4;

    CenterGravity    :: 5;

    EastGravity      :: 6;

    SouthWestGravity :: 7;

    SouthGravity     :: 8;

    SouthEastGravity :: 9;

    StaticGravity    :: 10;
}

ImageType :: enum u32 {
    UndefinedType            :: 0;
    BilevelType              :: 1;
    GrayscaleType            :: 2;
    GrayscaleMatteType       :: 3;
    PaletteType              :: 4;
    PaletteMatteType         :: 5;
    TrueColorType            :: 6;
    TrueColorMatteType       :: 7;
    ColorSeparationType      :: 8;
    ColorSeparationMatteType :: 9;
    OptimizeType             :: 10;
}

InterlaceType :: enum u32 {
    UndefinedInterlace :: 0;
    NoInterlace        :: 1;
    LineInterlace      :: 2;
    PlaneInterlace     :: 3;
    PartitionInterlace :: 4;
}

MontageMode :: enum u32 {
    UndefinedMode   :: 0;
    FrameMode       :: 1;
    UnframeMode     :: 2;
    ConcatenateMode :: 3;
}

NoiseType :: enum u32 {
    UniformNoise                :: 0;
    GaussianNoise               :: 1;
    MultiplicativeGaussianNoise :: 2;
    ImpulseNoise                :: 3;
    LaplacianNoise              :: 4;
    PoissonNoise                :: 5;

    RandomNoise                 :: 6;
    UndefinedNoise              :: 7;
}

/*
Image orientation.  Based on TIFF standard values (also EXIF).
*/
OrientationType :: enum u32 {
    UndefinedOrientation   :: 0;
    TopLeftOrientation     :: 1;
    TopRightOrientation    :: 2;
    BottomRightOrientation :: 3;
    BottomLeftOrientation  :: 4;
    LeftTopOrientation     :: 5;
    RightTopOrientation    :: 6;
    RightBottomOrientation :: 7;
    LeftBottomOrientation  :: 8;
}

PreviewType :: enum u32 {
    UndefinedPreview       :: 0;
    RotatePreview          :: 1;
    ShearPreview           :: 2;
    RollPreview            :: 3;
    HuePreview             :: 4;
    SaturationPreview      :: 5;
    BrightnessPreview      :: 6;
    GammaPreview           :: 7;
    SpiffPreview           :: 8;
    DullPreview            :: 9;
    GrayscalePreview       :: 10;
    QuantizePreview        :: 11;
    DespecklePreview       :: 12;
    ReduceNoisePreview     :: 13;
    AddNoisePreview        :: 14;
    SharpenPreview         :: 15;
    BlurPreview            :: 16;
    ThresholdPreview       :: 17;
    EdgeDetectPreview      :: 18;
    SpreadPreview          :: 19;
    SolarizePreview        :: 20;
    ShadePreview           :: 21;
    RaisePreview           :: 22;
    SegmentPreview         :: 23;
    SwirlPreview           :: 24;
    ImplodePreview         :: 25;
    WavePreview            :: 26;
    OilPaintPreview        :: 27;
    CharcoalDrawingPreview :: 28;
    JPEGPreview            :: 29;
}

RenderingIntent :: enum u32 {
    UndefinedIntent  :: 0;
    SaturationIntent :: 1;
    PerceptualIntent :: 2;
    AbsoluteIntent   :: 3;
    RelativeIntent   :: 4;
}

ResolutionType :: enum u32 {
    UndefinedResolution           :: 0;
    PixelsPerInchResolution       :: 1;
    PixelsPerCentimeterResolution :: 2;
}

/*
Typedef declarations.
*/
_AffineMatrix :: struct {
    sx: float64;
    rx: float64;
    ry: float64;
    sy: float64;
    tx: float64;
    ty: float64;
}

/*
Typedef declarations.
*/
AffineMatrix :: _AffineMatrix;

_PrimaryInfo :: struct {
    x: float64;
    y: float64;
    z: float64;
}

PrimaryInfo :: _PrimaryInfo;

_ChromaticityInfo :: struct {
    red_primary:   PrimaryInfo;
    green_primary: PrimaryInfo;
    blue_primary:  PrimaryInfo;
    white_point:   PrimaryInfo;
}

ChromaticityInfo :: _ChromaticityInfo;

_PixelPacket :: struct {
    blue:    Quantum;
    green:   Quantum;
    red:     Quantum;
    opacity: Quantum;
}

PixelPacket :: _PixelPacket;

_DoublePixelPacket :: struct {
    red:     float64;
    green:   float64;
    blue:    float64;
    opacity: float64;
}

DoublePixelPacket :: _DoublePixelPacket;

_FloatPixelPacket :: struct {
    red:     float;
    green:   float;
    blue:    float;
    opacity: float;
}

FloatPixelPacket :: _FloatPixelPacket;

/*
ErrorInfo is used to record statistical difference (error)
information based on computed Euclidean distance in RGB space.
*/
_ErrorInfo :: struct {
    mean_error_per_pixel:     float64; /* Average error per pixel (absolute range) */
    normalized_mean_error:    float64; /* Average error per pixel (normalized to 1.0) */
    normalized_maximum_error: float64; /* Maximum error encountered (normalized to 1.0) */
}

/*
ErrorInfo is used to record statistical difference (error)
information based on computed Euclidean distance in RGB space.
*/
ErrorInfo :: _ErrorInfo;

_FrameInfo :: struct {
    width:       u64;
    height:      u64;

    x:           s64;
    y:           s64;
    inner_bevel: s64;
    outer_bevel: s64;
}

FrameInfo :: _FrameInfo;

IndexPacket :: Quantum;

_LongPixelPacket :: struct {
    red:     u64;
    green:   u64;
    blue:    u64;
    opacity: u64;
}

LongPixelPacket :: _LongPixelPacket;

_MontageInfo :: struct {
    geometry:         *u8;
    tile:             *u8;
    title:            *u8;
    frame:            *u8;
    texture:          *u8;
    font:             *u8;

    pointsize:        float64;

    border_width:     u64;

    shadow:           u32;

    fill:             PixelPacket;
    stroke:           PixelPacket;
    background_color: PixelPacket;
    border_color:     PixelPacket;
    matte_color:      PixelPacket;

    gravity:          GravityType;

    filename:         [2053] u8;

    signature:        u64;
}

MontageInfo :: _MontageInfo;

_ProfileInfo :: struct {
    length: u64;

    name:   *u8;

    info:   *u8;
}

ProfileInfo :: _ProfileInfo;

_RectangleInfo :: struct {
    width:  u64;
    height: u64;

    x:      s64;
    y:      s64;
}

RectangleInfo :: _RectangleInfo;

_SegmentInfo :: struct {
    x1: float64;
    y1: float64;
    x2: float64;
    y2: float64;
}

SegmentInfo :: _SegmentInfo;

_ImageExtra :: struct {}

_Image :: struct {
    storage_class:    ClassType; /* DirectClass (TrueColor) or PseudoClass (colormapped) */

    colorspace:       ColorspaceType; /* Current image colorspace/model */

    compression:      CompressionType; /* Compression algorithm to use when encoding image */

    dither:           u32; /* True if image is to be dithered */
    matte:            u32; /* True if image has an opacity (alpha) channel */

    columns:          u64; /* Number of image columns */
    rows:             u64; /* Number of image rows */

    colors:           u32; /* Current number of colors in PseudoClass colormap */
    depth:            u32; /* Bits of precision to preserve in color quantum */

    colormap:         *PixelPacket; /* Pseudoclass colormap array */

    background_color: PixelPacket; /* Background color */
    border_color:     PixelPacket; /* Border color */
    matte_color:      PixelPacket; /* Matte (transparent) color */

    gamma:            float64; /* Image gamma (e.g. 0.45) */

    chromaticity:     ChromaticityInfo; /* Red, green, blue, and white chromaticity values */

    orientation:      OrientationType; /* Image orientation */

    rendering_intent: RenderingIntent; /* Rendering intent */

    units:            ResolutionType; /* Units of image resolution (density) */

    montage:          *u8; /* Tile size and offset within an image montage */
    directory:        *u8; /* Tile names from within an image montage */
    geometry:         *u8; /* Composite/Crop options */

    offset:           s64; /* Offset to start of image data */

    x_resolution:     float64; /* Horizontal resolution (also see units) */
    y_resolution:     float64; /* Vertical resolution (also see units) */

    page:             RectangleInfo; /* Offset to apply when placing image */
    tile_info:        RectangleInfo; /* Subregion tile dimensions and offset */

    blur:             float64; /* Amount of blur to apply when zooming image */
    fuzz:             float64; /* Colors within this distance match target color */

    filter:           FilterTypes; /* Filter to use when zooming image */

    interlace:        InterlaceType; /* Interlace pattern to use when writing image */

    endian:           EndianType; /* Byte order to use when writing image */

    gravity:          GravityType; /* Image placement gravity */

    compose:          CompositeOperator; /* Image placement composition (default OverCompositeOp) */

    dispose:          DisposeType; /* GIF disposal option */

    scene:            u64; /* Animation frame scene number */
    delay:            u64; /* Animation frame scene delay */
    iterations:       u64; /* Animation iterations */
    total_colors:     u64; /* Number of unique colors. See GetNumberColors() */

    start_loop:       s64; /* Animation frame number to start looping at */

    error:            ErrorInfo; /* Computed image comparison or quantization error */

    timer:            TimerInfo; /* Operation micro-timer */

    client_data:      *void; /* User specified opaque data pointer */

    /*
    Output file name.
    
    A colon delimited format identifier may be prepended to the file
    name in order to force a particular output format. Otherwise the
    file extension is used. If no format prefix or file extension is
    present, then the output format is determined by the 'magick'
    field.
    */
    filename:         [2053] u8;

    /*
    Original file name (name of input image file)
    */
    magick_filename:  [2053] u8;

    /*
    File format of the input file, and the default output format.
    
    The precedence when selecting the output format is:
    1) magick prefix to file name (e.g. "jpeg:foo).
    2) file name extension. (e.g. "foo.jpg")
    3) content of this magick field.
    
    */
    magick:           [2053] u8;

    /*
    Original image width (before transformations)
    */
    magick_columns:   u64;

    /*
    Original image height (before transformations)
    */
    magick_rows:      u64;

    exception:        ExceptionInfo; /* Any error associated with this image frame */

    previous:         *_Image; /* Pointer to previous frame */
    next:             *_Image; /* Pointer to next frame */

    profiles:         *void;

    is_monochrome:    u32; /* Private, True if image is known to be monochrome */
    is_grayscale:     u32; /* Private, True if image is known to be grayscale */
    taint:            u32; /* Private, True if image has not been modifed */

    /*
    Allow for expansion of Image without increasing its size.  The
    internals are defined only in image.c.  Clients outside of image.c
    can access the internals via the provided access functions (see below).
    
    This location in Image used to be occupied by Image *clip_mask. The
    clip_mask member now lives in _ImageExtra.
    */
    extra:            *_ImageExtra;

    ping:             u32; /* Private, if true, pixels are undefined */

    cache:            _CacheInfoPtr_; /* Private, image pixel cache */

    default_views:    _ThreadViewSetPtr_; /* Private, default cache views */

    attributes:       _ImageAttributePtr_; /* Private, Image attribute list */

    ascii85:          _Ascii85InfoPtr_; /* Private, supports huffman encoding */

    blob:             _BlobInfoPtr_; /* Private, file I/O object */

    reference_count:  s64; /* Private, Image reference count */

    semaphore:        _SemaphoreInfoPtr_; /* Private, Per image lock (for reference count) */

    logging:          u32; /* Private, True if logging is enabled */

    list:             *_Image; /* Private, used only by display */

    signature:        u64; /* Private, Unique code to validate structure */
}

Image :: _Image;

_ImageInfo :: struct {
    compression:      CompressionType; /* Image compression to use while decoding */

    temporary:        u32; /* Remove file "filename" once it has been read. */
    adjoin:           u32; /* If True, join multiple frames into one file */
    antialias:        u32; /* If True, antialias while rendering */

    subimage:         u64; /* Starting image scene ID to select */
    subrange:         u64; /* Span of image scene IDs (from starting scene) to select */
    depth:            u64; /* Number of quantum bits to preserve while encoding */

    size:             *u8; /* Desired/known dimensions to use when decoding image */
    tile:             *u8; /* Deprecated, name of image to tile on background */
    page:             *u8; /* Output page size & offset */

    interlace:        InterlaceType; /* Interlace scheme to use when decoding image */

    endian:           EndianType; /* Select MSB/LSB endian output for TIFF format */

    units:            ResolutionType; /* Units to apply when evaluating the density option */

    quality:          u64; /* Compression quality factor (format specific) */

    sampling_factor:  *u8; /* JPEG, MPEG, and YUV chroma downsample factor */
    server_name:      *u8; /* X11 server display specification */
    font:             *u8; /* Font name to use for text annotations */
    texture:          *u8; /* Name of texture image to use for background fills */
    density:          *u8; /* Image resolution (also see units) */

    pointsize:        float64; /* Font pointsize */

    fuzz:             float64; /* Colors within this distance are a match */

    pen:              PixelPacket; /* Stroke or fill color while drawing */
    background_color: PixelPacket; /* Background color */
    border_color:     PixelPacket; /* Border color (color surrounding frame) */
    matte_color:      PixelPacket; /* Matte color (frame color) */

    dither:           u32; /* If true, dither image while writing */
    monochrome:       u32; /* If true, use monochrome format */
    progress:         u32; /* If true, show progress indication */

    colorspace:       ColorspaceType; /* Colorspace representations of image pixels */

    type:             ImageType; /* Desired image type (used while reading or writing) */

    group:            s64; /* X11 window group ID */

    verbose:          u32; /* If non-zero, display high-level processing */

    view:             *u8; /* FlashPIX view specification */
    authenticate:     *u8; /* Password used to decrypt file */

    client_data:      *void; /* User-specified data to pass to coder */

    /* If not null, stdio FILE * to read image from
    (fopen mode "rb") or write image to (fopen
    mode "rb+"). */
    file:             *FILE;

    magick:           [2053] u8; /* File format to read. Overrides file extension */
    filename:         [2053] u8; /* File name to read */

    cache:            _CacheInfoPtr_; /* Private. Used to pass image via open cache */

    /* Private. Map of coder specific options passed by user.
    Use AddDefinitions, RemoveDefinitions, & AccessDefinition
    to access and manipulate this data. */
    definitions:      *void;

    attributes:       *Image; /* Private. Image attribute list */

    ping:             u32; /* Private, if true, read file header only */

    preview_type:     PreviewType; /* Private, used by PreviewImage */

    affirm:           u32; /* Private, when true do not intuit image format */

    blob:             _BlobInfoPtr_; /* Private, used to pass in open blob */

    length:           u64; /* Private, used to pass in open blob length */

    unique:           [2053] u8; /* Private, passes temporary filename to TranslateText */
    zero:             [2053] u8; /* Private, passes temporary filename to TranslateText */

    signature:        u64; /* Private, used to validate structure */
}

ImageInfo :: _ImageInfo;

/*
Image utilities methods.
*/
CatchImageException :: (unknown0: *Image) -> ExceptionType #foreign libgraphicsmagick;

AllocateImage :: (unknown0: *ImageInfo) -> *Image #foreign libgraphicsmagick;
AppendImages :: (unknown0: *Image, unknown1: u32, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
CloneImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: u32, unknown4: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

GetImageClipMask :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
GetImageCompositeMask :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ReferenceImage :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;

CloneImageInfo :: (unknown0: *ImageInfo) -> *ImageInfo #foreign libgraphicsmagick;

AccessDefinition :: (image_info: *ImageInfo, magick: *u8, key: *u8) -> *u8 #foreign libgraphicsmagick;

GetImageGeometry :: (unknown0: *Image, unknown1: *u8, unknown2: u32, unknown3: *RectangleInfo) -> s32 #foreign libgraphicsmagick;

/* Functions which return unsigned int as a True/False boolean value */
IsTaintImage :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;
/* Functions which return unsigned int as a True/False boolean value */
IsSubimage :: (unknown0: *u8, unknown1: u32) -> u32 #foreign libgraphicsmagick;

/* Functions which return unsigned int to indicate operation pass/fail */
AddDefinition :: (image_info: *ImageInfo, magick: *u8, key: *u8, value: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/* Functions which return unsigned int to indicate operation pass/fail */
AddDefinitions :: (image_info: *ImageInfo, options: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/* Functions which return unsigned int to indicate operation pass/fail */
AnimateImages :: (image_info: *ImageInfo, image: *Image) -> u32 #foreign libgraphicsmagick;
/* Functions which return unsigned int to indicate operation pass/fail */
ClipImage :: (image: *Image) -> u32 #foreign libgraphicsmagick;
/* Functions which return unsigned int to indicate operation pass/fail */
ClipPathImage :: (image: *Image, pathname: *u8, inside: u32) -> u32 #foreign libgraphicsmagick;
/* Functions which return unsigned int to indicate operation pass/fail */
CompositeMaskImage :: (image: *Image) -> u32 #foreign libgraphicsmagick;
CompositePathImage :: (image: *Image, pathname: *u8, inside: u32) -> u32 #foreign libgraphicsmagick;
DisplayImages :: (image_info: *ImageInfo, image: *Image) -> u32 #foreign libgraphicsmagick;
RemoveDefinitions :: (image_info: *ImageInfo, options: *u8) -> u32 #foreign libgraphicsmagick;
ResetImagePage :: (image: *Image, page: *u8) -> u32 #foreign libgraphicsmagick;
SetImage :: (image: *Image, unknown0: Quantum) -> u32 #foreign libgraphicsmagick;
SetImageEx :: (image: *Image, opacity: Quantum, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
SetImageColor :: (image: *Image, pixel: *PixelPacket) -> u32 #foreign libgraphicsmagick;
SetImageColorRegion :: (image: *Image, x: s64, y: s64, width: u64, height: u64, pixel: *PixelPacket) -> u32 #foreign libgraphicsmagick;

SetImageClipMask :: (image: *Image, clip_mask: *Image) -> u32 #foreign libgraphicsmagick;
SetImageCompositeMask :: (image: *Image, composite_mask: *Image) -> u32 #foreign libgraphicsmagick;
SetImageDepth :: (image: *Image, unknown0: u64) -> u32 #foreign libgraphicsmagick;
SetImageInfo :: (image_info: *ImageInfo, flags: u32, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
SetImageOpacity :: (unknown0: *Image, unknown1: u32) -> u32 #foreign libgraphicsmagick;
SetImageType :: (image: *Image, unknown0: ImageType) -> u32 #foreign libgraphicsmagick;
StripImage :: (image: *Image) -> u32 #foreign libgraphicsmagick;
SyncImage :: (image: *Image) -> u32 #foreign libgraphicsmagick;

AllocateNextImage :: (unknown0: *ImageInfo, unknown1: *Image) -> void #foreign libgraphicsmagick;
DestroyImage :: (unknown0: *Image) -> void #foreign libgraphicsmagick;
DestroyImageInfo :: (unknown0: *ImageInfo) -> void #foreign libgraphicsmagick;
GetImageException :: (unknown0: *Image, unknown1: *ExceptionInfo) -> void #foreign libgraphicsmagick;
GetImageInfo :: (unknown0: *ImageInfo) -> void #foreign libgraphicsmagick;
ModifyImage :: (unknown0: **Image, unknown1: *ExceptionInfo) -> void #foreign libgraphicsmagick;

/* provide public access to the clip_mask member of Image */
ImageGetClipMask :: (unknown0: *Image) -> **Image #foreign libgraphicsmagick;

/* provide public access to the composite_mask member of Image */
ImageGetCompositeMask :: (unknown0: *Image) -> **Image #foreign libgraphicsmagick;

_ImageCharacteristics :: struct {
    cmyk:       u32; /* CMYK(A) image */
    grayscale:  u32; /* Grayscale image */
    monochrome: u32; /* Black/white image */
    opaque:     u32; /* Opaque image */
    palette:    u32; /* Colormapped image */
}

ImageCharacteristics :: _ImageCharacteristics;

/* Functions which return unsigned int to indicate operation pass/fail */
GetImageCharacteristics :: (image: *Image, characteristics: *ImageCharacteristics, optimize: u32, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GetImageDepth :: (unknown0: *Image, unknown1: *ExceptionInfo) -> u64 #foreign libgraphicsmagick;

IsGrayImage :: (image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
IsMonochromeImage :: (image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
IsOpaqueImage :: (image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GetImageType :: (unknown0: *Image, unknown1: *ExceptionInfo) -> ImageType #foreign libgraphicsmagick;

GetImageBoundingBox :: (unknown0: *Image, exception: *ExceptionInfo) -> RectangleInfo #foreign libgraphicsmagick;

_ImageAttribute :: struct {
    key:      *u8; /* identifying key */
    value:    *u8; /* value string */

    length:   u64; /* value string length */

    previous: *_ImageAttribute;
    next:     *_ImageAttribute;
}

ImageAttribute :: _ImageAttribute;

/*
MagickExported text attribute methods.
*/
GetImageAttribute :: (image: *Image, key: *u8) -> *ImageAttribute #foreign libgraphicsmagick;
/*
MagickExported text attribute methods.
*/
GetImageClippingPathAttribute :: (image: *Image) -> *ImageAttribute #foreign libgraphicsmagick;
/*
MagickExported text attribute methods.
*/
GetImageInfoAttribute :: (image_info: *ImageInfo, image: *Image, key: *u8) -> *ImageAttribute #foreign libgraphicsmagick;

CloneImageAttributes :: (clone_image: *Image, original_image: *Image) -> u32 #foreign libgraphicsmagick;
SetImageAttribute :: (image: *Image, key: *u8, value: *u8) -> u32 #foreign libgraphicsmagick;

DestroyImageAttributes :: (image: *Image) -> void #foreign libgraphicsmagick;

AverageImages :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

/*
Forward declarations.
*/
BlobInfo :: _BlobInfo;

/*
Makes a duplicate of the given blob info structure, or if blob info
is NULL, a new one.
*/
CloneBlobInfo :: (blob_info: *BlobInfo) -> *BlobInfo #foreign libgraphicsmagick;

/*
Increments the reference count associated with the pixel blob,
returning a pointer to the blob.
*/
ReferenceBlob :: (blob: *BlobInfo) -> *BlobInfo #foreign libgraphicsmagick;

/*
Deallocate memory associated with the BlobInfo structure.
*/
DestroyBlobInfo :: (blob: *BlobInfo) -> void #foreign libgraphicsmagick;

/*
If BLOB is a memory mapping then unmap it. Reset BlobInfo structure
to its default state.
*/
DetachBlob :: (blob: *BlobInfo) -> void #foreign libgraphicsmagick;

/*
Initialize a BlobInfo structure.
*/
GetBlobInfo :: (blob: *BlobInfo) -> void #foreign libgraphicsmagick;

/*
Attach memory buffer to a BlobInfo structure.
*/
AttachBlob :: (blob_info: *BlobInfo, blob: *void, length: u64) -> void #foreign libgraphicsmagick;

/*
Deallocate all memory associated with an Image blob (reference counted).
*/
DestroyBlob :: (image: *Image) -> void #foreign libgraphicsmagick;

/*
Read an Image from a formatted in-memory "file" image  ("BLOB").
*/
BlobToImage :: (image_info: *ImageInfo, blob: *void, length: u64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

/*
Return an Image populated with salient information regarding a
formatted in-memory "file" image ("BLOB") but without reading the
image pixels.
*/
PingBlob :: (image_info: *ImageInfo, blob: *void, length: u64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

/*
Writes an Image to a formatted (like a file) in-memory
representation.
*/
ImageToBlob :: (image_info: *ImageInfo, image: *Image, length: *u64, exception: *ExceptionInfo) -> *void #foreign libgraphicsmagick;

/*
Blob open modes.
*/
BlobMode :: enum u32 {
    UndefinedBlobMode   :: 0;
    ReadBlobMode        :: 1;
    ReadBinaryBlobMode  :: 2;
    WriteBlobMode       :: 3;
    WriteBinaryBlobMode :: 4;
}

/*
Open an input or output stream for access.  May also use a stream
provided via image_info->stream.
*/
OpenBlob :: (image_info: *ImageInfo, image: *Image, mode: BlobMode, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Close I/O to the file or BLOB.
*/
CloseBlob :: (image: *Image) -> u32 #foreign libgraphicsmagick;

/*
Read data from the file or BLOB into a buffer.
*/
ReadBlob :: (image: *Image, length: u64, data: *void) -> u64 #foreign libgraphicsmagick;

/*
Read data from the file or BLOB into a buffer, but support zero-copy
if possible.
*/
ReadBlobZC :: (image: *Image, length: u64, data: **void) -> u64 #foreign libgraphicsmagick;

/*
Write data from a buffer to the file or BLOB.
*/
WriteBlob :: (image: *Image, length: u64, data: *void) -> u64 #foreign libgraphicsmagick;

/*
Move the current read or write offset position in the file or BLOB.
*/
SeekBlob :: (image: *Image, offset: magick_off_t, whence: s32) -> magick_off_t #foreign libgraphicsmagick;

/*
Obtain the current read or write offset position in the file or
BLOB.
*/
TellBlob :: (image: *Image) -> magick_off_t #foreign libgraphicsmagick;

/*
Test to see if EOF has been detected while reading the file or BLOB.
*/
EOFBlob :: (image: *Image) -> s32 #foreign libgraphicsmagick;

/*
Test to see if an error has been encountered while doing I/O to the file
or BLOB.  Non-zero is returned if an error occured.
*/
GetBlobStatus :: (image: *Image) -> s32 #foreign libgraphicsmagick;

/*
Return the first errno present when an error has been encountered while
doing I/O to the file or BLOB.  This is only useful if GetBlobStatus() has
already reported that an error occured.
*/
GetBlobFirstErrno :: (image: *Image) -> s32 #foreign libgraphicsmagick;

/*
Test to see if blob is currently open.
*/
GetBlobIsOpen :: (image: *Image) -> u32 #foreign libgraphicsmagick;

/*
Obtain the current size of the file or BLOB.  Zero is returned if
the size can not be determined.  If BLOB is no longer open, then
return the size when the BLOB was closed.
*/
GetBlobSize :: (image: *Image) -> magick_off_t #foreign libgraphicsmagick;

/*
Obtain the underlying stdio FILE* for the file (if any).
*/
GetBlobFileHandle :: (image: *Image) -> *FILE #foreign libgraphicsmagick;

/*
Obtain a pointer to the base of where BLOB data is stored.  The data
is only available if the data is stored on the heap, or is memory
mapped.  Otherwise NULL is returned.
*/
GetBlobStreamData :: (image: *Image) -> *u8 #foreign libgraphicsmagick;

/*
Read a single byte from the file or BLOB.  Returns an EOF character if EOF
has been detected.
*/
ReadBlobByte :: (image: *Image) -> s32 #foreign libgraphicsmagick;

/*
Read a 16-bit little-endian unsigned "short" value from the file or BLOB.
*/
ReadBlobLSBShort :: (image: *Image) -> magick_uint16_t #foreign libgraphicsmagick;

/*
Read a 16-bit little-endian signed "short" value from the file or BLOB.
*/
ReadBlobLSBSignedShort :: (image: *Image) -> magick_int16_t #foreign libgraphicsmagick;

/*
Read an array of little-endian unsigned 16-bit "short" values from the
file or BLOB.
*/
ReadBlobLSBShorts :: (image: *Image, octets: u64, data: *magick_uint16_t) -> u64 #foreign libgraphicsmagick;

/*
Read a 16-bit big-endian unsigned "short" value from the file or
BLOB.
*/
ReadBlobMSBShort :: (image: *Image) -> magick_uint16_t #foreign libgraphicsmagick;

/*
Read a 16-bit big-endian signed "short" value from the file or BLOB.
*/
ReadBlobMSBSignedShort :: (image: *Image) -> magick_int16_t #foreign libgraphicsmagick;

/*
Read an array of big-endian 16-bit "short" values from the file or BLOB.
*/
ReadBlobMSBShorts :: (image: *Image, octets: u64, data: *magick_uint16_t) -> u64 #foreign libgraphicsmagick;

/*
Read a 32-bit little-endian unsigned "long" value from the file or BLOB.
*/
ReadBlobLSBLong :: (image: *Image) -> magick_uint32_t #foreign libgraphicsmagick;

/*
Read a 32-bit little-endian signed "long" value from the file or BLOB.
*/
ReadBlobLSBSignedLong :: (image: *Image) -> magick_int32_t #foreign libgraphicsmagick;

/*
Read an array of little-endian 32-bit "long" values from the file or BLOB.
*/
ReadBlobLSBLongs :: (image: *Image, octets: u64, data: *magick_uint32_t) -> u64 #foreign libgraphicsmagick;

/*
Read a 32-bit big-endian unsigned "long" value from the file or BLOB.
*/
ReadBlobMSBLong :: (image: *Image) -> magick_uint32_t #foreign libgraphicsmagick;

/*
Read a 32-bit big-endian signed "long" value from the file or BLOB.
*/
ReadBlobMSBSignedLong :: (image: *Image) -> magick_int32_t #foreign libgraphicsmagick;

/*
Read an array of big-endian 32-bit "long" values from the file or BLOB.
*/
ReadBlobMSBLongs :: (image: *Image, octets: u64, data: *magick_uint32_t) -> u64 #foreign libgraphicsmagick;

/*
Read a little-endian 32-bit "float" value from the file or BLOB.
*/
ReadBlobLSBFloat :: (image: *Image) -> float #foreign libgraphicsmagick;

/*
Read an array of little-endian 32-bit "float" values from the file or
BLOB.
*/
ReadBlobLSBFloats :: (image: *Image, octets: u64, data: *float) -> u64 #foreign libgraphicsmagick;

/*
Read a big-endian 32-bit "float" value from the file or BLOB.
*/
ReadBlobMSBFloat :: (image: *Image) -> float #foreign libgraphicsmagick;

/*
Read an array of big-endian 32-bit "float" values from the file or BLOB.
*/
ReadBlobMSBFloats :: (image: *Image, octets: u64, data: *float) -> u64 #foreign libgraphicsmagick;

/*
Read a little-endian 64-bit "double" value from the file or BLOB.
*/
ReadBlobLSBDouble :: (image: *Image) -> float64 #foreign libgraphicsmagick;

/*
Read an array of little-endian 64-bit "double" values from the file or
BLOB.
*/
ReadBlobLSBDoubles :: (image: *Image, octets: u64, data: *float64) -> u64 #foreign libgraphicsmagick;

/*
Read a big-endian 64-bit "double" value from the file or BLOB.
*/
ReadBlobMSBDouble :: (image: *Image) -> float64 #foreign libgraphicsmagick;

/*
Read an array of big-endian 64-bit "double" values from the file or BLOB.
*/
ReadBlobMSBDoubles :: (image: *Image, octets: u64, data: *float64) -> u64 #foreign libgraphicsmagick;

/*
Read a string from the file or blob until a newline character is read or
an end-of-file condition is encountered.
*/
ReadBlobString :: (image: *Image, _string: *u8) -> *u8 #foreign libgraphicsmagick;

/*
Write a single byte to the file or BLOB.
*/
WriteBlobByte :: (image: *Image, value: magick_uint8_t) -> u64 #foreign libgraphicsmagick;

/*
Write the content of an entire disk file to the file or BLOB.
*/
WriteBlobFile :: (image: *Image, filename: *u8) -> u32 #foreign libgraphicsmagick;

/*
Write a 16-bit signed "short" value to the file or BLOB in little-endian
order.
*/
WriteBlobLSBShort :: (image: *Image, value: magick_uint16_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 16-bit signed "short" value to the file or BLOB in little-endian
order.
*/
WriteBlobLSBSignedShort :: (image: *Image, value: magick_int16_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 32-bit unsigned "long" value to the file or BLOB in little-endian
order.
*/
WriteBlobLSBLong :: (image: *Image, value: magick_uint32_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 32-bit signed "long" value to the file or BLOB in little-endian
order.
*/
WriteBlobLSBSignedLong :: (image: *Image, value: magick_int32_t) -> u64 #foreign libgraphicsmagick;

WriteBlobLSBDouble :: (image: *Image, d: float64) -> u64 #foreign libgraphicsmagick;

/*
Write a 32-bit unsigned "long" value to the file or BLOB in big-endian
order.
*/
WriteBlobMSBLong :: (image: *Image, value: magick_uint32_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 32-bit signed "long" value to the file or BLOB in big-endian
order.
*/
WriteBlobMSBSignedLong :: (image: *Image, value: magick_int32_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 16-bit unsigned "short" value to the file or BLOB in big-endian
order.
*/
WriteBlobMSBShort :: (image: *Image, value: magick_uint16_t) -> u64 #foreign libgraphicsmagick;

/*
Write a 16-bit signed "short" value to the file or BLOB in big-endian
order.
*/
WriteBlobMSBSignedShort :: (image: *Image, value: magick_int16_t) -> u64 #foreign libgraphicsmagick;

/*
Write a C string to the file or BLOB, without the terminating NULL byte.
*/
WriteBlobString :: (image: *Image, _string: *u8) -> u64 #foreign libgraphicsmagick;

/*
Blob supports seek operations.  BlobSeek() and BlobTell() may safely be
used.
*/
BlobIsSeekable :: (image: *Image) -> u32 #foreign libgraphicsmagick;

/*
Allow file descriptor to be closed (if True).
*/
SetBlobClosable :: (image: *Image, closable: u32) -> void #foreign libgraphicsmagick;

/*
Blob is for a temporary file which should be deleted (if True).
*/
SetBlobTemporary :: (image: *Image, isTemporary: u32) -> void #foreign libgraphicsmagick;

/*
Returns MagickTrue if the file associated with the blob is a temporary
file and should be removed when the associated image is destroyed.
*/
GetBlobTemporary :: (image: *Image) -> u32 #foreign libgraphicsmagick;

/*
Memory mapping modes.
*/
MapMode :: enum u32 {
    ReadMode  :: 0;
    WriteMode :: 1;
    IOMode    :: 2;
}

/*
Release memory mapping for a region.
*/
UnmapBlob :: (map: *void, length: u64) -> u32 #foreign libgraphicsmagick;

/*
Perform a requested memory mapping of a file descriptor.
*/
MapBlob :: (file: s32, mode: MapMode, offset: magick_off_t, length: u64) -> *void #foreign libgraphicsmagick;

/*
Writes a buffer to a named file.
*/
BlobToFile :: (filename: *u8, blob: *void, length: u64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read the contents of a file into memory.
*/
FileToBlob :: (filename: *u8, length: *u64, exception: *ExceptionInfo) -> *void #foreign libgraphicsmagick;

/*
Reserve space for a specified output size.
*/
BlobReserveSize :: (image: *Image, size: magick_off_t) -> u32 #foreign libgraphicsmagick;

/*
Copies data from the input stream to a file.  Useful in case it is
necessary to perform seek operations on the input data.
*/
ImageToFile :: (image: *Image, filename: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Search for a configuration file (".mgk" file) using appropriate
rules and return as an in-memory buffer.
*/
GetConfigureBlob :: (filename: *u8, path: *u8, length: *u64, exception: *ExceptionInfo) -> *void #foreign libgraphicsmagick;

/*
Converts a least-significant byte first buffer of integers to
most-significant byte first.
*/
MSBOrderLong :: (buffer: *u8, length: u64) -> void #foreign libgraphicsmagick;

/*
Converts a least-significant byte first buffer of integers to
most-significant byte first.
*/
MSBOrderShort :: (p: *u8, length: u64) -> void #foreign libgraphicsmagick;

/*
Checks if the blob of the specified image is referenced by other images. If
the reference count is higher then 1 a new blob is assigned to the image.
*/
DisassociateBlob :: (unknown0: *Image) -> void #foreign libgraphicsmagick;

CdlImage :: (image: *Image, cdl: *u8) -> u32 #foreign libgraphicsmagick;

ExportImageChannel :: (image: *Image, channel: ChannelType, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

GetImageChannelDepth :: (image: *Image, channel: ChannelType, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ChannelImage :: (image: *Image, channel: ChannelType) -> u32 #foreign libgraphicsmagick;
ImportImageChannel :: (src_image: *Image, dst_image: *Image, channel: ChannelType) -> u32 #foreign libgraphicsmagick;

ImportImageChannelsMasked :: (source_image: *Image, update_image: *Image, channels: ChannelType) -> u32 #foreign libgraphicsmagick;

SetImageChannelDepth :: (image: *Image, channel: ChannelType, depth: u32) -> u32 #foreign libgraphicsmagick;

/*
PixelPacket with usage count, used to support color histograms.
*/
_HistogramColorPacket :: struct {
    pixel: PixelPacket;

    count: u64;
}

/*
PixelPacket with usage count, used to support color histograms.
*/
HistogramColorPacket :: _HistogramColorPacket;

GetColorHistogram :: (image: *Image, colors: *u64, exception: *ExceptionInfo) -> *HistogramColorPacket #foreign libgraphicsmagick;

GetNumberColors :: (image: *Image, file: *FILE, exception: *ExceptionInfo) -> u64 #foreign libgraphicsmagick;

GetColorTuple :: (color: *PixelPacket, depth: u32, matte: u32, hex: u32, tuple: *u8) -> void #foreign libgraphicsmagick;

IsPaletteImage :: (image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Specifications that color is compliant with.
*/
ComplianceType :: enum u32 {
    UndefinedCompliance :: 0;
    NoCompliance        :: 0;
    SVGCompliance       :: 1;
    X11Compliance       :: 2;
    XPMCompliance       :: 4;
    AllCompliance       :: 65535;
}

GetColorList :: (pattern: *u8, number_colors: *u64) -> **u8 #foreign libgraphicsmagick;

QueryColorDatabase :: (name: *u8, color: *PixelPacket, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
QueryColorname :: (image: *Image, color: *PixelPacket, compliance: ComplianceType, name: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

AllocateImageColormap :: (unknown0: *Image, colors: u64) -> u32 #foreign libgraphicsmagick;
CycleColormapImage :: (image: *Image, amount: s32) -> u32 #foreign libgraphicsmagick;
ReallocateImageColormap :: (unknown0: *Image, colors: u32) -> u32 #foreign libgraphicsmagick;
ReplaceImageColormap :: (image: *Image, colormap: *PixelPacket, colors: u32) -> u32 #foreign libgraphicsmagick;

SortColormapByIntensity :: (image: *Image) -> u32 #foreign libgraphicsmagick;

AnimateImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

BenchmarkImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

CompareImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

CompositeImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ConjureImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ConvertImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

DisplayImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

IdentifyImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ImportImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MagickCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MogrifyImage :: (unknown0: *ImageInfo, unknown1: s32, unknown2: **u8, unknown3: **Image) -> u32 #foreign libgraphicsmagick;
MogrifyImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MogrifyImages :: (unknown0: *ImageInfo, unknown1: s32, unknown2: **u8, unknown3: **Image) -> u32 #foreign libgraphicsmagick;
MontageImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

TimeImageCommand :: (image_info: *ImageInfo, argc: s32, argv: **u8, metadata: **u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GMCommand :: (argc: s32, argv: **u8) -> s32 #foreign libgraphicsmagick;

/*
Pixel differencing algorithms.
*/
HighlightStyle :: enum u32 {
    UndefinedHighlightStyle :: 0;
    AssignHighlightStyle    :: 1;
    ThresholdHighlightStyle :: 2;
    TintHighlightStyle      :: 3;
    XorHighlightStyle       :: 4;
}

_DifferenceImageOptions :: struct {
    channel:         ChannelType; /* Channel(s) to difference */
    highlight_style: HighlightStyle; /* Pixel annotation style */
    highlight_color: PixelPacket; /* Changed pixel highlight color */
}

DifferenceImageOptions :: _DifferenceImageOptions;

InitializeDifferenceImageOptions :: (options: *DifferenceImageOptions, exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;

DifferenceImage :: (reference_image: *Image, compare_image: *Image, difference_options: *DifferenceImageOptions, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

/*
Pixel error metrics.
*/
MetricType :: enum u32 {
    UndefinedMetric              :: 0;
    MeanAbsoluteErrorMetric      :: 1;
    MeanSquaredErrorMetric       :: 2;
    PeakAbsoluteErrorMetric      :: 3;
    PeakSignalToNoiseRatioMetric :: 4;
    RootMeanSquaredErrorMetric   :: 5;
}

/*
Pixel difference statistics.
*/
_DifferenceStatistics :: struct {
    red:      float64;
    green:    float64;
    blue:     float64;
    opacity:  float64;
    combined: float64;
}

/*
Pixel difference statistics.
*/
DifferenceStatistics :: _DifferenceStatistics;

InitializeDifferenceStatistics :: (difference_statistics: *DifferenceStatistics, exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;

GetImageChannelDifference :: (reference_image: *Image, compare_image: *Image, metric: MetricType, statistics: *DifferenceStatistics, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GetImageChannelDistortion :: (reference_image: *Image, compare_image: *Image, channel: ChannelType, metric: MetricType, distortion: *float64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GetImageDistortion :: (reference_image: *Image, compare_image: *Image, metric: MetricType, distortion: *float64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

IsImagesEqual :: (unknown0: *Image, unknown1: *Image) -> u32 #foreign libgraphicsmagick;

/*
Special options required by some composition operators.
*/
_CompositeOptions_t :: struct {
    /* ModulateComposite */
    percent_brightness: float64;

    /* ThresholdComposite */
    amount:             float64;
    threshold:          float64;
}

/*
Special options required by some composition operators.
*/
CompositeOptions_t :: _CompositeOptions_t;

CompositeImage :: (canvas_image: *Image, compose: CompositeOperator, update_image: *Image, x_offset: s64, y_offset: s64) -> u32 #foreign libgraphicsmagick;

CompositeImageRegion :: (compose: CompositeOperator, options: *CompositeOptions_t, columns: u64, rows: u64, update_image: *Image, update_x: s64, update_y: s64, canvas_image: *Image, canvas_x: s64, canvas_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MagickCompositeImageUnderColor :: (image: *Image, undercolor: *PixelPacket, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Typedef declaration.
*/
_Ascii85Info :: struct {
    offset:     s64;
    line_break: s64;

    buffer:     [10] magick_uint8_t;
}

/*
Typedef declaration.
*/
Ascii85Info :: _Ascii85Info;

/*
TODO: Clean up the interface between BLOB write functions,
compression functions, and encoding functions so they
may be hooked into/stacked on top of each other. Most are
(or can be changed to be) stream based.
*/
WriteByteHook :: #type (unknown0: *Image, unknown1: magick_uint8_t, info: *void) -> u32 #c_call;

/*
Commonly used byte writer hooks.
*/
Ascii85WriteByteHook :: (image: *Image, code: magick_uint8_t, info: *void) -> u32 #foreign libgraphicsmagick;
/*
Commonly used byte writer hooks.
*/
BlobWriteByteHook :: (image: *Image, code: magick_uint8_t, info: *void) -> u32 #foreign libgraphicsmagick;

/*
Compress methods.
*/
HuffmanDecodeImage :: (image: *Image) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
HuffmanEncodeImage :: (image_info: *ImageInfo, image: *Image) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
HuffmanEncode2Image :: (image_info: *ImageInfo, image: *Image, write_byte: WriteByteHook, info: *void) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
LZWEncodeImage :: (image: *Image, length: u64, pixels: *magick_uint8_t) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
LZWEncode2Image :: (image: *Image, length: u64, pixels: *magick_uint8_t, write_byte: WriteByteHook, info: *void) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
PackbitsEncodeImage :: (image: *Image, length: u64, pixels: *magick_uint8_t) -> u32 #foreign libgraphicsmagick;
/*
Compress methods.
*/
PackbitsEncode2Image :: (image: *Image, length: u64, pixels: *magick_uint8_t, write_byte: WriteByteHook, info: *void) -> u32 #foreign libgraphicsmagick;

ImageToHuffman2DBlob :: (image: *Image, image_info: *ImageInfo, length: *u64, exception: *ExceptionInfo) -> *u8 #foreign libgraphicsmagick;

ImageToJPEGBlob :: (image: *Image, image_info: *ImageInfo, length: *u64, exception: *ExceptionInfo) -> *u8 #foreign libgraphicsmagick;

Ascii85Encode :: (image: *Image, code: magick_uint8_t) -> void #foreign libgraphicsmagick;
Ascii85Flush :: (image: *Image) -> void #foreign libgraphicsmagick;
Ascii85Initialize :: (image: *Image) -> void #foreign libgraphicsmagick;

ConfirmAccessMode :: enum u32 {
    UndefinedConfirmAccessMode   :: 0;
    FileExecuteConfirmAccessMode :: 1;
    FileReadConfirmAccessMode    :: 2;
    FileWriteConfirmAccessMode   :: 3;
    URLGetFTPConfirmAccessMode   :: 4;
    URLGetFileConfirmAccessMode  :: 5;
    URLGetHTTPConfirmAccessMode  :: 6;
}

ConfirmAccessHandler :: #type (mode: ConfirmAccessMode, path: *u8, exception: *ExceptionInfo) -> u32 #c_call;

MagickConfirmAccess :: (mode: ConfirmAccessMode, path: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MagickSetConfirmAccessHandler :: (handler: ConfirmAccessHandler) -> ConfirmAccessHandler #foreign libgraphicsmagick;

/*
Quantum import/export types as used by ImportImagePixelArea() and
ExportImagePixelArea(). Values are imported or exported in network
byte order ("big endian") by default, but little endian may be
selected via the 'endian' option in ExportPixelAreaOptions and
ImportPixelAreaOptions.
*/
QuantumType :: enum u32 {
    UndefinedQuantum  :: 0;
    IndexQuantum      :: 1;
    GrayQuantum       :: 2;
    IndexAlphaQuantum :: 3;
    GrayAlphaQuantum  :: 4;
    RedQuantum        :: 5;
    CyanQuantum       :: 6;
    GreenQuantum      :: 7;
    YellowQuantum     :: 8;
    BlueQuantum       :: 9;
    MagentaQuantum    :: 10;
    AlphaQuantum      :: 11;
    BlackQuantum      :: 12;
    RGBQuantum        :: 13;
    RGBAQuantum       :: 14;
    CMYKQuantum       :: 15;
    CMYKAQuantum      :: 16;
    CIEYQuantum       :: 17;
    CIEXYZQuantum     :: 18;
}

/*
Quantum sample type for when exporting/importing a pixel area.
*/
QuantumSampleType :: enum u32 {
    UndefinedQuantumSampleType :: 0;
    UnsignedQuantumSampleType  :: 1;
    FloatQuantumSampleType     :: 2;
}

/*
Quantum size types as used by ConstituteImage() and DispatchImage()/
*/
StorageType :: enum u32 {
    CharPixel    :: 0;
    ShortPixel   :: 1;
    IntegerPixel :: 2;
    LongPixel    :: 3;
    FloatPixel   :: 4;
    DoublePixel  :: 5;
}

/*
Additional options for ExportImagePixelArea()
*/
_ExportPixelAreaOptions :: struct {
    sample_type:          QuantumSampleType; /* Quantum sample type */

    double_minvalue:      float64; /* Minimum value (default 0.0) for linear floating point samples */
    double_maxvalue:      float64; /* Maximum value (default 1.0) for linear floating point samples */

    grayscale_miniswhite: u32; /* Grayscale minimum value is white rather than black */

    pad_bytes:            u64; /* Number of pad bytes to output after pixel data */

    pad_value:            u8; /* Value to use when padding end of pixel data */

    endian:               EndianType; /* Endian orientation for 16/32/64 bit types (default MSBEndian) */

    signature:            u64;
}

/*
Additional options for ExportImagePixelArea()
*/
ExportPixelAreaOptions :: _ExportPixelAreaOptions;

/*
Optional results info for ExportImagePixelArea()
*/
_ExportPixelAreaInfo :: struct {
    bytes_exported: u64; /* Number of bytes which were exported */
}

/*
Optional results info for ExportImagePixelArea()
*/
ExportPixelAreaInfo :: _ExportPixelAreaInfo;

/*
Additional options for ImportImagePixelArea()
*/
_ImportPixelAreaOptions :: struct {
    sample_type:          QuantumSampleType; /* Quantum sample type */

    double_minvalue:      float64; /* Minimum value (default 0.0) for linear floating point samples */
    double_maxvalue:      float64; /* Maximum value (default 1.0) for linear floating point samples */

    grayscale_miniswhite: u32; /* Grayscale minimum value is white rather than black */

    endian:               EndianType; /* Endian orientation for 16/32/64 bit types (default MSBEndian) */

    signature:            u64;
}

/*
Additional options for ImportImagePixelArea()
*/
ImportPixelAreaOptions :: _ImportPixelAreaOptions;

/*
Optional results info for ImportImagePixelArea()
*/
_ImportPixelAreaInfo :: struct {
    bytes_imported: u64; /* Number of bytes which were imported */
}

/*
Optional results info for ImportImagePixelArea()
*/
ImportPixelAreaInfo :: _ImportPixelAreaInfo;

StorageTypeToString :: (storage_type: StorageType) -> *u8 #foreign libgraphicsmagick;
QuantumSampleTypeToString :: (sample_type: QuantumSampleType) -> *u8 #foreign libgraphicsmagick;
QuantumTypeToString :: (quantum_type: QuantumType) -> *u8 #foreign libgraphicsmagick;

ConstituteImage :: (width: u64, height: u64, map: *u8, type: StorageType, pixels: *void, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ConstituteTextureImage :: (columns: u64, rows: u64, texture: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

PingImage :: (image_info: *ImageInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ReadImage :: (image_info: *ImageInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ReadInlineImage :: (image_info: *ImageInfo, content: *u8, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

DispatchImage :: (image: *Image, x_offset: s64, y_offset: s64, columns: u64, rows: u64, map: *u8, type: StorageType, pixels: *void, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ExportImagePixelArea :: (image: *Image, quantum_type: QuantumType, quantum_size: u32, destination: *u8, options: *ExportPixelAreaOptions, export_info: *ExportPixelAreaInfo) -> u32 #foreign libgraphicsmagick;

ExportViewPixelArea :: (view: *ViewInfo, quantum_type: QuantumType, quantum_size: u32, destination: *u8, options: *ExportPixelAreaOptions, export_info: *ExportPixelAreaInfo) -> u32 #foreign libgraphicsmagick;

ImportImagePixelArea :: (image: *Image, quantum_type: QuantumType, quantum_size: u32, source: *u8, options: *ImportPixelAreaOptions, import_info: *ImportPixelAreaInfo) -> u32 #foreign libgraphicsmagick;

ImportViewPixelArea :: (view: *ViewInfo, quantum_type: QuantumType, quantum_size: u32, source: *u8, options: *ImportPixelAreaOptions, import_info: *ImportPixelAreaInfo) -> u32 #foreign libgraphicsmagick;

WriteImage :: (image_info: *ImageInfo, image: *Image) -> u32 #foreign libgraphicsmagick;
WriteImages :: (image_info: *ImageInfo, image: *Image, filename: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

WriteImagesFile :: (image_info: *ImageInfo, image: *Image, file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ExportPixelAreaOptionsInit :: (options: *ExportPixelAreaOptions) -> void #foreign libgraphicsmagick;
ImportPixelAreaOptionsInit :: (options: *ImportPixelAreaOptions) -> void #foreign libgraphicsmagick;

MagickFindRawImageMinMax :: (image: *Image, endian: EndianType, width: u64, height: u64, type: StorageType, scanline_octets: u32, scanline_buffer: *void, min: *float64, max: *float64) -> u32 #foreign libgraphicsmagick;

MagickGetQuantumSamplesPerPixel :: (quantum_type: QuantumType) -> u32 #foreign libgraphicsmagick;

BorderImage :: (unknown0: *Image, unknown1: *RectangleInfo, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
FrameImage :: (unknown0: *Image, unknown1: *FrameInfo, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

RaiseImage :: (unknown0: *Image, unknown1: *RectangleInfo, unknown2: s32) -> u32 #foreign libgraphicsmagick;

/*
Delegate structure definitions.
*/
_DelegateInfo :: struct {
    path:      *u8; /* Path to delegate configuation file */
    decode:    *u8; /* Decode from format */
    encode:    *u8; /* Transcode to format */

    commands:  *u8; /* Commands to execute */

    mode:      s32; /* <0 = encoder, >0 = decoder */

    stealth:   u32; /* Don't list this delegate */

    signature: u64;

    previous:  *_DelegateInfo;
    next:      *_DelegateInfo;
}

/*
Delegate structure definitions.
*/
DelegateInfo :: _DelegateInfo;

/*
Magick delegate methods.
*/
GetDelegateCommand :: (image_info: *ImageInfo, image: *Image, decode: *u8, encode: *u8, exception: *ExceptionInfo) -> *u8 #foreign libgraphicsmagick;

GetDelegateInfo :: (decode: *u8, encode: *u8, exception: *ExceptionInfo) -> *DelegateInfo #foreign libgraphicsmagick;

GetPostscriptDelegateInfo :: (image_info: *ImageInfo, antialias: *u32, exception: *ExceptionInfo) -> *DelegateInfo #foreign libgraphicsmagick;

SetDelegateInfo :: (unknown0: *DelegateInfo) -> *DelegateInfo #foreign libgraphicsmagick;

InvokePostscriptDelegate :: (verbose: u32, command: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

InvokeDelegate :: (image_info: *ImageInfo, image: *Image, decode: *u8, encode: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ListDelegateInfo :: (file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

PopImagePixels :: (unknown0: *Image, unknown1: QuantumType, unknown2: *u8) -> u32 #foreign libgraphicsmagick;

PushImagePixels :: (unknown0: *Image, unknown1: QuantumType, unknown2: *u8) -> u32 #foreign libgraphicsmagick;

AcquireMemory :: (unknown0: u64) -> *void #foreign libgraphicsmagick;

CloneMemory :: (unknown0: *void, unknown1: *void, unknown2: u64) -> *void #foreign libgraphicsmagick;

LiberateMemory :: (unknown0: **void) -> void #foreign libgraphicsmagick;

ReacquireMemory :: (unknown0: **void, unknown1: u64) -> void #foreign libgraphicsmagick;

AcquireCacheView :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

GetCacheView :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64) -> *PixelPacket #foreign libgraphicsmagick;

SetCacheView :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64) -> *PixelPacket #foreign libgraphicsmagick;

SyncCacheView :: (view: *ViewInfo) -> u32 #foreign libgraphicsmagick;

DescribeImage :: (image: *Image, file: *FILE, verbose: u32) -> u32 #foreign libgraphicsmagick;

/*
Enum declarations.
*/
StretchType :: enum u32 {
    NormalStretch         :: 0;
    UltraCondensedStretch :: 1;
    ExtraCondensedStretch :: 2;
    CondensedStretch      :: 3;
    SemiCondensedStretch  :: 4;
    SemiExpandedStretch   :: 5;
    ExpandedStretch       :: 6;
    ExtraExpandedStretch  :: 7;
    UltraExpandedStretch  :: 8;
    AnyStretch            :: 9;
}

StyleType :: enum u32 {
    NormalStyle  :: 0;
    ItalicStyle  :: 1;
    ObliqueStyle :: 2;
    AnyStyle     :: 3;
}

/*
Typedef declarations.
*/
_TypeInfo :: struct {
    path:        *u8;
    name:        *u8;
    description: *u8;
    family:      *u8;

    style:       StyleType;

    stretch:     StretchType;

    weight:      u64;

    encoding:    *u8;
    foundry:     *u8;
    format:      *u8;
    metrics:     *u8;
    glyphs:      *u8;

    stealth:     u32;

    signature:   u64;

    previous:    *_TypeInfo;
    next:        *_TypeInfo;
}

/*
Typedef declarations.
*/
TypeInfo :: _TypeInfo;

/*
Method declarations.
*/
GetTypeList :: (unknown0: *u8, unknown1: *u64) -> **u8 #foreign libgraphicsmagick;

ListTypeInfo :: (unknown0: *FILE, unknown1: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

GetTypeInfo :: (unknown0: *u8, unknown1: *ExceptionInfo) -> *TypeInfo #foreign libgraphicsmagick;
GetTypeInfoByFamily :: (unknown0: *u8, unknown1: StyleType, unknown2: StretchType, unknown3: u64, unknown4: *ExceptionInfo) -> *TypeInfo #foreign libgraphicsmagick;

/*
Enum declarations.
*/
AlignType :: enum u32 {
    UndefinedAlign :: 0;
    LeftAlign      :: 1;
    CenterAlign    :: 2;
    RightAlign     :: 3;
}

ClipPathUnits :: enum u32 {
    UserSpace         :: 0;
    UserSpaceOnUse    :: 1;
    ObjectBoundingBox :: 2;
}

DecorationType :: enum u32 {
    NoDecoration          :: 0;
    UnderlineDecoration   :: 1;
    OverlineDecoration    :: 2;
    LineThroughDecoration :: 3;
}

FillRule :: enum u32 {
    UndefinedRule :: 0;

    EvenOddRule   :: 1;
    NonZeroRule   :: 2;
}

GradientType :: enum u32 {
    UndefinedGradient :: 0;
    LinearGradient    :: 1;
    RadialGradient    :: 2;
}

LineCap :: enum u32 {
    UndefinedCap :: 0;
    ButtCap      :: 1;
    RoundCap     :: 2;
    SquareCap    :: 3;
}

LineJoin :: enum u32 {
    UndefinedJoin :: 0;
    MiterJoin     :: 1;
    RoundJoin     :: 2;
    BevelJoin     :: 3;
}

PaintMethod :: enum u32 {
    PointMethod        :: 0;
    ReplaceMethod      :: 1;
    FloodfillMethod    :: 2;
    FillToBorderMethod :: 3;
    ResetMethod        :: 4;
}

PrimitiveType :: enum u32 {
    UndefinedPrimitive      :: 0;
    PointPrimitive          :: 1;
    LinePrimitive           :: 2;
    RectanglePrimitive      :: 3;
    RoundRectanglePrimitive :: 4;
    ArcPrimitive            :: 5;
    EllipsePrimitive        :: 6;
    CirclePrimitive         :: 7;
    PolylinePrimitive       :: 8;
    PolygonPrimitive        :: 9;
    BezierPrimitive         :: 10;
    ColorPrimitive          :: 11;
    MattePrimitive          :: 12;
    TextPrimitive           :: 13;
    ImagePrimitive          :: 14;
    PathPrimitive           :: 15;
}

ReferenceType :: enum u32 {
    UndefinedReference :: 0;
    GradientReference  :: 1;
}

SpreadMethod :: enum u32 {
    UndefinedSpread :: 0;
    PadSpread       :: 1;
    ReflectSpead    :: 2;
    RepeatSpread    :: 3;
}

/*
Typedef declarations.
*/
_GradientInfo :: struct {
    type:      GradientType;

    color:     PixelPacket;

    stop:      SegmentInfo;

    length:    u64;

    spread:    SpreadMethod;

    signature: u64;

    previous:  *_GradientInfo;
    next:      *_GradientInfo;
}

/*
Typedef declarations.
*/
GradientInfo :: _GradientInfo;

_ElementReference :: struct {
    id:        *u8;

    type:      ReferenceType;

    gradient:  GradientInfo;

    signature: u64;

    previous:  *_ElementReference;
    next:      *_ElementReference;
}

ElementReference :: _ElementReference;

_DrawInfoExtra :: struct {}

_DrawInfo :: struct {
    primitive:         *u8;
    geometry:          *u8;

    affine:            AffineMatrix;

    gravity:           GravityType;

    fill:              PixelPacket;
    stroke:            PixelPacket;

    stroke_width:      float64;

    gradient:          GradientInfo;

    fill_pattern:      *Image;
    tile:              *Image;
    stroke_pattern:    *Image;

    stroke_antialias:  u32;
    text_antialias:    u32;

    fill_rule:         FillRule;

    linecap:           LineCap;

    linejoin:          LineJoin;

    miterlimit:        u64;

    dash_offset:       float64;

    decorate:          DecorationType;

    compose:           CompositeOperator;

    text:              *u8;
    font:              *u8;
    family:            *u8;

    style:             StyleType;

    stretch:           StretchType;

    weight:            u64;

    encoding:          *u8;

    pointsize:         float64;

    density:           *u8;

    align:             AlignType;

    undercolor:        PixelPacket;
    border_color:      PixelPacket;

    server_name:       *u8;

    dash_pattern:      *float64; /* Terminated by value 0.0 (i.e. < MagickEpsilon)*/

    /*
    Allow for expansion of DrawInfo without increasing its size.  The
    internals are defined only in render.c.  Clients outside of render.c
    can access the internals via the provided access functions (see below).
    
    This location in DrawInfo used to be occupied by char *clip_path. The
    clip_path member now lives in _DrawInfoExtra.
    */
    extra:             *_DrawInfoExtra;

    bounds:            SegmentInfo;

    clip_units:        ClipPathUnits;

    opacity:           Quantum;

    render:            u32;

    flags:             u32; /* previously "unused1" */

    element_reference: ElementReference;

    signature:         u64;
}

DrawInfo :: _DrawInfo;

_PointInfo :: struct {
    x: float64;
    y: float64;
}

PointInfo :: _PointInfo;

_TypeMetric :: struct {
    pixels_per_em:       PointInfo;

    ascent:              float64;
    descent:             float64;
    width:               float64;
    height:              float64;
    max_advance:         float64;

    bounds:              SegmentInfo;

    underline_position:  float64;
    underline_thickness: float64;
}

TypeMetric :: _TypeMetric;

/*
Method declarations.
*/
CloneDrawInfo :: (unknown0: *ImageInfo, unknown1: *DrawInfo) -> *DrawInfo #foreign libgraphicsmagick;

AnnotateImage :: (unknown0: *Image, unknown1: *DrawInfo) -> u32 #foreign libgraphicsmagick;
DrawAffineImage :: (unknown0: *Image, unknown1: *Image, unknown2: *AffineMatrix) -> u32 #foreign libgraphicsmagick;
DrawClipPath :: (unknown0: *Image, unknown1: *DrawInfo, unknown2: *u8) -> u32 #foreign libgraphicsmagick;
DrawImage :: (unknown0: *Image, unknown1: *DrawInfo) -> u32 #foreign libgraphicsmagick;
DrawPatternPath :: (unknown0: *Image, unknown1: *DrawInfo, unknown2: *u8, unknown3: **Image) -> u32 #foreign libgraphicsmagick;
GetTypeMetrics :: (unknown0: *Image, unknown1: *DrawInfo, unknown2: *TypeMetric) -> u32 #foreign libgraphicsmagick;

DestroyDrawInfo :: (unknown0: *DrawInfo) -> void #foreign libgraphicsmagick;
GetDrawInfo :: (unknown0: *ImageInfo, unknown1: *DrawInfo) -> void #foreign libgraphicsmagick;

/* provide public access to the clip_path member of DrawInfo */
DrawInfoGetClipPath :: (unknown0: *DrawInfo) -> **u8 #foreign libgraphicsmagick;

/* provide public access to the composite_path member of DrawInfo */
DrawInfoGetCompositePath :: (unknown0: *DrawInfo) -> **u8 #foreign libgraphicsmagick;

_DrawContext :: struct {}
DrawContext :: *_DrawContext;

DrawGetClipUnits :: (_context: DrawContext) -> ClipPathUnits #foreign libgraphicsmagick;

DrawPeekGraphicContext :: (_context: DrawContext) -> *DrawInfo #foreign libgraphicsmagick;

DrawGetTextDecoration :: (_context: DrawContext) -> DecorationType #foreign libgraphicsmagick;

DrawAllocateContext :: (draw_info: *DrawInfo, image: *Image) -> DrawContext #foreign libgraphicsmagick;

DrawGetClipRule :: (_context: DrawContext) -> FillRule #foreign libgraphicsmagick;
DrawGetFillRule :: (_context: DrawContext) -> FillRule #foreign libgraphicsmagick;

DrawGetGravity :: (_context: DrawContext) -> GravityType #foreign libgraphicsmagick;

DrawGetStrokeLineCap :: (_context: DrawContext) -> LineCap #foreign libgraphicsmagick;

DrawGetStrokeLineJoin :: (_context: DrawContext) -> LineJoin #foreign libgraphicsmagick;

DrawGetFillColor :: (_context: DrawContext) -> PixelPacket #foreign libgraphicsmagick;
DrawGetStrokeColor :: (_context: DrawContext) -> PixelPacket #foreign libgraphicsmagick;
DrawGetTextUnderColor :: (_context: DrawContext) -> PixelPacket #foreign libgraphicsmagick;

DrawGetFontStretch :: (_context: DrawContext) -> StretchType #foreign libgraphicsmagick;

DrawGetFontStyle :: (_context: DrawContext) -> StyleType #foreign libgraphicsmagick;

DrawGetClipPath :: (_context: DrawContext) -> *u8 #foreign libgraphicsmagick;
DrawGetFont :: (_context: DrawContext) -> *u8 #foreign libgraphicsmagick;
DrawGetFontFamily :: (_context: DrawContext) -> *u8 #foreign libgraphicsmagick;
DrawGetTextEncoding :: (_context: DrawContext) -> *u8 #foreign libgraphicsmagick;

DrawRender :: (_context: DrawContext) -> s32 #foreign libgraphicsmagick;

DrawGetStrokeAntialias :: (_context: DrawContext) -> u32 #foreign libgraphicsmagick;
DrawGetTextAntialias :: (_context: DrawContext) -> u32 #foreign libgraphicsmagick;

DrawGetFontWeight :: (_context: DrawContext) -> u64 #foreign libgraphicsmagick;
DrawGetStrokeMiterLimit :: (_context: DrawContext) -> u64 #foreign libgraphicsmagick;

DrawGetFillOpacity :: (_context: DrawContext) -> float64 #foreign libgraphicsmagick;
DrawGetFontSize :: (_context: DrawContext) -> float64 #foreign libgraphicsmagick;
DrawGetStrokeDashArray :: (_context: DrawContext, num_elems: *u64) -> *float64 #foreign libgraphicsmagick;
DrawGetStrokeDashOffset :: (_context: DrawContext) -> float64 #foreign libgraphicsmagick;
DrawGetStrokeOpacity :: (_context: DrawContext) -> float64 #foreign libgraphicsmagick;
DrawGetStrokeWidth :: (_context: DrawContext) -> float64 #foreign libgraphicsmagick;

DrawAffine :: (_context: DrawContext, affine: *AffineMatrix) -> void #foreign libgraphicsmagick;
DrawAnnotation :: (_context: DrawContext, x: float64, y: float64, text: *u8) -> void #foreign libgraphicsmagick;

DrawArc :: (_context: DrawContext, sx: float64, sy: float64, ex: float64, ey: float64, sd: float64, ed: float64) -> void #foreign libgraphicsmagick;

DrawBezier :: (_context: DrawContext, num_coords: u64, coordinates: *PointInfo) -> void #foreign libgraphicsmagick;

DrawCircle :: (_context: DrawContext, ox: float64, oy: float64, px: float64, py: float64) -> void #foreign libgraphicsmagick;

DrawColor :: (_context: DrawContext, x: float64, y: float64, paintMethod: PaintMethod) -> void #foreign libgraphicsmagick;

DrawComment :: (_context: DrawContext, comment: *u8) -> void #foreign libgraphicsmagick;
DrawDestroyContext :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawEllipse :: (_context: DrawContext, ox: float64, oy: float64, rx: float64, ry: float64, start: float64, end: float64) -> void #foreign libgraphicsmagick;

DrawComposite :: (_context: DrawContext, composite_operator: CompositeOperator, x: float64, y: float64, width: float64, height: float64, image: *Image) -> void #foreign libgraphicsmagick;

DrawLine :: (_context: DrawContext, sx: float64, sy: float64, ex: float64, ey: float64) -> void #foreign libgraphicsmagick;

DrawMatte :: (_context: DrawContext, x: float64, y: float64, paint_method: PaintMethod) -> void #foreign libgraphicsmagick;

DrawPathClose :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPathCurveToAbsolute :: (_context: DrawContext, x1: float64, y1: float64, x2: float64, y2: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToRelative :: (_context: DrawContext, x1: float64, y1: float64, x2: float64, y2: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToQuadraticBezierAbsolute :: (_context: DrawContext, x1: float64, y1: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToQuadraticBezierRelative :: (_context: DrawContext, x1: float64, y1: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToQuadraticBezierSmoothAbsolute :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToQuadraticBezierSmoothRelative :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToSmoothAbsolute :: (_context: DrawContext, x2: float64, y2: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathCurveToSmoothRelative :: (_context: DrawContext, x2: float64, y2: float64, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathEllipticArcAbsolute :: (_context: DrawContext, rx: float64, ry: float64, x_axis_rotation: float64, large_arc_flag: u32, sweep_flag: u32, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathEllipticArcRelative :: (_context: DrawContext, rx: float64, ry: float64, x_axis_rotation: float64, large_arc_flag: u32, sweep_flag: u32, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathFinish :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPathLineToAbsolute :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathLineToRelative :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathLineToHorizontalAbsolute :: (_context: DrawContext, x: float64) -> void #foreign libgraphicsmagick;
DrawPathLineToHorizontalRelative :: (_context: DrawContext, x: float64) -> void #foreign libgraphicsmagick;
DrawPathLineToVerticalAbsolute :: (_context: DrawContext, y: float64) -> void #foreign libgraphicsmagick;
DrawPathLineToVerticalRelative :: (_context: DrawContext, y: float64) -> void #foreign libgraphicsmagick;
DrawPathMoveToAbsolute :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathMoveToRelative :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

DrawPathStart :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPoint :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;
DrawPolygon :: (_context: DrawContext, num_coords: u64, coordinates: *PointInfo) -> void #foreign libgraphicsmagick;

DrawPolyline :: (_context: DrawContext, num_coords: u64, coordinates: *PointInfo) -> void #foreign libgraphicsmagick;

DrawPopClipPath :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPopDefs :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPopGraphicContext :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPopPattern :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPushClipPath :: (_context: DrawContext, clip_path_id: *u8) -> void #foreign libgraphicsmagick;
DrawPushDefs :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPushGraphicContext :: (_context: DrawContext) -> void #foreign libgraphicsmagick;
DrawPushPattern :: (_context: DrawContext, pattern_id: *u8, x: float64, y: float64, width: float64, height: float64) -> void #foreign libgraphicsmagick;

DrawRectangle :: (_context: DrawContext, x1: float64, y1: float64, x2: float64, y2: float64) -> void #foreign libgraphicsmagick;

DrawRoundRectangle :: (_context: DrawContext, x1: float64, y1: float64, x2: float64, y2: float64, rx: float64, ry: float64) -> void #foreign libgraphicsmagick;

DrawScale :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;
DrawSetClipPath :: (_context: DrawContext, clip_path: *u8) -> void #foreign libgraphicsmagick;
DrawSetClipRule :: (_context: DrawContext, fill_rule: FillRule) -> void #foreign libgraphicsmagick;
DrawSetClipUnits :: (_context: DrawContext, clip_units: ClipPathUnits) -> void #foreign libgraphicsmagick;
DrawSetFillColor :: (_context: DrawContext, fill_color: *PixelPacket) -> void #foreign libgraphicsmagick;
DrawSetFillColorString :: (_context: DrawContext, fill_color: *u8) -> void #foreign libgraphicsmagick;
DrawSetFillOpacity :: (_context: DrawContext, fill_opacity: float64) -> void #foreign libgraphicsmagick;
DrawSetFillRule :: (_context: DrawContext, fill_rule: FillRule) -> void #foreign libgraphicsmagick;
DrawSetFillPatternURL :: (_context: DrawContext, fill_url: *u8) -> void #foreign libgraphicsmagick;
DrawSetFont :: (_context: DrawContext, font_name: *u8) -> void #foreign libgraphicsmagick;
DrawSetFontFamily :: (_context: DrawContext, font_family: *u8) -> void #foreign libgraphicsmagick;
DrawSetFontSize :: (_context: DrawContext, font_pointsize: float64) -> void #foreign libgraphicsmagick;
DrawSetFontStretch :: (_context: DrawContext, font_stretch: StretchType) -> void #foreign libgraphicsmagick;
DrawSetFontStyle :: (_context: DrawContext, font_style: StyleType) -> void #foreign libgraphicsmagick;
DrawSetFontWeight :: (_context: DrawContext, font_weight: u64) -> void #foreign libgraphicsmagick;
DrawSetGravity :: (_context: DrawContext, gravity: GravityType) -> void #foreign libgraphicsmagick;
DrawRotate :: (_context: DrawContext, degrees: float64) -> void #foreign libgraphicsmagick;
DrawSkewX :: (_context: DrawContext, degrees: float64) -> void #foreign libgraphicsmagick;
DrawSkewY :: (_context: DrawContext, degrees: float64) -> void #foreign libgraphicsmagick;

/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeAntialias :: (_context: DrawContext, true_false: u32) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeColor :: (_context: DrawContext, stroke_color: *PixelPacket) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeColorString :: (_context: DrawContext, stroke_color: *u8) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeDashArray :: (_context: DrawContext, num_elems: u64, dasharray: *float64) -> void #foreign libgraphicsmagick;

/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeDashOffset :: (_context: DrawContext, dashoffset: float64) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeLineCap :: (_context: DrawContext, linecap: LineCap) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeLineJoin :: (_context: DrawContext, linejoin: LineJoin) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeMiterLimit :: (_context: DrawContext, miterlimit: u64) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeOpacity :: (_context: DrawContext, opacity: float64) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokePatternURL :: (_context: DrawContext, stroke_url: *u8) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetStrokeWidth :: (_context: DrawContext, width: float64) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetTextAntialias :: (_context: DrawContext, true_false: u32) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetTextDecoration :: (_context: DrawContext, decoration: DecorationType) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetTextEncoding :: (_context: DrawContext, encoding: *u8) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetTextUnderColor :: (_context: DrawContext, color: *PixelPacket) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetTextUnderColorString :: (_context: DrawContext, under_color: *u8) -> void #foreign libgraphicsmagick;
/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawSetViewbox :: (_context: DrawContext, x1: u64, y1: u64, x2: u64, y2: u64) -> void #foreign libgraphicsmagick;

/*
DrawSetStopColor(DrawContext context, const PixelPacket * color,
const double offset),
*/
DrawTranslate :: (_context: DrawContext, x: float64, y: float64) -> void #foreign libgraphicsmagick;

AdaptiveThresholdImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: float64, unknown4: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

AddNoiseImage :: (unknown0: *Image, unknown1: NoiseType, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
AddNoiseImageChannel :: (image: *Image, channel: ChannelType, noise_type: NoiseType, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

BlurImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
BlurImageChannel :: (image: *Image, channel: ChannelType, radius: float64, sigma: float64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ConvolveImage :: (unknown0: *Image, unknown1: u32, unknown2: *float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

DespeckleImage :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
EdgeImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
EmbossImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
EnhanceImage :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
GaussianBlurImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
GaussianBlurImageChannel :: (image: *Image, channel: ChannelType, radius: float64, sigma: float64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

MedianFilterImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
MotionBlurImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ReduceNoiseImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ShadeImage :: (unknown0: *Image, unknown1: u32, unknown2: float64, unknown3: float64, unknown4: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
SharpenImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
SharpenImageChannel :: (image: *Image, channel: ChannelType, radius: float64, sigma: float64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

SpreadImage :: (unknown0: *Image, unknown1: u32, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
UnsharpMaskImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

UnsharpMaskImageChannel :: (image: *Image, channel: ChannelType, radius: float64, sigma: float64, amount: float64, threshold: float64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

BlackThresholdImage :: (image: *Image, thresholds: *u8) -> u32 #foreign libgraphicsmagick;
ChannelThresholdImage :: (unknown0: *Image, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
RandomChannelThresholdImage :: (unknown0: *Image, unknown1: *u8, unknown2: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

ThresholdImage :: (unknown0: *Image, unknown1: float64) -> u32 #foreign libgraphicsmagick;
WhiteThresholdImage :: (image: *Image, thresholds: *u8) -> u32 #foreign libgraphicsmagick;

ContrastImage :: (unknown0: *Image, unknown1: u32) -> u32 #foreign libgraphicsmagick;
EqualizeImage :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;
GammaImage :: (unknown0: *Image, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
LevelImage :: (unknown0: *Image, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
LevelImageChannel :: (unknown0: *Image, unknown1: ChannelType, unknown2: float64, unknown3: float64, unknown4: float64) -> u32 #foreign libgraphicsmagick;

ModulateImage :: (unknown0: *Image, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
NegateImage :: (unknown0: *Image, unknown1: u32) -> u32 #foreign libgraphicsmagick;
NormalizeImage :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;

/*
Include declarations.
*/
QuantumOperator :: enum u32 {
    UndefinedQuantumOp            :: 0;
    AddQuantumOp                  :: 1;
    AndQuantumOp                  :: 2;
    AssignQuantumOp               :: 3;
    DivideQuantumOp               :: 4;
    LShiftQuantumOp               :: 5;
    MultiplyQuantumOp             :: 6;
    OrQuantumOp                   :: 7;
    RShiftQuantumOp               :: 8;
    SubtractQuantumOp             :: 9;
    ThresholdQuantumOp            :: 10;
    ThresholdBlackQuantumOp       :: 11;
    ThresholdWhiteQuantumOp       :: 12;
    XorQuantumOp                  :: 13;
    NoiseGaussianQuantumOp        :: 14;
    NoiseImpulseQuantumOp         :: 15;
    NoiseLaplacianQuantumOp       :: 16;
    NoiseMultiplicativeQuantumOp  :: 17;
    NoisePoissonQuantumOp         :: 18;
    NoiseUniformQuantumOp         :: 19;
    NegateQuantumOp               :: 20;
    GammaQuantumOp                :: 21;
    DepthQuantumOp                :: 22;

    LogQuantumOp                  :: 23;
    MaxQuantumOp                  :: 24;
    MinQuantumOp                  :: 25;
    PowQuantumOp                  :: 26;

    NoiseRandomQuantumOp          :: 27;

    ThresholdBlackNegateQuantumOp :: 28;
    ThresholdWhiteNegateQuantumOp :: 29;
}

QuantumOperatorImage :: (image: *Image, channel: ChannelType, quantum_operator: QuantumOperator, rvalue: float64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

QuantumOperatorImageMultivalue :: (image: *Image, quantum_operator: QuantumOperator, values: *u8) -> u32 #foreign libgraphicsmagick;

QuantumOperatorRegionImage :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64, channel: ChannelType, quantum_operator: QuantumOperator, rvalue: float64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Enum declaractions.
*/
VirtualPixelMethod :: enum u32 {
    UndefinedVirtualPixelMethod :: 0;
    ConstantVirtualPixelMethod  :: 1;
    EdgeVirtualPixelMethod      :: 2;
    MirrorVirtualPixelMethod    :: 3;
    TileVirtualPixelMethod      :: 4;
}

/*
Typedef declaractions.
*/
Cache :: _CacheInfoPtr_;

/*
Read only access to a rectangular pixel region.
*/
AcquireImagePixels :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
AccessImmutableIndexes() returns the read-only indexes
associated with a rectangular pixel region already selected via
AcquireImagePixels().
*/
AccessImmutableIndexes :: (image: *Image) -> *IndexPacket #foreign libgraphicsmagick;

/*
Return one DirectClass pixel at the the specified (x,y) location.
Similar function as GetOnePixel().  Note that the value returned
by GetIndexes() may or may not be influenced by this function.
*/
AcquireOnePixel :: (image: *Image, x: s64, y: s64, exception: *ExceptionInfo) -> PixelPacket #foreign libgraphicsmagick;

/*
GetImagePixels() and GetImagePixelsEx() obtains a pixel region for
read/write access.
*/
GetImagePixels :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64) -> *PixelPacket #foreign libgraphicsmagick;

GetImagePixelsEx :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
GetImageVirtualPixelMethod() gets the "virtual pixels" method for
the image.
*/
GetImageVirtualPixelMethod :: (image: *Image) -> VirtualPixelMethod #foreign libgraphicsmagick;

/*
GetPixels() and AccessMutablePixels() return the pixels associated
with the last call to SetImagePixels() or GetImagePixels().
*/
GetPixels :: (image: *Image) -> *PixelPacket #foreign libgraphicsmagick;

AccessMutablePixels :: (image: *Image) -> *PixelPacket #foreign libgraphicsmagick;

/*
GetIndexes() and AccessMutableIndexes() return the colormap
indexes associated with the last call to SetImagePixels() or
GetImagePixels().
*/
GetIndexes :: (image: *Image) -> *IndexPacket #foreign libgraphicsmagick;

AccessMutableIndexes :: (image: *Image) -> *IndexPacket #foreign libgraphicsmagick;

/*
GetOnePixel() returns a single DirectClass pixel at the specified
(x,y) location.  Similar to AcquireOnePixel().  It is preferred to
use AcquireOnePixel() since it allows reporting to a specified
exception structure. Note that the value returned by GetIndexes()
is not reliably influenced by this function.
*/
GetOnePixel :: (image: *Image, x: s64, y: s64) -> PixelPacket #foreign libgraphicsmagick;

/*
GetPixelCacheArea() returns the area (width * height in pixels)
consumed by the current pixel cache.
*/
GetPixelCacheArea :: (image: *Image) -> magick_off_t #foreign libgraphicsmagick;

/*
SetImagePixels() and SetImagePixelsEx() initialize a pixel region
for write-only access.
*/
SetImagePixels :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64) -> *PixelPacket #foreign libgraphicsmagick;

SetImagePixelsEx :: (image: *Image, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
SetImageVirtualPixelMethod() sets the "virtual pixels" method for
the image.
*/
SetImageVirtualPixelMethod :: (image: *Image, method: VirtualPixelMethod) -> u32 #foreign libgraphicsmagick;

/*
SyncImagePixels() and SyncImagePixelsEx() save the image pixels to
the in-memory or disk cache.
*/
SyncImagePixels :: (image: *Image) -> u32 #foreign libgraphicsmagick;

SyncImagePixelsEx :: (image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
OpenCacheView() opens a cache view.
*/
OpenCacheView :: (image: *Image) -> *ViewInfo #foreign libgraphicsmagick;

/*
CloseCacheView() closes a cache view.
*/
CloseCacheView :: (view: *ViewInfo) -> void #foreign libgraphicsmagick;

/*
AccessCacheViewPixels() returns the pixels associated with the
last request to select a view pixel region
(i.e. AcquireCacheViewPixels() or GetCacheViewPixels()).
*/
AccessCacheViewPixels :: (view: *ViewInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
AcquireCacheViewIndexes() returns read-only indexes associated
with a cache view.
*/
AcquireCacheViewIndexes :: (view: *ViewInfo) -> *IndexPacket #foreign libgraphicsmagick;

/*
AcquireCacheViewPixels() obtains a pixel region from a cache view
for read-only access.
*/
AcquireCacheViewPixels :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
AcquireOneCacheViewPixel() returns one DirectClass pixel from a
cache view. Note that the value returned by GetCacheViewIndexes()
is not reliably influenced by this function.
*/
AcquireOneCacheViewPixel :: (view: *ViewInfo, pixel: *PixelPacket, x: s64, y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
GetCacheViewArea() returns the area (width * height in pixels)
currently consumed by the pixel cache view.
*/
GetCacheViewArea :: (view: *ViewInfo) -> magick_off_t #foreign libgraphicsmagick;

/*
GetCacheViewImage() obtains the image used to allocate the cache view.
*/
GetCacheViewImage :: (view: *ViewInfo) -> *Image #foreign libgraphicsmagick;

/*
GetCacheViewIndexes() returns the indexes associated with a cache view.
*/
GetCacheViewIndexes :: (view: *ViewInfo) -> *IndexPacket #foreign libgraphicsmagick;

/*
GetCacheViewPixels() obtains a pixel region from a cache view for
read/write access.
*/
GetCacheViewPixels :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
Obtain the offset and size of the selected region.
*/
GetCacheViewRegion :: (view: *ViewInfo) -> RectangleInfo #foreign libgraphicsmagick;

/*
SetCacheViewPixels() gets blank writeable pixels from the pixel
cache view.
*/
SetCacheViewPixels :: (view: *ViewInfo, x: s64, y: s64, columns: u64, rows: u64, exception: *ExceptionInfo) -> *PixelPacket #foreign libgraphicsmagick;

/*
SyncCacheViewPixels() saves any changes to the pixel cache view.
*/
SyncCacheViewPixels :: (view: *ViewInfo, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Typedef declarations.
*/
ResourceType :: enum u32 {
    UndefinedResource :: 0;
    DiskResource      :: 1;
    FileResource      :: 2;
    MapResource       :: 3;
    MemoryResource    :: 4;
    PixelsResource    :: 5;
    ThreadsResource   :: 6;
    WidthResource     :: 7;
    HeightResource    :: 8;
    ReadResource      :: 9;
}

/*
Method declarations.
*/
AcquireMagickResource :: (type: ResourceType, size: magick_uint64_t) -> u32 #foreign libgraphicsmagick;
/*
Method declarations.
*/
ListMagickResourceInfo :: (file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
/*
Method declarations.
*/
SetMagickResourceLimit :: (type: ResourceType, limit: magick_int64_t) -> u32 #foreign libgraphicsmagick;

GetMagickResource :: (type: ResourceType) -> magick_int64_t #foreign libgraphicsmagick;
GetMagickResourceLimit :: (type: ResourceType) -> magick_int64_t #foreign libgraphicsmagick;

DestroyMagickResources :: () -> void #foreign libgraphicsmagick;
InitializeMagickResources :: () -> void #foreign libgraphicsmagick;
LiberateMagickResource :: (type: ResourceType, size: magick_uint64_t) -> void #foreign libgraphicsmagick;

StringToChannelType :: (option: *u8) -> ChannelType #foreign libgraphicsmagick;
StringToColorspaceType :: (colorspace_string: *u8) -> ColorspaceType #foreign libgraphicsmagick;
StringToCompositeOperator :: (option: *u8) -> CompositeOperator #foreign libgraphicsmagick;
StringToCompressionType :: (option: *u8) -> CompressionType #foreign libgraphicsmagick;
StringToDisposeType :: (option: *u8) -> DisposeType #foreign libgraphicsmagick;
StringToEndianType :: (option: *u8) -> EndianType #foreign libgraphicsmagick;
StringToFilterTypes :: (option: *u8) -> FilterTypes #foreign libgraphicsmagick;
StringToGravityType :: (option: *u8) -> GravityType #foreign libgraphicsmagick;
StringToHighlightStyle :: (option: *u8) -> HighlightStyle #foreign libgraphicsmagick;
StringToImageType :: (option: *u8) -> ImageType #foreign libgraphicsmagick;
StringToInterlaceType :: (option: *u8) -> InterlaceType #foreign libgraphicsmagick;
StringToMetricType :: (option: *u8) -> MetricType #foreign libgraphicsmagick;
StringToNoiseType :: (option: *u8) -> NoiseType #foreign libgraphicsmagick;
StringToOrientationType :: (option: *u8) -> OrientationType #foreign libgraphicsmagick;
StringToPreviewType :: (option: *u8) -> PreviewType #foreign libgraphicsmagick;
StringToResolutionType :: (option: *u8) -> ResolutionType #foreign libgraphicsmagick;
StringToQuantumOperator :: (option: *u8) -> QuantumOperator #foreign libgraphicsmagick;
StringToResourceType :: (option: *u8) -> ResourceType #foreign libgraphicsmagick;
StringToVirtualPixelMethod :: (option: *u8) -> VirtualPixelMethod #foreign libgraphicsmagick;
BlobModeToString :: (blob_mode: BlobMode) -> *u8 #foreign libgraphicsmagick;
ChannelTypeToString :: (channel: ChannelType) -> *u8 #foreign libgraphicsmagick;
ClassTypeToString :: (class_type: ClassType) -> *u8 #foreign libgraphicsmagick;
ColorspaceTypeToString :: (colorspace: ColorspaceType) -> *u8 #foreign libgraphicsmagick;
CompositeOperatorToString :: (composite_op: CompositeOperator) -> *u8 #foreign libgraphicsmagick;
CompressionTypeToString :: (compression_type: CompressionType) -> *u8 #foreign libgraphicsmagick;
ConfirmAccessModeToString :: (access_mode: ConfirmAccessMode) -> *u8 #foreign libgraphicsmagick;
DisposeTypeToString :: (dispose_type: DisposeType) -> *u8 #foreign libgraphicsmagick;
GravityTypeToString :: (gravity_type: GravityType) -> *u8 #foreign libgraphicsmagick;
EndianTypeToString :: (endian_type: EndianType) -> *u8 #foreign libgraphicsmagick;
HighlightStyleToString :: (difference_algorithm: HighlightStyle) -> *u8 #foreign libgraphicsmagick;
ImageTypeToString :: (image_type: ImageType) -> *u8 #foreign libgraphicsmagick;
InterlaceTypeToString :: (interlace_type: InterlaceType) -> *u8 #foreign libgraphicsmagick;
MapModeToString :: (map_mode: MapMode) -> *u8 #foreign libgraphicsmagick;
MetricTypeToString :: (metric: MetricType) -> *u8 #foreign libgraphicsmagick;
NoiseTypeToString :: (noise_type: NoiseType) -> *u8 #foreign libgraphicsmagick;
OrientationTypeToString :: (orientation_type: OrientationType) -> *u8 #foreign libgraphicsmagick;
QuantumOperatorToString :: (quantum_operator: QuantumOperator) -> *u8 #foreign libgraphicsmagick;

ResizeFilterToString :: (filter: FilterTypes) -> *u8 #foreign libgraphicsmagick;
ResolutionTypeToString :: (resolution_type: ResolutionType) -> *u8 #foreign libgraphicsmagick;

StretchTypeToString :: (stretch: StretchType) -> *u8 #foreign libgraphicsmagick;
StyleTypeToString :: (style: StyleType) -> *u8 #foreign libgraphicsmagick;

CharcoalImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ColorizeImage :: (unknown0: *Image, unknown1: *u8, unknown2: PixelPacket, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ImplodeImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
MorphImages :: (unknown0: *Image, unknown1: u64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
OilPaintImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
SteganoImage :: (unknown0: *Image, unknown1: *Image, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
StereoImage :: (unknown0: *Image, unknown1: *Image, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
SwirlImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
WaveImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ColorMatrixImage :: (image: *Image, order: u32, matrix: *float64) -> u32 #foreign libgraphicsmagick;
SolarizeImage :: (unknown0: *Image, unknown1: float64) -> u32 #foreign libgraphicsmagick;

_MagickRandomKernel :: struct {
    z: magick_uint32_t;
    w: magick_uint32_t;
}

MagickRandomKernel :: _MagickRandomKernel;

/*
Generate a random integer value (0 - MAGICK_RANDOM_MAX)
*/
MagickRandomInteger :: () -> magick_uint32_t #foreign libgraphicsmagick;

/*
Generate a random double value (0.0 - 1.0)
*/
MagickRandomReal :: () -> float64 #foreign libgraphicsmagick;

/*
Graphic gems define declarations.
*/
ExpandAffine :: (unknown0: *AffineMatrix) -> float64 #foreign libgraphicsmagick;
/*
Graphic gems define declarations.
*/
GenerateDifferentialNoise :: (pixel: Quantum, noise_type: NoiseType, kernel: *MagickRandomKernel) -> float64 #foreign libgraphicsmagick;

GetOptimalKernelWidth :: (unknown0: float64, unknown1: float64) -> s32 #foreign libgraphicsmagick;
GetOptimalKernelWidth1D :: (unknown0: float64, unknown1: float64) -> s32 #foreign libgraphicsmagick;
GetOptimalKernelWidth2D :: (unknown0: float64, unknown1: float64) -> s32 #foreign libgraphicsmagick;

GenerateNoise :: (unknown0: Quantum, unknown1: NoiseType) -> Quantum #foreign libgraphicsmagick;

Contrast :: (unknown0: s32, unknown1: *Quantum, unknown2: *Quantum, unknown3: *Quantum) -> void #foreign libgraphicsmagick;
HSLTransform :: (unknown0: float64, unknown1: float64, unknown2: float64, unknown3: *Quantum, unknown4: *Quantum, unknown5: *Quantum) -> void #foreign libgraphicsmagick;

HWBTransform :: (unknown0: float64, unknown1: float64, unknown2: float64, unknown3: *Quantum, unknown4: *Quantum, unknown5: *Quantum) -> void #foreign libgraphicsmagick;

Hull :: (unknown0: s64, unknown1: s64, unknown2: u64, unknown3: u64, unknown4: *Quantum, unknown5: *Quantum, unknown6: s32) -> void #foreign libgraphicsmagick;

IdentityAffine :: (unknown0: *AffineMatrix) -> void #foreign libgraphicsmagick;
Modulate :: (unknown0: float64, unknown1: float64, unknown2: float64, unknown3: *Quantum, unknown4: *Quantum, unknown5: *Quantum) -> void #foreign libgraphicsmagick;

TransformHSL :: (unknown0: Quantum, unknown1: Quantum, unknown2: Quantum, unknown3: *float64, unknown4: *float64, unknown5: *float64) -> void #foreign libgraphicsmagick;

TransformHWB :: (unknown0: Quantum, unknown1: Quantum, unknown2: Quantum, unknown3: *float64, unknown4: *float64, unknown5: *float64) -> void #foreign libgraphicsmagick;

GradientImage :: (unknown0: *Image, unknown1: *PixelPacket, unknown2: *PixelPacket) -> u32 #foreign libgraphicsmagick;

HaldClutImage :: (unknown0: *Image, clut: *Image) -> u32 #foreign libgraphicsmagick;

CloneImageList :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
GetFirstImageInList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;
GetImageFromList :: (unknown0: *Image, unknown1: s64) -> *Image #foreign libgraphicsmagick;
GetLastImageInList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;
GetNextImageInList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;
GetPreviousImageInList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;
ImageListToArray :: (unknown0: *Image, unknown1: *ExceptionInfo) -> **Image #foreign libgraphicsmagick;
NewImageList :: () -> *Image #foreign libgraphicsmagick;
RemoveLastImageFromList :: (unknown0: **Image) -> *Image #foreign libgraphicsmagick;
RemoveFirstImageFromList :: (unknown0: **Image) -> *Image #foreign libgraphicsmagick;
SplitImageList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;
SyncNextImageInList :: (unknown0: *Image) -> *Image #foreign libgraphicsmagick;

GetImageIndexInList :: (unknown0: *Image) -> s64 #foreign libgraphicsmagick;

GetImageListLength :: (unknown0: *Image) -> u64 #foreign libgraphicsmagick;

AppendImageToList :: (unknown0: **Image, unknown1: *Image) -> void #foreign libgraphicsmagick;
DeleteImageFromList :: (unknown0: **Image) -> void #foreign libgraphicsmagick;
DestroyImageList :: (unknown0: *Image) -> void #foreign libgraphicsmagick;
InsertImageInList :: (unknown0: **Image, unknown1: *Image) -> void #foreign libgraphicsmagick;
PrependImageToList :: (unknown0: **Image, unknown1: *Image) -> void #foreign libgraphicsmagick;
ReplaceImageInList :: (images: **Image, image: *Image) -> void #foreign libgraphicsmagick;
ReverseImageList :: (unknown0: **Image) -> void #foreign libgraphicsmagick;
SpliceImageIntoList :: (unknown0: **Image, unknown1: u64, unknown2: *Image) -> void #foreign libgraphicsmagick;

/*
Method declarations.
*/
GetMagickFileFormat :: (header: *u8, header_length: u64, format: *u8, format_length: u64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Method declarations.
*/
ListMagicInfo :: (file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

DecoderHandler :: #type (unknown0: *ImageInfo, unknown1: *ExceptionInfo) -> *Image #c_call;

EncoderHandler :: #type (unknown0: *ImageInfo, unknown1: *Image) -> u32 #c_call;
MagickHandler :: #type (unknown0: *u8, unknown1: u64) -> u32 #c_call;

/*
Stability and usefulness of the coder.
*/
CoderClass :: enum s32 {
    BrokenCoderClass   :: -1;

    UnstableCoderClass :: 0;

    StableCoderClass   :: 1;
    PrimaryCoderClass  :: 2;
}

/*
How the file extension should be treated (e.g. in SetImageInfo()).
*/
ExtensionTreatment :: enum u32 {
    HintExtensionTreatment   :: 0;
    ObeyExtensionTreatment   :: 1;
    IgnoreExtensionTreatment :: 2;
}

_MagickInfo :: struct {
    next:                *_MagickInfo; /* private, next member in list */
    previous:            *_MagickInfo; /* private, previous member in list */

    name:                *u8; /* format ID ("magick") */

    description:         *u8; /* format description */
    note:                *u8; /* usage note for user */
    version:             *u8; /* support library version */
    module:              *u8; /* name of loadable module */

    decoder:             DecoderHandler; /* function vector to decoding routine */

    encoder:             EncoderHandler; /* function vector to encoding routine */

    magick:              MagickHandler; /* function vector to format test routine */

    client_data:         *void; /* arbitrary user supplied data */

    adjoin:              u32; /* coder may read/write multiple frames (default True) */
    raw:                 u32; /* coder requires that size be set (default False) */
    stealth:             u32; /* coder should not appear in formats listing (default MagickFalse) */
    /* coder requires BLOB "seek" and "tell" APIs (default MagickFalse)
    *   Note that SetImageInfo() currently always copies input
    *   from a pipe, .gz, or .bz2 file, to a temporary file so
    *   that it can retrieve a bit of the file header in order to
    *   support the file header magic logic.
    */
    seekable_stream:     u32;

    blob_support:        u32; /* coder uses BLOB APIs (default True) */
    thread_support:      u32; /* coder is thread safe (default True) */

    coder_class:         CoderClass; /* Coder usefulness/stability level */

    extension_treatment: ExtensionTreatment; /* How much faith should be placed on file extension? */

    signature:           u64; /* private, structure validator */
}

MagickInfo :: _MagickInfo;

/*
Magick method declaractions.
*/
MagickToMime :: (magick: *u8) -> *u8 #foreign libgraphicsmagick;

GetImageMagick :: (magick: *u8, length: u64) -> *u8 #foreign libgraphicsmagick;

IsMagickConflict :: (magick: *u8) -> u32 #foreign libgraphicsmagick;

ListModuleMap :: (file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
ListMagickInfo :: (file: *FILE, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;
InitializeMagickEx :: (path: *u8, options: u32, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

UnregisterMagickInfo :: (name: *u8) -> u32 #foreign libgraphicsmagick;

DestroyMagick :: () -> void #foreign libgraphicsmagick;
InitializeMagick :: (path: *u8) -> void #foreign libgraphicsmagick;
PanicDestroyMagick :: () -> void #foreign libgraphicsmagick;

GetMagickInfo :: (name: *u8, exception: *ExceptionInfo) -> *MagickInfo #foreign libgraphicsmagick;

GetMagickInfoArray :: (exception: *ExceptionInfo) -> **MagickInfo #foreign libgraphicsmagick;

RegisterMagickInfo :: (magick_info: *MagickInfo) -> *MagickInfo #foreign libgraphicsmagick;
SetMagickInfo :: (name: *u8) -> *MagickInfo #foreign libgraphicsmagick;

MagickMallocFunc :: #type (size: u64) -> *void #c_call;
MagickFreeFunc :: #type (ptr: *void) -> void #c_call;
MagickReallocFunc :: #type (ptr: *void, size: u64) -> *void #c_call;

MagickAllocFunctions :: (free_func: MagickFreeFunc, malloc_func: MagickMallocFunc, realloc_func: MagickReallocFunc) -> void #foreign libgraphicsmagick;

MagickMalloc :: (size: u64) -> *void #foreign libgraphicsmagick;
MagickMallocAligned :: (alignment: u64, size: u64) -> *void #foreign libgraphicsmagick;
MagickMallocCleared :: (size: u64) -> *void #foreign libgraphicsmagick;
MagickCloneMemory :: (destination: *void, source: *void, size: u64) -> *void #foreign libgraphicsmagick;
MagickRealloc :: (memory: *void, size: u64) -> *void #foreign libgraphicsmagick;
MagickFree :: (memory: *void) -> void #foreign libgraphicsmagick;
MagickFreeAligned :: (memory: *void) -> void #foreign libgraphicsmagick;

/*
Modules declarations.
*/
ExecuteModuleProcess :: (tag: *u8, image: **Image, argc: s32, argv: **u8) -> u32 #foreign libgraphicsmagick;

/*
Monitor typedef declarations.
*/
MonitorHandler :: #type (text: *u8, quantum: magick_int64_t, span: magick_uint64_t, exception: *ExceptionInfo) -> u32 #c_call;

/*
Monitor declarations.
*/
SetMonitorHandler :: (handler: MonitorHandler) -> MonitorHandler #foreign libgraphicsmagick;

MagickMonitor :: (text: *u8, quantum: magick_int64_t, span: magick_uint64_t, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

MagickMonitorFormatted_CFormat :: (quantum: magick_int64_t, span: magick_uint64_t, exception: *ExceptionInfo, format: *u8, __args: ..Any) -> u32 #foreign libgraphicsmagick "MagickMonitorFormatted";
MagickMonitorFormatted :: (quantum: magick_int64_t, span: magick_uint64_t, exception: *ExceptionInfo, format: string, __args: ..Any) -> u32 {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, format, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return MagickMonitorFormatted_CFormat(quantum, span, exception, "%s", formatted_text.data);
} @PrintLike

MontageImages :: (unknown0: *Image, unknown1: *MontageInfo, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

CloneMontageInfo :: (unknown0: *ImageInfo, unknown1: *MontageInfo) -> *MontageInfo #foreign libgraphicsmagick;

DestroyMontageInfo :: (unknown0: *MontageInfo) -> void #foreign libgraphicsmagick;
GetMontageInfo :: (unknown0: *ImageInfo, unknown1: *MontageInfo) -> void #foreign libgraphicsmagick;

ColorFloodfillImage :: (unknown0: *Image, unknown1: *DrawInfo, unknown2: PixelPacket, unknown3: s64, unknown4: s64, unknown5: PaintMethod) -> u32 #foreign libgraphicsmagick;

MatteFloodfillImage :: (unknown0: *Image, unknown1: PixelPacket, unknown2: u32, unknown3: s64, unknown4: s64, unknown5: PaintMethod) -> u32 #foreign libgraphicsmagick;

OpaqueImage :: (unknown0: *Image, unknown1: PixelPacket, unknown2: PixelPacket) -> u32 #foreign libgraphicsmagick;
TransparentImage :: (unknown0: *Image, unknown1: PixelPacket, unknown2: u32) -> u32 #foreign libgraphicsmagick;

/*
Pixel iterator options.
*/
_PixelIteratorOptions :: struct {
    max_threads: s32; /* Desired number of threads */
    signature:   u64;
}

/*
Pixel iterator options.
*/
PixelIteratorOptions :: _PixelIteratorOptions;

/*
Initialize pixel iterator options with defaults.
*/
InitializePixelIteratorOptions :: (options: *PixelIteratorOptions, exception: *ExceptionInfo) -> void #foreign libgraphicsmagick;

/*
Read-only access across pixel region.
*/
PixelIteratorMonoReadCallback :: #type (mutable_data: *void, immutable_data: *void, const_image: *Image, pixels: *PixelPacket, indexes: *IndexPacket, npixels: s64, exception: *ExceptionInfo) -> u32 #c_call;

PixelIterateMonoRead :: (call_back: PixelIteratorMonoReadCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, x: s64, y: s64, columns: u64, rows: u64, image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

PixelIteratorMonoModifyCallback :: #type (mutable_data: *void, immutable_data: *void, image: *Image, pixels: *PixelPacket, indexes: *IndexPacket, npixels: s64, exception: *ExceptionInfo) -> u32 #c_call;

/*
Write access across pixel region.
*/
PixelIterateMonoSet :: (call_back: PixelIteratorMonoModifyCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, x: s64, y: s64, columns: u64, rows: u64, image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-write access across pixel region.
*/
PixelIterateMonoModify :: (call_back: PixelIteratorMonoModifyCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, x: s64, y: s64, columns: u64, rows: u64, image: *Image, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-only access across pixel regions of two images.
*/
PixelIteratorDualReadCallback :: #type (mutable_data: *void, immutable_data: *void, first_image: *Image, first_pixels: *PixelPacket, first_indexes: *IndexPacket, second_image: *Image, second_pixels: *PixelPacket, second_indexes: *IndexPacket, npixels: s64, exception: *ExceptionInfo) -> u32 #c_call;

PixelIterateDualRead :: (call_back: PixelIteratorDualReadCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, columns: u64, rows: u64, first_image: *Image, first_x: s64, first_y: s64, second_image: *Image, second_x: s64, second_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-write access across pixel regions of two images. The first
(source) image is accessed read-only while the second (update)
image is accessed as read-write.
*/
PixelIteratorDualModifyCallback :: #type (mutable_data: *void, immutable_data: *void, source_image: *Image, source_pixels: *PixelPacket, source_indexes: *IndexPacket, update_image: *Image, update_pixels: *PixelPacket, update_indexes: *IndexPacket, npixels: s64, exception: *ExceptionInfo) -> u32 #c_call;

PixelIterateDualModify :: (call_back: PixelIteratorDualModifyCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, columns: u64, rows: u64, source_image: *Image, source_x: s64, source_y: s64, update_image: *Image, update_x: s64, update_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-write access across pixel regions of two images. The first
(source) image is accessed read-only while the second (new)
image is accessed for write (uninitialized pixels).
*/
PixelIteratorDualNewCallback :: PixelIteratorDualModifyCallback;

PixelIterateDualNew :: (call_back: PixelIteratorDualNewCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, columns: u64, rows: u64, source_image: *Image, source_x: s64, source_y: s64, new_image: *Image, new_x: s64, new_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-read-write access across pixel regions of three images. The
first two images are accessed read-only while the third is
accessed as read-write.
*/
PixelIteratorTripleModifyCallback :: #type (mutable_data: *void, immutable_data: *void, source1_image: *Image, source1_pixels: *PixelPacket, source1_indexes: *IndexPacket, source2_image: *Image, source2_pixels: *PixelPacket, source2_indexes: *IndexPacket, update_image: *Image, update_pixels: *PixelPacket, update_indexes: *IndexPacket, npixels: s64, exception: *ExceptionInfo) -> u32 #c_call;

PixelIterateTripleModify :: (call_back: PixelIteratorTripleModifyCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, columns: u64, rows: u64, source1_image: *Image, source2_image: *Image, source_x: s64, source_y: s64, update_image: *Image, update_x: s64, update_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

/*
Read-write access across pixel regions of two images. The first
(source) image is accessed read-only while the second (new)
image is accessed for write (uninitialized pixels).
*/
PixelIteratorTripleNewCallback :: PixelIteratorTripleModifyCallback;

PixelIterateTripleNew :: (call_back: PixelIteratorTripleNewCallback, options: *PixelIteratorOptions, description: *u8, mutable_data: *void, immutable_data: *void, columns: u64, rows: u64, source1_image: *Image, source2_image: *Image, source_x: s64, source_y: s64, new_image: *Image, new_x: s64, new_y: s64, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

PlasmaImage :: (image: *Image, segment: *SegmentInfo, attenuate: u64, depth: u64) -> u32 #foreign libgraphicsmagick;

/*
Retrieve a profile from the image by name.
*/
GetImageProfile :: (image: *Image, name: *u8, length: *u64) -> *u8 #foreign libgraphicsmagick;

/*
Remove a profile from the image by name.
*/
DeleteImageProfile :: (image: *Image, name: *u8) -> u32 #foreign libgraphicsmagick;

/*
Apply (or add) a profile to the image.
*/
ProfileImage :: (image: *Image, name: *u8, profile: *u8, length: u64, clone: u32) -> u32 #foreign libgraphicsmagick;

/*
Add (or replace) profile to the image by name.
*/
SetImageProfile :: (image: *Image, name: *u8, profile: *u8, length: u64) -> u32 #foreign libgraphicsmagick;

/*
Add (or append) profile to the image by name.
*/
AppendImageProfile :: (image: *Image, name: *u8, profile_chunk: *u8, chunk_length: u64) -> u32 #foreign libgraphicsmagick;

/*
Generic iterator for traversing profiles.
*/
ImageProfileIterator :: *void;

/*
Allocate an image profile iterator which points to one before the
list so NextImageProfile() must be used to advance to first entry.
*/
AllocateImageProfileIterator :: (image: *Image) -> ImageProfileIterator #foreign libgraphicsmagick;

/*
Advance to next image profile.  Name, profile, and length are
updated with information on current profile. MagickFail is returned
when there are no more entries.
*/
NextImageProfile :: (profile_iterator: ImageProfileIterator, name: **u8, profile: **u8, length: *u64) -> u32 #foreign libgraphicsmagick;

/*
Deallocate profile iterator.
*/
DeallocateImageProfileIterator :: (profile_iterator: ImageProfileIterator) -> void #foreign libgraphicsmagick;

/*
Typedef declarations.
*/
_QuantizeInfo :: struct {
    number_colors: u64;

    tree_depth:    u32;
    dither:        u32;

    colorspace:    ColorspaceType;

    measure_error: u32;

    signature:     u64;
}

/*
Typedef declarations.
*/
QuantizeInfo :: _QuantizeInfo;

/*
Quantization utilities methods.
*/
CloneQuantizeInfo :: (unknown0: *QuantizeInfo) -> *QuantizeInfo #foreign libgraphicsmagick;

GetImageQuantizeError :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;
MapImage :: (unknown0: *Image, unknown1: *Image, unknown2: u32) -> u32 #foreign libgraphicsmagick;
MapImages :: (unknown0: *Image, unknown1: *Image, unknown2: u32) -> u32 #foreign libgraphicsmagick;
OrderedDitherImage :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;
QuantizeImage :: (unknown0: *QuantizeInfo, unknown1: *Image) -> u32 #foreign libgraphicsmagick;
QuantizeImages :: (unknown0: *QuantizeInfo, unknown1: *Image) -> u32 #foreign libgraphicsmagick;
SegmentImage :: (unknown0: *Image, unknown1: ColorspaceType, unknown2: u32, unknown3: float64, unknown4: float64) -> u32 #foreign libgraphicsmagick;

CompressImageColormap :: (unknown0: *Image) -> void #foreign libgraphicsmagick;
DestroyQuantizeInfo :: (unknown0: *QuantizeInfo) -> void #foreign libgraphicsmagick;
GetQuantizeInfo :: (unknown0: *QuantizeInfo) -> void #foreign libgraphicsmagick;
GrayscalePseudoClassImage :: (unknown0: *Image, unknown1: u32) -> void #foreign libgraphicsmagick;

/*
Enum declarations.
*/
RegistryType :: enum u32 {
    UndefinedRegistryType :: 0;
    ImageRegistryType     :: 1;
    ImageInfoRegistryType :: 2;
}

/*
Magick registry methods.
*/
GetImageFromMagickRegistry :: (name: *u8, id: *s64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

SetMagickRegistry :: (type: RegistryType, blob: *void, length: u64, exception: *ExceptionInfo) -> s64 #foreign libgraphicsmagick;

DeleteMagickRegistry :: (id: s64) -> u32 #foreign libgraphicsmagick;

GetMagickRegistry :: (id: s64, type: *RegistryType, length: *u64, exception: *ExceptionInfo) -> *void #foreign libgraphicsmagick;

MagnifyImage :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
MinifyImage :: (unknown0: *Image, unknown1: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ResizeImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: FilterTypes, unknown4: float64, unknown5: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

SampleImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ScaleImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ThumbnailImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

ZoomImage :: (unknown0: *Image, unknown1: u64, unknown2: u64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

AffineTransformImage :: (unknown0: *Image, unknown1: *AffineMatrix, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
AutoOrientImage :: (image: *Image, current_orientation: OrientationType, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

RotateImage :: (unknown0: *Image, unknown1: float64, unknown2: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ShearImage :: (unknown0: *Image, unknown1: float64, unknown2: float64, unknown3: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

/*
Method declarations.
*/
SignatureImage :: (unknown0: *Image) -> u32 #foreign libgraphicsmagick;

_ImageChannelStatistics :: struct {
    /* Minimum value observed */
    maximum:            float64;

    /* Maximum value observed */
    minimum:            float64;

    /* Average (mean) value observed */
    mean:               float64;

    /* Standard deviation, sqrt(variance) */
    standard_deviation: float64;

    /* Variance */
    variance:           float64;
}

ImageChannelStatistics :: _ImageChannelStatistics;

_ImageStatistics :: struct {
    red:     ImageChannelStatistics;
    green:   ImageChannelStatistics;
    blue:    ImageChannelStatistics;
    opacity: ImageChannelStatistics;
}

ImageStatistics :: _ImageStatistics;

GetImageStatistics :: (image: *Image, statistics: *ImageStatistics, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

TextureImage :: (unknown0: *Image, unknown1: *Image) -> u32 #foreign libgraphicsmagick;

ChopImage :: (image: *Image, chop_info: *RectangleInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
CoalesceImages :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
CropImage :: (image: *Image, geometry: *RectangleInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
DeconstructImages :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ExtentImage :: (image: *Image, geometry: *RectangleInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
FlattenImages :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
FlipImage :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
FlopImage :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
MosaicImages :: (image: *Image, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
RollImage :: (image: *Image, x_offset: s64, y_offset: s64, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;
ShaveImage :: (image: *Image, shave_info: *RectangleInfo, exception: *ExceptionInfo) -> *Image #foreign libgraphicsmagick;

TransformImage :: (unknown0: **Image, unknown1: *u8, unknown2: *u8) -> u32 #foreign libgraphicsmagick;

/*
Enum declarations.
*/
PathType :: enum u32 {
    RootPath      :: 0;
    HeadPath      :: 1;
    TailPath      :: 2;
    BasePath      :: 3;
    ExtensionPath :: 4;
    MagickPath    :: 5;
    SubImagePath  :: 6;
    FullPath      :: 7;
}

/*
Typedef declarations.
*/
_TokenInfo :: struct {
    state:  s32;

    flag:   u32;

    offset: s64;

    quote:  u8;
}

/*
Typedef declarations.
*/
TokenInfo :: _TokenInfo;

/*
A callback function which behaves similar to strlcpy() except which
optionally translates text while it is copied and always returns
the number of characters which were actually copied rather than
the number of characters which were available to copy.
*/
MagickTextTranslate :: #type (dst: *u8, src: *u8, size: u64) -> u64 #c_call;

AcquireString :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;
AllocateString :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;
Base64Encode :: (unknown0: *u8, unknown1: u64, unknown2: *u64) -> *u8 #foreign libgraphicsmagick;
EscapeString :: (unknown0: *u8, unknown1: u8) -> *u8 #foreign libgraphicsmagick;
GetPageGeometry :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;
ListFiles :: (unknown0: *u8, unknown1: *u8, unknown2: *s64) -> **u8 #foreign libgraphicsmagick;
StringToArgv :: (unknown0: *u8, unknown1: *s32) -> **u8 #foreign libgraphicsmagick;
StringToList :: (unknown0: *u8) -> **u8 #foreign libgraphicsmagick;
TranslateText :: (unknown0: *ImageInfo, unknown1: *Image, unknown2: *u8) -> *u8 #foreign libgraphicsmagick;
TranslateTextEx :: (unknown0: *ImageInfo, unknown1: *Image, unknown2: *u8, unknown3: MagickTextTranslate) -> *u8 #foreign libgraphicsmagick;

GetClientFilename :: () -> *u8 #foreign libgraphicsmagick;
GetClientName :: () -> *u8 #foreign libgraphicsmagick;
GetClientPath :: () -> *u8 #foreign libgraphicsmagick;
SetClientFilename :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;
SetClientName :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;
SetClientPath :: (unknown0: *u8) -> *u8 #foreign libgraphicsmagick;

StringToDouble :: (unknown0: *u8, unknown1: float64) -> float64 #foreign libgraphicsmagick;

GetGeometry :: (unknown0: *u8, unknown1: *s64, unknown2: *s64, unknown3: *u64, unknown4: *u64) -> s32 #foreign libgraphicsmagick;
GlobExpression :: (unknown0: *u8, unknown1: *u8) -> s32 #foreign libgraphicsmagick;
LocaleNCompare :: (unknown0: *u8, unknown1: *u8, unknown2: u64) -> s32 #foreign libgraphicsmagick;
LocaleCompare :: (unknown0: *u8, unknown1: *u8) -> s32 #foreign libgraphicsmagick;
GetMagickDimension :: (str: *u8, width: *float64, height: *float64, xoff: *float64, yoff: *float64) -> s32 #foreign libgraphicsmagick;
GetMagickGeometry :: (geometry: *u8, x: *s64, y: *s64, width: *u64, height: *u64) -> s32 #foreign libgraphicsmagick;

MagickRandReentrant :: (seed: *u32) -> s32 #foreign libgraphicsmagick;
MagickSpawnVP :: (verbose: u32, file: *u8, argv: **u8) -> s32 #foreign libgraphicsmagick;
SystemCommand :: (unknown0: u32, unknown1: *u8) -> s32 #foreign libgraphicsmagick;
Tokenizer :: (unknown0: *TokenInfo, unknown1: u32, unknown2: *u8, unknown3: u64, unknown4: *u8, unknown5: *u8, unknown6: *u8, unknown7: *u8, unknown8: u8, unknown9: *u8, unknown10: *s32, unknown11: *u8) -> s32 #foreign libgraphicsmagick;

MagickRandNewSeed :: () -> u32 #foreign libgraphicsmagick;

Base64Decode :: (unknown0: *u8, unknown1: *u64) -> *u8 #foreign libgraphicsmagick;

CloneString :: (unknown0: **u8, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
ConcatenateString :: (unknown0: **u8, unknown1: *u8) -> u32 #foreign libgraphicsmagick;
ExpandFilenames :: (unknown0: *s32, unknown1: ***u8) -> u32 #foreign libgraphicsmagick;
GetExecutionPath :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
GetExecutionPathUsingName :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
MagickCreateDirectoryPath :: (dir: *u8, exception: *ExceptionInfo) -> u32 #foreign libgraphicsmagick;

IsAccessible :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
IsAccessibleNoLogging :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
IsAccessibleAndNotEmpty :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
IsGeometry :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
IsGlob :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
IsWriteable :: (unknown0: *u8) -> u32 #foreign libgraphicsmagick;
MagickSceneFileName :: (filename: *u8, filename_template: *u8, scene_template: *u8, force: u32, scene: u64) -> u32 #foreign libgraphicsmagick;

SubstituteString :: (buffer: **u8, search: *u8, replace: *u8) -> u32 #foreign libgraphicsmagick;

MultilineCensus :: (unknown0: *u8) -> u64 #foreign libgraphicsmagick;

AppendImageFormat :: (unknown0: *u8, unknown1: *u8) -> void #foreign libgraphicsmagick;
DefineClientName :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
DefineClientPathAndName :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
ExpandFilename :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
FormatSize :: (size: magick_int64_t, format: *u8) -> void #foreign libgraphicsmagick;
GetPathComponent :: (unknown0: *u8, unknown1: PathType, unknown2: *u8) -> void #foreign libgraphicsmagick;
GetToken :: (unknown0: *u8, unknown1: **u8, unknown2: *u8) -> void #foreign libgraphicsmagick;
LocaleLower :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
LocaleUpper :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
Strip :: (unknown0: *u8) -> void #foreign libgraphicsmagick;
SetGeometry :: (unknown0: *Image, unknown1: *RectangleInfo) -> void #foreign libgraphicsmagick;

FormatString_CFormat :: (_string: *u8, format: *u8, __args: ..Any) -> u64 #foreign libgraphicsmagick "FormatString";
FormatString :: (_string: *u8, format: string, __args: ..Any) -> u64 {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, format, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return FormatString_CFormat(_string, "%s", formatted_text.data);
} @PrintLike

MagickFormatString_CFormat :: (_string: *u8, length: u64, format: *u8, __args: ..Any) -> u64 #foreign libgraphicsmagick "MagickFormatString";
MagickFormatString :: (_string: *u8, length: u64, format: string, __args: ..Any) -> u64 {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, format, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return MagickFormatString_CFormat(_string, length, "%s", formatted_text.data);
} @PrintLike

MagickSizeStrToInt64 :: (str: *u8, kilo: u32) -> magick_int64_t #foreign libgraphicsmagick;

MagickGetToken :: (start: *u8, end: **u8, token: *u8, buffer_length: u64) -> u64 #foreign libgraphicsmagick;

MagickStrlCat :: (dst: *u8, src: *u8, size: u64) -> u64 #foreign libgraphicsmagick;
MagickStrlCpy :: (dst: *u8, src: *u8, size: u64) -> u64 #foreign libgraphicsmagick;
MagickStrlCpyTrunc :: (dst: *u8, src: *u8, size: u64) -> u64 #foreign libgraphicsmagick;

/*
Method declarations.
*/
GetMagickCopyright :: () -> *u8 #foreign libgraphicsmagick;
/*
Method declarations.
*/
GetMagickVersion :: (unknown0: *u64) -> *u8 #foreign libgraphicsmagick;
/*
Method declarations.
*/
GetMagickWebSite :: () -> *u8 #foreign libgraphicsmagick;

_PixelWand :: struct {}
PixelWand :: _PixelWand;

PixelGetColorAsString :: (unknown0: *PixelWand) -> *u8 #foreign libgraphicsmagickwand;

PixelGetBlack :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetBlue :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetCyan :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetGreen :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetMagenta :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetOpacity :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetRed :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;
PixelGetYellow :: (unknown0: *PixelWand) -> float64 #foreign libgraphicsmagickwand;

ClonePixelWand :: (unknown0: *PixelWand) -> *PixelWand #foreign libgraphicsmagickwand;
ClonePixelWands :: (unknown0: **PixelWand, unknown1: u64) -> **PixelWand #foreign libgraphicsmagickwand;
NewPixelWand :: () -> *PixelWand #foreign libgraphicsmagickwand;
NewPixelWands :: (unknown0: u64) -> **PixelWand #foreign libgraphicsmagickwand;

PixelGetBlackQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetBlueQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetCyanQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetGreenQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetMagentaQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetOpacityQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetRedQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;
PixelGetYellowQuantum :: (unknown0: *PixelWand) -> Quantum #foreign libgraphicsmagickwand;

PixelSetColor :: (unknown0: *PixelWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;

PixelGetColorCount :: (unknown0: *PixelWand) -> u64 #foreign libgraphicsmagickwand;

DestroyPixelWand :: (unknown0: *PixelWand) -> void #foreign libgraphicsmagickwand;
PixelGetQuantumColor :: (unknown0: *PixelWand, unknown1: *PixelPacket) -> void #foreign libgraphicsmagickwand;
PixelSetBlack :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetBlackQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetBlue :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetBlueQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetColorCount :: (unknown0: *PixelWand, unknown1: u64) -> void #foreign libgraphicsmagickwand;
PixelSetCyan :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetCyanQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetGreen :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetGreenQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetMagenta :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetMagentaQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetOpacity :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetOpacityQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetQuantumColor :: (unknown0: *PixelWand, unknown1: *PixelPacket) -> void #foreign libgraphicsmagickwand;
PixelSetRed :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetRedQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;
PixelSetYellow :: (unknown0: *PixelWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
PixelSetYellowQuantum :: (unknown0: *PixelWand, unknown1: Quantum) -> void #foreign libgraphicsmagickwand;

_DrawingWand :: struct {}
DrawingWand :: _DrawingWand;

MagickDrawGetClipPath :: (unknown0: *DrawingWand) -> *u8 #foreign libgraphicsmagickwand;
MagickDrawGetException :: (unknown0: *DrawingWand, unknown1: *ExceptionType) -> *u8 #foreign libgraphicsmagickwand;
MagickDrawGetFont :: (unknown0: *DrawingWand) -> *u8 #foreign libgraphicsmagickwand;
MagickDrawGetFontFamily :: (unknown0: *DrawingWand) -> *u8 #foreign libgraphicsmagickwand;
MagickDrawGetTextEncoding :: (unknown0: *DrawingWand) -> *u8 #foreign libgraphicsmagickwand;

MagickDrawGetClipUnits :: (unknown0: *DrawingWand) -> ClipPathUnits #foreign libgraphicsmagickwand;

MagickDrawGetTextDecoration :: (unknown0: *DrawingWand) -> DecorationType #foreign libgraphicsmagickwand;

MagickDrawGetFillOpacity :: (unknown0: *DrawingWand) -> float64 #foreign libgraphicsmagickwand;
MagickDrawGetFontSize :: (unknown0: *DrawingWand) -> float64 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeDashArray :: (unknown0: *DrawingWand, unknown1: *u64) -> *float64 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeDashOffset :: (unknown0: *DrawingWand) -> float64 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeOpacity :: (unknown0: *DrawingWand) -> float64 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeWidth :: (unknown0: *DrawingWand) -> float64 #foreign libgraphicsmagickwand;

MagickDrawPeekGraphicContext :: (unknown0: *DrawingWand) -> *DrawInfo #foreign libgraphicsmagickwand;

MagickCloneDrawingWand :: (drawing_wand: *DrawingWand) -> *DrawingWand #foreign libgraphicsmagickwand;
MagickDrawAllocateWand :: (unknown0: *DrawInfo, unknown1: *Image) -> *DrawingWand #foreign libgraphicsmagickwand;
MagickNewDrawingWand :: () -> *DrawingWand #foreign libgraphicsmagickwand;

MagickDrawGetClipRule :: (unknown0: *DrawingWand) -> FillRule #foreign libgraphicsmagickwand;
MagickDrawGetFillRule :: (unknown0: *DrawingWand) -> FillRule #foreign libgraphicsmagickwand;

MagickDrawGetGravity :: (unknown0: *DrawingWand) -> GravityType #foreign libgraphicsmagickwand;

MagickDrawGetStrokeLineCap :: (unknown0: *DrawingWand) -> LineCap #foreign libgraphicsmagickwand;

MagickDrawGetStrokeLineJoin :: (unknown0: *DrawingWand) -> LineJoin #foreign libgraphicsmagickwand;

MagickDrawGetFontStretch :: (unknown0: *DrawingWand) -> StretchType #foreign libgraphicsmagickwand;

MagickDrawGetFontStyle :: (unknown0: *DrawingWand) -> StyleType #foreign libgraphicsmagickwand;

MagickDrawClearException :: (unknown0: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeAntialias :: (unknown0: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;
MagickDrawGetTextAntialias :: (unknown0: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;
MagickDrawRender :: (unknown0: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;

MagickDrawGetFontWeight :: (unknown0: *DrawingWand) -> u64 #foreign libgraphicsmagickwand;
MagickDrawGetStrokeMiterLimit :: (unknown0: *DrawingWand) -> u64 #foreign libgraphicsmagickwand;

MagickDrawAffine :: (unknown0: *DrawingWand, unknown1: *AffineMatrix) -> void #foreign libgraphicsmagickwand;
MagickDrawAnnotation :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawArc :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawBezier :: (unknown0: *DrawingWand, unknown1: u64, unknown2: *PointInfo) -> void #foreign libgraphicsmagickwand;
MagickDrawCircle :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawColor :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: PaintMethod) -> void #foreign libgraphicsmagickwand;
MagickDrawComment :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDestroyDrawingWand :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawEllipse :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawComposite :: (unknown0: *DrawingWand, unknown1: CompositeOperator, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: *Image) -> void #foreign libgraphicsmagickwand;

MagickDrawGetFillColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawGetStrokeColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawGetTextUnderColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawLine :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawMatte :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: PaintMethod) -> void #foreign libgraphicsmagickwand;
MagickDrawPathClose :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPathCurveToAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToQuadraticBezierAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToQuadraticBezierRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToQuadraticBezierSmoothAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToQuadraticBezierSmoothRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToSmoothAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathCurveToSmoothRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathEllipticArcAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: u32, unknown5: u32, unknown6: float64, unknown7: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathEllipticArcRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: u32, unknown5: u32, unknown6: float64, unknown7: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawPathFinish :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToHorizontalAbsolute :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToHorizontalRelative :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToVerticalAbsolute :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathLineToVerticalRelative :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathMoveToAbsolute :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathMoveToRelative :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPathStart :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPoint :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawPolygon :: (unknown0: *DrawingWand, unknown1: u64, unknown2: *PointInfo) -> void #foreign libgraphicsmagickwand;
MagickDrawPolyline :: (unknown0: *DrawingWand, unknown1: u64, unknown2: *PointInfo) -> void #foreign libgraphicsmagickwand;
MagickDrawPopClipPath :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPopDefs :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPopGraphicContext :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPopPattern :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPushClipPath :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawPushDefs :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPushGraphicContext :: (unknown0: *DrawingWand) -> void #foreign libgraphicsmagickwand;
MagickDrawPushPattern :: (unknown0: *DrawingWand, unknown1: *u8, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawRectangle :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> void #foreign libgraphicsmagickwand;

MagickDrawRotate :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawRoundRectangle :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: float64, unknown6: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawScale :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetClipPath :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetClipRule :: (unknown0: *DrawingWand, unknown1: FillRule) -> void #foreign libgraphicsmagickwand;
MagickDrawSetClipUnits :: (unknown0: *DrawingWand, unknown1: ClipPathUnits) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFillColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFillOpacity :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFillRule :: (unknown0: *DrawingWand, unknown1: FillRule) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFillPatternURL :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFont :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFontFamily :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFontSize :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFontStretch :: (unknown0: *DrawingWand, unknown1: StretchType) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFontStyle :: (unknown0: *DrawingWand, unknown1: StyleType) -> void #foreign libgraphicsmagickwand;
MagickDrawSetFontWeight :: (unknown0: *DrawingWand, unknown1: u64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetGravity :: (unknown0: *DrawingWand, unknown1: GravityType) -> void #foreign libgraphicsmagickwand;
MagickDrawSkewX :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSkewY :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeAntialias :: (unknown0: *DrawingWand, unknown1: u32) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeDashArray :: (unknown0: *DrawingWand, unknown1: u64, unknown2: *float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeDashOffset :: (unknown0: *DrawingWand, dashoffset: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeLineCap :: (unknown0: *DrawingWand, unknown1: LineCap) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeLineJoin :: (unknown0: *DrawingWand, unknown1: LineJoin) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeMiterLimit :: (unknown0: *DrawingWand, unknown1: u64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeOpacity :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokePatternURL :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetStrokeWidth :: (unknown0: *DrawingWand, unknown1: float64) -> void #foreign libgraphicsmagickwand;
MagickDrawSetTextAntialias :: (unknown0: *DrawingWand, unknown1: u32) -> void #foreign libgraphicsmagickwand;
MagickDrawSetTextDecoration :: (unknown0: *DrawingWand, unknown1: DecorationType) -> void #foreign libgraphicsmagickwand;
MagickDrawSetTextEncoding :: (unknown0: *DrawingWand, unknown1: *u8) -> void #foreign libgraphicsmagickwand;
MagickDrawSetTextUnderColor :: (unknown0: *DrawingWand, unknown1: *PixelWand) -> void #foreign libgraphicsmagickwand;
MagickDrawSetViewbox :: (unknown0: *DrawingWand, unknown1: u64, unknown2: u64, unknown3: u64, unknown4: u64) -> void #foreign libgraphicsmagickwand;

MagickDrawTranslate :: (unknown0: *DrawingWand, unknown1: float64, unknown2: float64) -> void #foreign libgraphicsmagickwand;

FormatMagickString_CFormat :: (unknown0: *u8, unknown1: u64, unknown2: *u8, __args: ..Any) -> s32 #foreign libgraphicsmagickwand "FormatMagickString";
FormatMagickString :: (unknown0: *u8, unknown1: u64, unknown2: string, __args: ..Any) -> s32 {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, unknown2, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return FormatMagickString_CFormat(unknown0, unknown1, "%s", formatted_text.data);
} @PrintLike

CopyMagickString :: (unknown0: *u8, unknown1: *u8, unknown2: u64) -> u64 #foreign libgraphicsmagickwand;

_MagickWand :: struct {}
MagickWand :: _MagickWand;

MagickDescribeImage :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickGetConfigureInfo :: (unknown0: *MagickWand, unknown1: *u8) -> *u8 #foreign libgraphicsmagickwand;
MagickGetException :: (unknown0: *MagickWand, unknown1: *ExceptionType) -> *u8 #foreign libgraphicsmagickwand;
MagickGetFilename :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickGetImageAttribute :: (unknown0: *MagickWand, unknown1: *u8) -> *u8 #foreign libgraphicsmagickwand;
MagickGetImageFilename :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickGetImageFormat :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickGetImageSignature :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickQueryFonts :: (unknown0: *u8, unknown1: *u64) -> **u8 #foreign libgraphicsmagickwand;
MagickQueryFormats :: (unknown0: *u8, unknown1: *u64) -> **u8 #foreign libgraphicsmagickwand;

MagickGetImageCompose :: (unknown0: *MagickWand) -> CompositeOperator #foreign libgraphicsmagickwand;

MagickGetImageColorspace :: (unknown0: *MagickWand) -> ColorspaceType #foreign libgraphicsmagickwand;

MagickGetImageCompression :: (unknown0: *MagickWand) -> CompressionType #foreign libgraphicsmagickwand;

MagickGetCopyright :: () -> *u8 #foreign libgraphicsmagickwand;
MagickGetHomeURL :: () -> *u8 #foreign libgraphicsmagickwand;
MagickGetImageGeometry :: (unknown0: *MagickWand) -> *u8 #foreign libgraphicsmagickwand;
MagickGetPackageName :: () -> *u8 #foreign libgraphicsmagickwand;
MagickGetQuantumDepth :: (unknown0: *u64) -> *u8 #foreign libgraphicsmagickwand;
MagickGetReleaseDate :: () -> *u8 #foreign libgraphicsmagickwand;
MagickGetVersion :: (unknown0: *u64) -> *u8 #foreign libgraphicsmagickwand;

MagickGetImageDispose :: (unknown0: *MagickWand) -> DisposeType #foreign libgraphicsmagickwand;

MagickGetImageGamma :: (unknown0: *MagickWand) -> float64 #foreign libgraphicsmagickwand;
MagickGetImageFuzz :: (unknown0: *MagickWand) -> float64 #foreign libgraphicsmagickwand;
MagickGetSamplingFactors :: (unknown0: *MagickWand, unknown1: *u64) -> *float64 #foreign libgraphicsmagickwand;
MagickQueryFontMetrics :: (unknown0: *MagickWand, unknown1: *DrawingWand, unknown2: *u8) -> *float64 #foreign libgraphicsmagickwand;

MagickGetImageGravity :: (wand: *MagickWand) -> GravityType #foreign libgraphicsmagickwand;

MagickGetImageType :: (unknown0: *MagickWand) -> ImageType #foreign libgraphicsmagickwand;

MagickGetImageSavedType :: (unknown0: *MagickWand) -> ImageType #foreign libgraphicsmagickwand;

MagickGetImageInterlaceScheme :: (unknown0: *MagickWand) -> InterlaceType #foreign libgraphicsmagickwand;

MagickGetImageIndex :: (unknown0: *MagickWand) -> s64 #foreign libgraphicsmagickwand;

MagickGetImageSize :: (unknown0: *MagickWand) -> magick_int64_t #foreign libgraphicsmagickwand;

CloneMagickWand :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickAppendImages :: (unknown0: *MagickWand, unknown1: u32) -> *MagickWand #foreign libgraphicsmagickwand;
MagickAverageImages :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickCoalesceImages :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickCompareImageChannels :: (unknown0: *MagickWand, unknown1: *MagickWand, unknown2: ChannelType, unknown3: MetricType, unknown4: *float64) -> *MagickWand #foreign libgraphicsmagickwand;

MagickCompareImages :: (unknown0: *MagickWand, unknown1: *MagickWand, unknown2: MetricType, unknown3: *float64) -> *MagickWand #foreign libgraphicsmagickwand;

MagickDeconstructImages :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickFlattenImages :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickFxImage :: (unknown0: *MagickWand, unknown1: *u8) -> *MagickWand #foreign libgraphicsmagickwand;
MagickFxImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: *u8) -> *MagickWand #foreign libgraphicsmagickwand;
MagickGetImage :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickMorphImages :: (unknown0: *MagickWand, unknown1: u64) -> *MagickWand #foreign libgraphicsmagickwand;
MagickMosaicImages :: (unknown0: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickMontageImage :: (unknown0: *MagickWand, unknown1: *DrawingWand, unknown2: *u8, unknown3: *u8, unknown4: MontageMode, unknown5: *u8) -> *MagickWand #foreign libgraphicsmagickwand;

MagickPreviewImages :: (wand: *MagickWand, unknown0: PreviewType) -> *MagickWand #foreign libgraphicsmagickwand;
MagickSteganoImage :: (unknown0: *MagickWand, unknown1: *MagickWand, unknown2: s64) -> *MagickWand #foreign libgraphicsmagickwand;
MagickStereoImage :: (unknown0: *MagickWand, unknown1: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickTextureImage :: (unknown0: *MagickWand, unknown1: *MagickWand) -> *MagickWand #foreign libgraphicsmagickwand;
MagickTransformImage :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u8) -> *MagickWand #foreign libgraphicsmagickwand;
NewMagickWand :: () -> *MagickWand #foreign libgraphicsmagickwand;

MagickGetImageOrientation :: (unknown0: *MagickWand) -> OrientationType #foreign libgraphicsmagickwand;

MagickGetImageHistogram :: (unknown0: *MagickWand, unknown1: *u64) -> **PixelWand #foreign libgraphicsmagickwand;

MagickGetImageRenderingIntent :: (unknown0: *MagickWand) -> RenderingIntent #foreign libgraphicsmagickwand;

MagickGetImageUnits :: (unknown0: *MagickWand) -> ResolutionType #foreign libgraphicsmagickwand;

DestroyMagickWand :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickAdaptiveThresholdImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: s64) -> u32 #foreign libgraphicsmagickwand;

MagickAddImage :: (unknown0: *MagickWand, unknown1: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickAddNoiseImage :: (unknown0: *MagickWand, unknown1: NoiseType) -> u32 #foreign libgraphicsmagickwand;
MagickAffineTransformImage :: (unknown0: *MagickWand, unknown1: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;
MagickAnnotateImage :: (unknown0: *MagickWand, unknown1: *DrawingWand, unknown2: float64, unknown3: float64, unknown4: float64, unknown5: *u8) -> u32 #foreign libgraphicsmagickwand;

MagickAnimateImages :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickAutoOrientImage :: (wand: *MagickWand, unknown0: OrientationType) -> u32 #foreign libgraphicsmagickwand;
MagickBlackThresholdImage :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickBlurImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickBorderImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: u64, unknown3: u64) -> u32 #foreign libgraphicsmagickwand;

MagickCdlImage :: (wand: *MagickWand, cdl: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickCharcoalImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickChopImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: s64, unknown4: s64) -> u32 #foreign libgraphicsmagickwand;

MagickClipImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickClipPathImage :: (unknown0: *MagickWand, unknown1: *u8, unknown2: u32) -> u32 #foreign libgraphicsmagickwand;
MagickColorFloodfillImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: float64, unknown3: *PixelWand, unknown4: s64, unknown5: s64) -> u32 #foreign libgraphicsmagickwand;

MagickColorizeImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickCommentImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickCompositeImage :: (unknown0: *MagickWand, unknown1: *MagickWand, unknown2: CompositeOperator, unknown3: s64, unknown4: s64) -> u32 #foreign libgraphicsmagickwand;

MagickContrastImage :: (unknown0: *MagickWand, unknown1: u32) -> u32 #foreign libgraphicsmagickwand;
MagickConvolveImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickCropImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: s64, unknown4: s64) -> u32 #foreign libgraphicsmagickwand;

MagickCycleColormapImage :: (unknown0: *MagickWand, unknown1: s64) -> u32 #foreign libgraphicsmagickwand;
MagickDespeckleImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickDisplayImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickDisplayImages :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickDrawImage :: (unknown0: *MagickWand, unknown1: *DrawingWand) -> u32 #foreign libgraphicsmagickwand;
MagickEdgeImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickEmbossImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickEnhanceImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickEqualizeImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickExtentImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: ssize_t, unknown4: ssize_t) -> u32 #foreign libgraphicsmagickwand;
MagickFlipImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickFlopImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickFrameImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: u64, unknown3: u64, unknown4: s64, unknown5: s64) -> u32 #foreign libgraphicsmagickwand;

MagickGammaImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickGammaImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageBackgroundColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageBluePrimary :: (unknown0: *MagickWand, unknown1: *float64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageBorderColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageBoundingBox :: (wand: *MagickWand, fuzz: float64, width: *u64, height: *u64, x: *s64, y: *s64) -> u32 #foreign libgraphicsmagickwand;

MagickGetImageChannelExtrema :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: *u64, unknown3: *u64) -> u32 #foreign libgraphicsmagickwand;

MagickGetImageChannelMean :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: *float64, unknown3: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageColormapColor :: (unknown0: *MagickWand, unknown1: u64, unknown2: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageExtrema :: (unknown0: *MagickWand, unknown1: *u64, unknown2: *u64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageGreenPrimary :: (unknown0: *MagickWand, unknown1: *float64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageMatte :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageMatteColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickGetImagePage :: (wand: *MagickWand, width: *u64, height: *u64, x: *s64, y: *s64) -> u32 #foreign libgraphicsmagickwand;

MagickGetImagePixels :: (unknown0: *MagickWand, unknown1: s64, unknown2: s64, unknown3: u64, unknown4: u64, unknown5: *u8, unknown6: StorageType, unknown7: *u8) -> u32 #foreign libgraphicsmagickwand;

MagickGetImageRedPrimary :: (unknown0: *MagickWand, unknown1: *float64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageResolution :: (unknown0: *MagickWand, unknown1: *float64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetImageWhitePoint :: (unknown0: *MagickWand, unknown1: *float64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickGetSize :: (unknown0: *MagickWand, unknown1: *u64, unknown2: *u64) -> u32 #foreign libgraphicsmagickwand;
MagickHaldClutImage :: (wand: *MagickWand, clut_wand: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickHasColormap :: (unknown0: *MagickWand, unknown1: *u32) -> u32 #foreign libgraphicsmagickwand;
MagickHasNextImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickHasPreviousImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickImplodeImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickIsGrayImage :: (unknown0: *MagickWand, unknown1: *u32) -> u32 #foreign libgraphicsmagickwand;
MagickIsMonochromeImage :: (unknown0: *MagickWand, unknown1: *u32) -> u32 #foreign libgraphicsmagickwand;
MagickIsOpaqueImage :: (unknown0: *MagickWand, unknown1: *u32) -> u32 #foreign libgraphicsmagickwand;
MagickIsPaletteImage :: (unknown0: *MagickWand, unknown1: *u32) -> u32 #foreign libgraphicsmagickwand;
MagickLabelImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickLevelImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;
MagickLevelImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: float64, unknown3: float64, unknown4: float64) -> u32 #foreign libgraphicsmagickwand;

MagickMagnifyImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickMapImage :: (unknown0: *MagickWand, unknown1: *MagickWand, unknown2: u32) -> u32 #foreign libgraphicsmagickwand;
MagickMatteFloodfillImage :: (unknown0: *MagickWand, unknown1: Quantum, unknown2: float64, unknown3: *PixelWand, unknown4: s64, unknown5: s64) -> u32 #foreign libgraphicsmagickwand;

MagickMedianFilterImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickMinifyImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickModulateImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;
MagickMotionBlurImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;
MagickNegateImage :: (unknown0: *MagickWand, unknown1: u32) -> u32 #foreign libgraphicsmagickwand;
MagickNegateImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: u32) -> u32 #foreign libgraphicsmagickwand;
MagickNextImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickNormalizeImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickOilPaintImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickOpaqueImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: *PixelWand, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;

MagickOperatorImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: QuantumOperator, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;

MagickPingImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickPreviousImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickProfileImage :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u8, unknown3: u64) -> u32 #foreign libgraphicsmagickwand;

MagickQuantizeImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: ColorspaceType, unknown3: u64, unknown4: u32, unknown5: u32) -> u32 #foreign libgraphicsmagickwand;

MagickQuantizeImages :: (unknown0: *MagickWand, unknown1: u64, unknown2: ColorspaceType, unknown3: u64, unknown4: u32, unknown5: u32) -> u32 #foreign libgraphicsmagickwand;

MagickRadialBlurImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickRaiseImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: s64, unknown4: s64, unknown5: u32) -> u32 #foreign libgraphicsmagickwand;

MagickReadImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickReadImageBlob :: (unknown0: *MagickWand, unknown1: *u8, length: u64) -> u32 #foreign libgraphicsmagickwand;
MagickReadImageFile :: (unknown0: *MagickWand, unknown1: *FILE) -> u32 #foreign libgraphicsmagickwand;
MagickReduceNoiseImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickRelinquishMemory :: (unknown0: *void) -> u32 #foreign libgraphicsmagickwand;
MagickRemoveImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickRemoveImageOption :: (wand: *MagickWand, unknown0: *u8, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickResampleImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64, unknown3: FilterTypes, unknown4: float64) -> u32 #foreign libgraphicsmagickwand;

MagickResizeImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64, unknown3: FilterTypes, unknown4: float64) -> u32 #foreign libgraphicsmagickwand;

MagickRollImage :: (unknown0: *MagickWand, unknown1: s64, unknown2: s64) -> u32 #foreign libgraphicsmagickwand;
MagickRotateImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSampleImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64) -> u32 #foreign libgraphicsmagickwand;
MagickScaleImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSeparateImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType) -> u32 #foreign libgraphicsmagickwand;
MagickSetCompressionQuality :: (wand: *MagickWand, quality: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetFilename :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetFormat :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImage :: (unknown0: *MagickWand, unknown1: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageAttribute :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageBackgroundColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageBluePrimary :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageBorderColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageChannelDepth :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: u64) -> u32 #foreign libgraphicsmagickwand;

MagickSetImageColormapColor :: (unknown0: *MagickWand, unknown1: u64, unknown2: *PixelWand) -> u32 #foreign libgraphicsmagickwand;

MagickSetImageCompose :: (unknown0: *MagickWand, unknown1: CompositeOperator) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageCompression :: (unknown0: *MagickWand, unknown1: CompressionType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageDelay :: (unknown0: *MagickWand, unknown1: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageDepth :: (unknown0: *MagickWand, unknown1: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageDispose :: (unknown0: *MagickWand, unknown1: DisposeType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageColorspace :: (unknown0: *MagickWand, unknown1: ColorspaceType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageGreenPrimary :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageGamma :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageGeometry :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageGravity :: (unknown0: *MagickWand, unknown1: GravityType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageFilename :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageFormat :: (wand: *MagickWand, format: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageFuzz :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageIndex :: (unknown0: *MagickWand, unknown1: s64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageInterlaceScheme :: (unknown0: *MagickWand, unknown1: InterlaceType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageIterations :: (unknown0: *MagickWand, unknown1: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageMatte :: (unknown0: *MagickWand, unknown1: u32) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageMatteColor :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageOption :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u8, unknown3: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageOrientation :: (unknown0: *MagickWand, unknown1: OrientationType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImagePage :: (wand: *MagickWand, width: u64, height: u64, x: s64, y: s64) -> u32 #foreign libgraphicsmagickwand;

MagickSetImagePixels :: (unknown0: *MagickWand, unknown1: s64, unknown2: s64, unknown3: u64, unknown4: u64, unknown5: *u8, unknown6: StorageType, unknown7: *u8) -> u32 #foreign libgraphicsmagickwand;

MagickSetImageRedPrimary :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageRenderingIntent :: (unknown0: *MagickWand, unknown1: RenderingIntent) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageResolution :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageScene :: (unknown0: *MagickWand, unknown1: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageType :: (unknown0: *MagickWand, unknown1: ImageType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageSavedType :: (unknown0: *MagickWand, unknown1: ImageType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageUnits :: (unknown0: *MagickWand, unknown1: ResolutionType) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageVirtualPixelMethod :: (unknown0: *MagickWand, unknown1: VirtualPixelMethod) -> u32 #foreign libgraphicsmagickwand;
MagickSetPassphrase :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageProfile :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u8, unknown3: u64) -> u32 #foreign libgraphicsmagickwand;

MagickSetResolution :: (wand: *MagickWand, x_resolution: float64, y_resolution: float64) -> u32 #foreign libgraphicsmagickwand;

MagickSetResolutionUnits :: (wand: *MagickWand, units: ResolutionType) -> u32 #foreign libgraphicsmagickwand;
MagickSetResourceLimit :: (type: ResourceType, limit: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetSamplingFactors :: (unknown0: *MagickWand, unknown1: u64, unknown2: *float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetSize :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64) -> u32 #foreign libgraphicsmagickwand;
MagickSetImageWhitePoint :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSetInterlaceScheme :: (unknown0: *MagickWand, unknown1: InterlaceType) -> u32 #foreign libgraphicsmagickwand;
MagickSharpenImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickShaveImage :: (unknown0: *MagickWand, unknown1: u64, unknown2: u64) -> u32 #foreign libgraphicsmagickwand;
MagickShearImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: float64, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSolarizeImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickSpreadImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickStripImage :: (unknown0: *MagickWand) -> u32 #foreign libgraphicsmagickwand;
MagickSwirlImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickTintImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickThresholdImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickThresholdImageChannel :: (unknown0: *MagickWand, unknown1: ChannelType, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickTransparentImage :: (unknown0: *MagickWand, unknown1: *PixelWand, unknown2: Quantum, unknown3: float64) -> u32 #foreign libgraphicsmagickwand;

MagickTrimImage :: (unknown0: *MagickWand, unknown1: float64) -> u32 #foreign libgraphicsmagickwand;
MagickUnsharpMaskImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64, unknown3: float64, unknown4: float64) -> u32 #foreign libgraphicsmagickwand;

MagickWaveImage :: (unknown0: *MagickWand, unknown1: float64, unknown2: float64) -> u32 #foreign libgraphicsmagickwand;
MagickWhiteThresholdImage :: (unknown0: *MagickWand, unknown1: *PixelWand) -> u32 #foreign libgraphicsmagickwand;
MagickWriteImage :: (unknown0: *MagickWand, unknown1: *u8) -> u32 #foreign libgraphicsmagickwand;
MagickWriteImageFile :: (unknown0: *MagickWand, unknown1: *FILE) -> u32 #foreign libgraphicsmagickwand;
MagickWriteImagesFile :: (unknown0: *MagickWand, unknown1: *FILE, unknown2: u32) -> u32 #foreign libgraphicsmagickwand;
MagickWriteImages :: (unknown0: *MagickWand, unknown1: *u8, unknown2: u32) -> u32 #foreign libgraphicsmagickwand;

MagickGetImageColors :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageDelay :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageChannelDepth :: (unknown0: *MagickWand, unknown1: ChannelType) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageDepth :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageHeight :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageIterations :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageScene :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetImageWidth :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetNumberImages :: (unknown0: *MagickWand) -> u64 #foreign libgraphicsmagickwand;
MagickGetResourceLimit :: (unknown0: ResourceType) -> u64 #foreign libgraphicsmagickwand;

MagickGetImageVirtualPixelMethod :: (unknown0: *MagickWand) -> VirtualPixelMethod #foreign libgraphicsmagickwand;

MagickGetImageProfile :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u64) -> *u8 #foreign libgraphicsmagickwand;
MagickRemoveImageProfile :: (unknown0: *MagickWand, unknown1: *u8, unknown2: *u64) -> *u8 #foreign libgraphicsmagickwand;
MagickWriteImageBlob :: (unknown0: *MagickWand, unknown1: *u64) -> *u8 #foreign libgraphicsmagickwand;

MagickClearException :: (unknown0: *MagickWand) -> void #foreign libgraphicsmagickwand;
MagickResetIterator :: (unknown0: *MagickWand) -> void #foreign libgraphicsmagickwand;

#scope_file

#import "Basic"; // For assert


#run {
    {
        instance: _ExceptionInfo;
        assert(((cast(*void)(*instance.severity)) - cast(*void)(*instance)) == 0, "_ExceptionInfo.severity has unexpected offset % instead of 0", ((cast(*void)(*instance.severity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.severity)) == 4, "_ExceptionInfo.severity has unexpected size % instead of 4", size_of(type_of(_ExceptionInfo.severity)));
        assert(((cast(*void)(*instance.reason)) - cast(*void)(*instance)) == 8, "_ExceptionInfo.reason has unexpected offset % instead of 8", ((cast(*void)(*instance.reason)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.reason)) == 8, "_ExceptionInfo.reason has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.reason)));
        assert(((cast(*void)(*instance.description)) - cast(*void)(*instance)) == 16, "_ExceptionInfo.description has unexpected offset % instead of 16", ((cast(*void)(*instance.description)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.description)) == 8, "_ExceptionInfo.description has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.description)));
        assert(((cast(*void)(*instance.error_number)) - cast(*void)(*instance)) == 24, "_ExceptionInfo.error_number has unexpected offset % instead of 24", ((cast(*void)(*instance.error_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.error_number)) == 4, "_ExceptionInfo.error_number has unexpected size % instead of 4", size_of(type_of(_ExceptionInfo.error_number)));
        assert(((cast(*void)(*instance.module)) - cast(*void)(*instance)) == 32, "_ExceptionInfo.module has unexpected offset % instead of 32", ((cast(*void)(*instance.module)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.module)) == 8, "_ExceptionInfo.module has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.module)));
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 40, "_ExceptionInfo.function has unexpected offset % instead of 40", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.function)) == 8, "_ExceptionInfo.function has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.function)));
        assert(((cast(*void)(*instance.line)) - cast(*void)(*instance)) == 48, "_ExceptionInfo.line has unexpected offset % instead of 48", ((cast(*void)(*instance.line)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.line)) == 8, "_ExceptionInfo.line has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.line)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 56, "_ExceptionInfo.signature has unexpected offset % instead of 56", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExceptionInfo.signature)) == 8, "_ExceptionInfo.signature has unexpected size % instead of 8", size_of(type_of(_ExceptionInfo.signature)));
        assert(size_of(_ExceptionInfo) == 64, "_ExceptionInfo has size % instead of 64", size_of(_ExceptionInfo));
    }

    {
        instance: _Timer;
        assert(((cast(*void)(*instance.start)) - cast(*void)(*instance)) == 0, "_Timer.start has unexpected offset % instead of 0", ((cast(*void)(*instance.start)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Timer.start)) == 8, "_Timer.start has unexpected size % instead of 8", size_of(type_of(_Timer.start)));
        assert(((cast(*void)(*instance.stop)) - cast(*void)(*instance)) == 8, "_Timer.stop has unexpected offset % instead of 8", ((cast(*void)(*instance.stop)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Timer.stop)) == 8, "_Timer.stop has unexpected size % instead of 8", size_of(type_of(_Timer.stop)));
        assert(((cast(*void)(*instance.total)) - cast(*void)(*instance)) == 16, "_Timer.total has unexpected offset % instead of 16", ((cast(*void)(*instance.total)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Timer.total)) == 8, "_Timer.total has unexpected size % instead of 8", size_of(type_of(_Timer.total)));
        assert(size_of(_Timer) == 24, "_Timer has size % instead of 24", size_of(_Timer));
    }

    {
        instance: _TimerInfo;
        assert(((cast(*void)(*instance.user)) - cast(*void)(*instance)) == 0, "_TimerInfo.user has unexpected offset % instead of 0", ((cast(*void)(*instance.user)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TimerInfo.user)) == 24, "_TimerInfo.user has unexpected size % instead of 24", size_of(type_of(_TimerInfo.user)));
        assert(((cast(*void)(*instance.elapsed)) - cast(*void)(*instance)) == 24, "_TimerInfo.elapsed has unexpected offset % instead of 24", ((cast(*void)(*instance.elapsed)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TimerInfo.elapsed)) == 24, "_TimerInfo.elapsed has unexpected size % instead of 24", size_of(type_of(_TimerInfo.elapsed)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 48, "_TimerInfo.state has unexpected offset % instead of 48", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TimerInfo.state)) == 4, "_TimerInfo.state has unexpected size % instead of 4", size_of(type_of(_TimerInfo.state)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 56, "_TimerInfo.signature has unexpected offset % instead of 56", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TimerInfo.signature)) == 8, "_TimerInfo.signature has unexpected size % instead of 8", size_of(type_of(_TimerInfo.signature)));
        assert(size_of(_TimerInfo) == 64, "_TimerInfo has size % instead of 64", size_of(_TimerInfo));
    }

    {
        instance: _AffineMatrix;
        assert(((cast(*void)(*instance.sx)) - cast(*void)(*instance)) == 0, "_AffineMatrix.sx has unexpected offset % instead of 0", ((cast(*void)(*instance.sx)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.sx)) == 8, "_AffineMatrix.sx has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.sx)));
        assert(((cast(*void)(*instance.rx)) - cast(*void)(*instance)) == 8, "_AffineMatrix.rx has unexpected offset % instead of 8", ((cast(*void)(*instance.rx)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.rx)) == 8, "_AffineMatrix.rx has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.rx)));
        assert(((cast(*void)(*instance.ry)) - cast(*void)(*instance)) == 16, "_AffineMatrix.ry has unexpected offset % instead of 16", ((cast(*void)(*instance.ry)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.ry)) == 8, "_AffineMatrix.ry has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.ry)));
        assert(((cast(*void)(*instance.sy)) - cast(*void)(*instance)) == 24, "_AffineMatrix.sy has unexpected offset % instead of 24", ((cast(*void)(*instance.sy)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.sy)) == 8, "_AffineMatrix.sy has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.sy)));
        assert(((cast(*void)(*instance.tx)) - cast(*void)(*instance)) == 32, "_AffineMatrix.tx has unexpected offset % instead of 32", ((cast(*void)(*instance.tx)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.tx)) == 8, "_AffineMatrix.tx has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.tx)));
        assert(((cast(*void)(*instance.ty)) - cast(*void)(*instance)) == 40, "_AffineMatrix.ty has unexpected offset % instead of 40", ((cast(*void)(*instance.ty)) - cast(*void)(*instance)));
        assert(size_of(type_of(_AffineMatrix.ty)) == 8, "_AffineMatrix.ty has unexpected size % instead of 8", size_of(type_of(_AffineMatrix.ty)));
        assert(size_of(_AffineMatrix) == 48, "_AffineMatrix has size % instead of 48", size_of(_AffineMatrix));
    }

    {
        instance: _PrimaryInfo;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "_PrimaryInfo.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PrimaryInfo.x)) == 8, "_PrimaryInfo.x has unexpected size % instead of 8", size_of(type_of(_PrimaryInfo.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "_PrimaryInfo.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PrimaryInfo.y)) == 8, "_PrimaryInfo.y has unexpected size % instead of 8", size_of(type_of(_PrimaryInfo.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 16, "_PrimaryInfo.z has unexpected offset % instead of 16", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PrimaryInfo.z)) == 8, "_PrimaryInfo.z has unexpected size % instead of 8", size_of(type_of(_PrimaryInfo.z)));
        assert(size_of(_PrimaryInfo) == 24, "_PrimaryInfo has size % instead of 24", size_of(_PrimaryInfo));
    }

    {
        instance: _ChromaticityInfo;
        assert(((cast(*void)(*instance.red_primary)) - cast(*void)(*instance)) == 0, "_ChromaticityInfo.red_primary has unexpected offset % instead of 0", ((cast(*void)(*instance.red_primary)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ChromaticityInfo.red_primary)) == 24, "_ChromaticityInfo.red_primary has unexpected size % instead of 24", size_of(type_of(_ChromaticityInfo.red_primary)));
        assert(((cast(*void)(*instance.green_primary)) - cast(*void)(*instance)) == 24, "_ChromaticityInfo.green_primary has unexpected offset % instead of 24", ((cast(*void)(*instance.green_primary)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ChromaticityInfo.green_primary)) == 24, "_ChromaticityInfo.green_primary has unexpected size % instead of 24", size_of(type_of(_ChromaticityInfo.green_primary)));
        assert(((cast(*void)(*instance.blue_primary)) - cast(*void)(*instance)) == 48, "_ChromaticityInfo.blue_primary has unexpected offset % instead of 48", ((cast(*void)(*instance.blue_primary)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ChromaticityInfo.blue_primary)) == 24, "_ChromaticityInfo.blue_primary has unexpected size % instead of 24", size_of(type_of(_ChromaticityInfo.blue_primary)));
        assert(((cast(*void)(*instance.white_point)) - cast(*void)(*instance)) == 72, "_ChromaticityInfo.white_point has unexpected offset % instead of 72", ((cast(*void)(*instance.white_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ChromaticityInfo.white_point)) == 24, "_ChromaticityInfo.white_point has unexpected size % instead of 24", size_of(type_of(_ChromaticityInfo.white_point)));
        assert(size_of(_ChromaticityInfo) == 96, "_ChromaticityInfo has size % instead of 96", size_of(_ChromaticityInfo));
    }

    {
        instance: _PixelPacket;
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 0, "_PixelPacket.blue has unexpected offset % instead of 0", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelPacket.blue)) == 1, "_PixelPacket.blue has unexpected size % instead of 1", size_of(type_of(_PixelPacket.blue)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 1, "_PixelPacket.green has unexpected offset % instead of 1", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelPacket.green)) == 1, "_PixelPacket.green has unexpected size % instead of 1", size_of(type_of(_PixelPacket.green)));
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 2, "_PixelPacket.red has unexpected offset % instead of 2", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelPacket.red)) == 1, "_PixelPacket.red has unexpected size % instead of 1", size_of(type_of(_PixelPacket.red)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 3, "_PixelPacket.opacity has unexpected offset % instead of 3", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelPacket.opacity)) == 1, "_PixelPacket.opacity has unexpected size % instead of 1", size_of(type_of(_PixelPacket.opacity)));
        assert(size_of(_PixelPacket) == 4, "_PixelPacket has size % instead of 4", size_of(_PixelPacket));
    }

    {
        instance: _DoublePixelPacket;
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 0, "_DoublePixelPacket.red has unexpected offset % instead of 0", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DoublePixelPacket.red)) == 8, "_DoublePixelPacket.red has unexpected size % instead of 8", size_of(type_of(_DoublePixelPacket.red)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 8, "_DoublePixelPacket.green has unexpected offset % instead of 8", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DoublePixelPacket.green)) == 8, "_DoublePixelPacket.green has unexpected size % instead of 8", size_of(type_of(_DoublePixelPacket.green)));
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 16, "_DoublePixelPacket.blue has unexpected offset % instead of 16", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DoublePixelPacket.blue)) == 8, "_DoublePixelPacket.blue has unexpected size % instead of 8", size_of(type_of(_DoublePixelPacket.blue)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 24, "_DoublePixelPacket.opacity has unexpected offset % instead of 24", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DoublePixelPacket.opacity)) == 8, "_DoublePixelPacket.opacity has unexpected size % instead of 8", size_of(type_of(_DoublePixelPacket.opacity)));
        assert(size_of(_DoublePixelPacket) == 32, "_DoublePixelPacket has size % instead of 32", size_of(_DoublePixelPacket));
    }

    {
        instance: _FloatPixelPacket;
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 0, "_FloatPixelPacket.red has unexpected offset % instead of 0", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FloatPixelPacket.red)) == 4, "_FloatPixelPacket.red has unexpected size % instead of 4", size_of(type_of(_FloatPixelPacket.red)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 4, "_FloatPixelPacket.green has unexpected offset % instead of 4", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FloatPixelPacket.green)) == 4, "_FloatPixelPacket.green has unexpected size % instead of 4", size_of(type_of(_FloatPixelPacket.green)));
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 8, "_FloatPixelPacket.blue has unexpected offset % instead of 8", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FloatPixelPacket.blue)) == 4, "_FloatPixelPacket.blue has unexpected size % instead of 4", size_of(type_of(_FloatPixelPacket.blue)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 12, "_FloatPixelPacket.opacity has unexpected offset % instead of 12", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FloatPixelPacket.opacity)) == 4, "_FloatPixelPacket.opacity has unexpected size % instead of 4", size_of(type_of(_FloatPixelPacket.opacity)));
        assert(size_of(_FloatPixelPacket) == 16, "_FloatPixelPacket has size % instead of 16", size_of(_FloatPixelPacket));
    }

    {
        instance: _ErrorInfo;
        assert(((cast(*void)(*instance.mean_error_per_pixel)) - cast(*void)(*instance)) == 0, "_ErrorInfo.mean_error_per_pixel has unexpected offset % instead of 0", ((cast(*void)(*instance.mean_error_per_pixel)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ErrorInfo.mean_error_per_pixel)) == 8, "_ErrorInfo.mean_error_per_pixel has unexpected size % instead of 8", size_of(type_of(_ErrorInfo.mean_error_per_pixel)));
        assert(((cast(*void)(*instance.normalized_mean_error)) - cast(*void)(*instance)) == 8, "_ErrorInfo.normalized_mean_error has unexpected offset % instead of 8", ((cast(*void)(*instance.normalized_mean_error)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ErrorInfo.normalized_mean_error)) == 8, "_ErrorInfo.normalized_mean_error has unexpected size % instead of 8", size_of(type_of(_ErrorInfo.normalized_mean_error)));
        assert(((cast(*void)(*instance.normalized_maximum_error)) - cast(*void)(*instance)) == 16, "_ErrorInfo.normalized_maximum_error has unexpected offset % instead of 16", ((cast(*void)(*instance.normalized_maximum_error)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ErrorInfo.normalized_maximum_error)) == 8, "_ErrorInfo.normalized_maximum_error has unexpected size % instead of 8", size_of(type_of(_ErrorInfo.normalized_maximum_error)));
        assert(size_of(_ErrorInfo) == 24, "_ErrorInfo has size % instead of 24", size_of(_ErrorInfo));
    }

    {
        instance: _FrameInfo;
        assert(((cast(*void)(*instance.width)) - cast(*void)(*instance)) == 0, "_FrameInfo.width has unexpected offset % instead of 0", ((cast(*void)(*instance.width)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.width)) == 8, "_FrameInfo.width has unexpected size % instead of 8", size_of(type_of(_FrameInfo.width)));
        assert(((cast(*void)(*instance.height)) - cast(*void)(*instance)) == 8, "_FrameInfo.height has unexpected offset % instead of 8", ((cast(*void)(*instance.height)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.height)) == 8, "_FrameInfo.height has unexpected size % instead of 8", size_of(type_of(_FrameInfo.height)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "_FrameInfo.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.x)) == 8, "_FrameInfo.x has unexpected size % instead of 8", size_of(type_of(_FrameInfo.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 24, "_FrameInfo.y has unexpected offset % instead of 24", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.y)) == 8, "_FrameInfo.y has unexpected size % instead of 8", size_of(type_of(_FrameInfo.y)));
        assert(((cast(*void)(*instance.inner_bevel)) - cast(*void)(*instance)) == 32, "_FrameInfo.inner_bevel has unexpected offset % instead of 32", ((cast(*void)(*instance.inner_bevel)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.inner_bevel)) == 8, "_FrameInfo.inner_bevel has unexpected size % instead of 8", size_of(type_of(_FrameInfo.inner_bevel)));
        assert(((cast(*void)(*instance.outer_bevel)) - cast(*void)(*instance)) == 40, "_FrameInfo.outer_bevel has unexpected offset % instead of 40", ((cast(*void)(*instance.outer_bevel)) - cast(*void)(*instance)));
        assert(size_of(type_of(_FrameInfo.outer_bevel)) == 8, "_FrameInfo.outer_bevel has unexpected size % instead of 8", size_of(type_of(_FrameInfo.outer_bevel)));
        assert(size_of(_FrameInfo) == 48, "_FrameInfo has size % instead of 48", size_of(_FrameInfo));
    }

    {
        instance: _LongPixelPacket;
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 0, "_LongPixelPacket.red has unexpected offset % instead of 0", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_LongPixelPacket.red)) == 8, "_LongPixelPacket.red has unexpected size % instead of 8", size_of(type_of(_LongPixelPacket.red)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 8, "_LongPixelPacket.green has unexpected offset % instead of 8", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_LongPixelPacket.green)) == 8, "_LongPixelPacket.green has unexpected size % instead of 8", size_of(type_of(_LongPixelPacket.green)));
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 16, "_LongPixelPacket.blue has unexpected offset % instead of 16", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_LongPixelPacket.blue)) == 8, "_LongPixelPacket.blue has unexpected size % instead of 8", size_of(type_of(_LongPixelPacket.blue)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 24, "_LongPixelPacket.opacity has unexpected offset % instead of 24", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_LongPixelPacket.opacity)) == 8, "_LongPixelPacket.opacity has unexpected size % instead of 8", size_of(type_of(_LongPixelPacket.opacity)));
        assert(size_of(_LongPixelPacket) == 32, "_LongPixelPacket has size % instead of 32", size_of(_LongPixelPacket));
    }

    {
        instance: _MontageInfo;
        assert(((cast(*void)(*instance.geometry)) - cast(*void)(*instance)) == 0, "_MontageInfo.geometry has unexpected offset % instead of 0", ((cast(*void)(*instance.geometry)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.geometry)) == 8, "_MontageInfo.geometry has unexpected size % instead of 8", size_of(type_of(_MontageInfo.geometry)));
        assert(((cast(*void)(*instance.tile)) - cast(*void)(*instance)) == 8, "_MontageInfo.tile has unexpected offset % instead of 8", ((cast(*void)(*instance.tile)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.tile)) == 8, "_MontageInfo.tile has unexpected size % instead of 8", size_of(type_of(_MontageInfo.tile)));
        assert(((cast(*void)(*instance.title)) - cast(*void)(*instance)) == 16, "_MontageInfo.title has unexpected offset % instead of 16", ((cast(*void)(*instance.title)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.title)) == 8, "_MontageInfo.title has unexpected size % instead of 8", size_of(type_of(_MontageInfo.title)));
        assert(((cast(*void)(*instance.frame)) - cast(*void)(*instance)) == 24, "_MontageInfo.frame has unexpected offset % instead of 24", ((cast(*void)(*instance.frame)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.frame)) == 8, "_MontageInfo.frame has unexpected size % instead of 8", size_of(type_of(_MontageInfo.frame)));
        assert(((cast(*void)(*instance.texture)) - cast(*void)(*instance)) == 32, "_MontageInfo.texture has unexpected offset % instead of 32", ((cast(*void)(*instance.texture)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.texture)) == 8, "_MontageInfo.texture has unexpected size % instead of 8", size_of(type_of(_MontageInfo.texture)));
        assert(((cast(*void)(*instance.font)) - cast(*void)(*instance)) == 40, "_MontageInfo.font has unexpected offset % instead of 40", ((cast(*void)(*instance.font)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.font)) == 8, "_MontageInfo.font has unexpected size % instead of 8", size_of(type_of(_MontageInfo.font)));
        assert(((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)) == 48, "_MontageInfo.pointsize has unexpected offset % instead of 48", ((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.pointsize)) == 8, "_MontageInfo.pointsize has unexpected size % instead of 8", size_of(type_of(_MontageInfo.pointsize)));
        assert(((cast(*void)(*instance.border_width)) - cast(*void)(*instance)) == 56, "_MontageInfo.border_width has unexpected offset % instead of 56", ((cast(*void)(*instance.border_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.border_width)) == 8, "_MontageInfo.border_width has unexpected size % instead of 8", size_of(type_of(_MontageInfo.border_width)));
        assert(((cast(*void)(*instance.shadow)) - cast(*void)(*instance)) == 64, "_MontageInfo.shadow has unexpected offset % instead of 64", ((cast(*void)(*instance.shadow)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.shadow)) == 4, "_MontageInfo.shadow has unexpected size % instead of 4", size_of(type_of(_MontageInfo.shadow)));
        assert(((cast(*void)(*instance.fill)) - cast(*void)(*instance)) == 68, "_MontageInfo.fill has unexpected offset % instead of 68", ((cast(*void)(*instance.fill)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.fill)) == 4, "_MontageInfo.fill has unexpected size % instead of 4", size_of(type_of(_MontageInfo.fill)));
        assert(((cast(*void)(*instance.stroke)) - cast(*void)(*instance)) == 72, "_MontageInfo.stroke has unexpected offset % instead of 72", ((cast(*void)(*instance.stroke)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.stroke)) == 4, "_MontageInfo.stroke has unexpected size % instead of 4", size_of(type_of(_MontageInfo.stroke)));
        assert(((cast(*void)(*instance.background_color)) - cast(*void)(*instance)) == 76, "_MontageInfo.background_color has unexpected offset % instead of 76", ((cast(*void)(*instance.background_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.background_color)) == 4, "_MontageInfo.background_color has unexpected size % instead of 4", size_of(type_of(_MontageInfo.background_color)));
        assert(((cast(*void)(*instance.border_color)) - cast(*void)(*instance)) == 80, "_MontageInfo.border_color has unexpected offset % instead of 80", ((cast(*void)(*instance.border_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.border_color)) == 4, "_MontageInfo.border_color has unexpected size % instead of 4", size_of(type_of(_MontageInfo.border_color)));
        assert(((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)) == 84, "_MontageInfo.matte_color has unexpected offset % instead of 84", ((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.matte_color)) == 4, "_MontageInfo.matte_color has unexpected size % instead of 4", size_of(type_of(_MontageInfo.matte_color)));
        assert(((cast(*void)(*instance.gravity)) - cast(*void)(*instance)) == 88, "_MontageInfo.gravity has unexpected offset % instead of 88", ((cast(*void)(*instance.gravity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.gravity)) == 4, "_MontageInfo.gravity has unexpected size % instead of 4", size_of(type_of(_MontageInfo.gravity)));
        assert(((cast(*void)(*instance.filename)) - cast(*void)(*instance)) == 92, "_MontageInfo.filename has unexpected offset % instead of 92", ((cast(*void)(*instance.filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.filename)) == 2053, "_MontageInfo.filename has unexpected size % instead of 2053", size_of(type_of(_MontageInfo.filename)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 2152, "_MontageInfo.signature has unexpected offset % instead of 2152", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MontageInfo.signature)) == 8, "_MontageInfo.signature has unexpected size % instead of 8", size_of(type_of(_MontageInfo.signature)));
        assert(size_of(_MontageInfo) == 2160, "_MontageInfo has size % instead of 2160", size_of(_MontageInfo));
    }

    {
        instance: _ProfileInfo;
        assert(((cast(*void)(*instance.length)) - cast(*void)(*instance)) == 0, "_ProfileInfo.length has unexpected offset % instead of 0", ((cast(*void)(*instance.length)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ProfileInfo.length)) == 8, "_ProfileInfo.length has unexpected size % instead of 8", size_of(type_of(_ProfileInfo.length)));
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 8, "_ProfileInfo.name has unexpected offset % instead of 8", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ProfileInfo.name)) == 8, "_ProfileInfo.name has unexpected size % instead of 8", size_of(type_of(_ProfileInfo.name)));
        assert(((cast(*void)(*instance.info)) - cast(*void)(*instance)) == 16, "_ProfileInfo.info has unexpected offset % instead of 16", ((cast(*void)(*instance.info)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ProfileInfo.info)) == 8, "_ProfileInfo.info has unexpected size % instead of 8", size_of(type_of(_ProfileInfo.info)));
        assert(size_of(_ProfileInfo) == 24, "_ProfileInfo has size % instead of 24", size_of(_ProfileInfo));
    }

    {
        instance: _RectangleInfo;
        assert(((cast(*void)(*instance.width)) - cast(*void)(*instance)) == 0, "_RectangleInfo.width has unexpected offset % instead of 0", ((cast(*void)(*instance.width)) - cast(*void)(*instance)));
        assert(size_of(type_of(_RectangleInfo.width)) == 8, "_RectangleInfo.width has unexpected size % instead of 8", size_of(type_of(_RectangleInfo.width)));
        assert(((cast(*void)(*instance.height)) - cast(*void)(*instance)) == 8, "_RectangleInfo.height has unexpected offset % instead of 8", ((cast(*void)(*instance.height)) - cast(*void)(*instance)));
        assert(size_of(type_of(_RectangleInfo.height)) == 8, "_RectangleInfo.height has unexpected size % instead of 8", size_of(type_of(_RectangleInfo.height)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "_RectangleInfo.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(_RectangleInfo.x)) == 8, "_RectangleInfo.x has unexpected size % instead of 8", size_of(type_of(_RectangleInfo.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 24, "_RectangleInfo.y has unexpected offset % instead of 24", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(_RectangleInfo.y)) == 8, "_RectangleInfo.y has unexpected size % instead of 8", size_of(type_of(_RectangleInfo.y)));
        assert(size_of(_RectangleInfo) == 32, "_RectangleInfo has size % instead of 32", size_of(_RectangleInfo));
    }

    {
        instance: _SegmentInfo;
        assert(((cast(*void)(*instance.x1)) - cast(*void)(*instance)) == 0, "_SegmentInfo.x1 has unexpected offset % instead of 0", ((cast(*void)(*instance.x1)) - cast(*void)(*instance)));
        assert(size_of(type_of(_SegmentInfo.x1)) == 8, "_SegmentInfo.x1 has unexpected size % instead of 8", size_of(type_of(_SegmentInfo.x1)));
        assert(((cast(*void)(*instance.y1)) - cast(*void)(*instance)) == 8, "_SegmentInfo.y1 has unexpected offset % instead of 8", ((cast(*void)(*instance.y1)) - cast(*void)(*instance)));
        assert(size_of(type_of(_SegmentInfo.y1)) == 8, "_SegmentInfo.y1 has unexpected size % instead of 8", size_of(type_of(_SegmentInfo.y1)));
        assert(((cast(*void)(*instance.x2)) - cast(*void)(*instance)) == 16, "_SegmentInfo.x2 has unexpected offset % instead of 16", ((cast(*void)(*instance.x2)) - cast(*void)(*instance)));
        assert(size_of(type_of(_SegmentInfo.x2)) == 8, "_SegmentInfo.x2 has unexpected size % instead of 8", size_of(type_of(_SegmentInfo.x2)));
        assert(((cast(*void)(*instance.y2)) - cast(*void)(*instance)) == 24, "_SegmentInfo.y2 has unexpected offset % instead of 24", ((cast(*void)(*instance.y2)) - cast(*void)(*instance)));
        assert(size_of(type_of(_SegmentInfo.y2)) == 8, "_SegmentInfo.y2 has unexpected size % instead of 8", size_of(type_of(_SegmentInfo.y2)));
        assert(size_of(_SegmentInfo) == 32, "_SegmentInfo has size % instead of 32", size_of(_SegmentInfo));
    }

    {
        instance: _Image;
        assert(((cast(*void)(*instance.storage_class)) - cast(*void)(*instance)) == 0, "_Image.storage_class has unexpected offset % instead of 0", ((cast(*void)(*instance.storage_class)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.storage_class)) == 4, "_Image.storage_class has unexpected size % instead of 4", size_of(type_of(_Image.storage_class)));
        assert(((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)) == 4, "_Image.colorspace has unexpected offset % instead of 4", ((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.colorspace)) == 4, "_Image.colorspace has unexpected size % instead of 4", size_of(type_of(_Image.colorspace)));
        assert(((cast(*void)(*instance.compression)) - cast(*void)(*instance)) == 8, "_Image.compression has unexpected offset % instead of 8", ((cast(*void)(*instance.compression)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.compression)) == 4, "_Image.compression has unexpected size % instead of 4", size_of(type_of(_Image.compression)));
        assert(((cast(*void)(*instance.dither)) - cast(*void)(*instance)) == 12, "_Image.dither has unexpected offset % instead of 12", ((cast(*void)(*instance.dither)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.dither)) == 4, "_Image.dither has unexpected size % instead of 4", size_of(type_of(_Image.dither)));
        assert(((cast(*void)(*instance.matte)) - cast(*void)(*instance)) == 16, "_Image.matte has unexpected offset % instead of 16", ((cast(*void)(*instance.matte)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.matte)) == 4, "_Image.matte has unexpected size % instead of 4", size_of(type_of(_Image.matte)));
        assert(((cast(*void)(*instance.columns)) - cast(*void)(*instance)) == 24, "_Image.columns has unexpected offset % instead of 24", ((cast(*void)(*instance.columns)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.columns)) == 8, "_Image.columns has unexpected size % instead of 8", size_of(type_of(_Image.columns)));
        assert(((cast(*void)(*instance.rows)) - cast(*void)(*instance)) == 32, "_Image.rows has unexpected offset % instead of 32", ((cast(*void)(*instance.rows)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.rows)) == 8, "_Image.rows has unexpected size % instead of 8", size_of(type_of(_Image.rows)));
        assert(((cast(*void)(*instance.colors)) - cast(*void)(*instance)) == 40, "_Image.colors has unexpected offset % instead of 40", ((cast(*void)(*instance.colors)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.colors)) == 4, "_Image.colors has unexpected size % instead of 4", size_of(type_of(_Image.colors)));
        assert(((cast(*void)(*instance.depth)) - cast(*void)(*instance)) == 44, "_Image.depth has unexpected offset % instead of 44", ((cast(*void)(*instance.depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.depth)) == 4, "_Image.depth has unexpected size % instead of 4", size_of(type_of(_Image.depth)));
        assert(((cast(*void)(*instance.colormap)) - cast(*void)(*instance)) == 48, "_Image.colormap has unexpected offset % instead of 48", ((cast(*void)(*instance.colormap)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.colormap)) == 8, "_Image.colormap has unexpected size % instead of 8", size_of(type_of(_Image.colormap)));
        assert(((cast(*void)(*instance.background_color)) - cast(*void)(*instance)) == 56, "_Image.background_color has unexpected offset % instead of 56", ((cast(*void)(*instance.background_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.background_color)) == 4, "_Image.background_color has unexpected size % instead of 4", size_of(type_of(_Image.background_color)));
        assert(((cast(*void)(*instance.border_color)) - cast(*void)(*instance)) == 60, "_Image.border_color has unexpected offset % instead of 60", ((cast(*void)(*instance.border_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.border_color)) == 4, "_Image.border_color has unexpected size % instead of 4", size_of(type_of(_Image.border_color)));
        assert(((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)) == 64, "_Image.matte_color has unexpected offset % instead of 64", ((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.matte_color)) == 4, "_Image.matte_color has unexpected size % instead of 4", size_of(type_of(_Image.matte_color)));
        assert(((cast(*void)(*instance.gamma)) - cast(*void)(*instance)) == 72, "_Image.gamma has unexpected offset % instead of 72", ((cast(*void)(*instance.gamma)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.gamma)) == 8, "_Image.gamma has unexpected size % instead of 8", size_of(type_of(_Image.gamma)));
        assert(((cast(*void)(*instance.chromaticity)) - cast(*void)(*instance)) == 80, "_Image.chromaticity has unexpected offset % instead of 80", ((cast(*void)(*instance.chromaticity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.chromaticity)) == 96, "_Image.chromaticity has unexpected size % instead of 96", size_of(type_of(_Image.chromaticity)));
        assert(((cast(*void)(*instance.orientation)) - cast(*void)(*instance)) == 176, "_Image.orientation has unexpected offset % instead of 176", ((cast(*void)(*instance.orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.orientation)) == 4, "_Image.orientation has unexpected size % instead of 4", size_of(type_of(_Image.orientation)));
        assert(((cast(*void)(*instance.rendering_intent)) - cast(*void)(*instance)) == 180, "_Image.rendering_intent has unexpected offset % instead of 180", ((cast(*void)(*instance.rendering_intent)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.rendering_intent)) == 4, "_Image.rendering_intent has unexpected size % instead of 4", size_of(type_of(_Image.rendering_intent)));
        assert(((cast(*void)(*instance.units)) - cast(*void)(*instance)) == 184, "_Image.units has unexpected offset % instead of 184", ((cast(*void)(*instance.units)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.units)) == 4, "_Image.units has unexpected size % instead of 4", size_of(type_of(_Image.units)));
        assert(((cast(*void)(*instance.montage)) - cast(*void)(*instance)) == 192, "_Image.montage has unexpected offset % instead of 192", ((cast(*void)(*instance.montage)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.montage)) == 8, "_Image.montage has unexpected size % instead of 8", size_of(type_of(_Image.montage)));
        assert(((cast(*void)(*instance.directory)) - cast(*void)(*instance)) == 200, "_Image.directory has unexpected offset % instead of 200", ((cast(*void)(*instance.directory)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.directory)) == 8, "_Image.directory has unexpected size % instead of 8", size_of(type_of(_Image.directory)));
        assert(((cast(*void)(*instance.geometry)) - cast(*void)(*instance)) == 208, "_Image.geometry has unexpected offset % instead of 208", ((cast(*void)(*instance.geometry)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.geometry)) == 8, "_Image.geometry has unexpected size % instead of 8", size_of(type_of(_Image.geometry)));
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 216, "_Image.offset has unexpected offset % instead of 216", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.offset)) == 8, "_Image.offset has unexpected size % instead of 8", size_of(type_of(_Image.offset)));
        assert(((cast(*void)(*instance.x_resolution)) - cast(*void)(*instance)) == 224, "_Image.x_resolution has unexpected offset % instead of 224", ((cast(*void)(*instance.x_resolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.x_resolution)) == 8, "_Image.x_resolution has unexpected size % instead of 8", size_of(type_of(_Image.x_resolution)));
        assert(((cast(*void)(*instance.y_resolution)) - cast(*void)(*instance)) == 232, "_Image.y_resolution has unexpected offset % instead of 232", ((cast(*void)(*instance.y_resolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.y_resolution)) == 8, "_Image.y_resolution has unexpected size % instead of 8", size_of(type_of(_Image.y_resolution)));
        assert(((cast(*void)(*instance.page)) - cast(*void)(*instance)) == 240, "_Image.page has unexpected offset % instead of 240", ((cast(*void)(*instance.page)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.page)) == 32, "_Image.page has unexpected size % instead of 32", size_of(type_of(_Image.page)));
        assert(((cast(*void)(*instance.tile_info)) - cast(*void)(*instance)) == 272, "_Image.tile_info has unexpected offset % instead of 272", ((cast(*void)(*instance.tile_info)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.tile_info)) == 32, "_Image.tile_info has unexpected size % instead of 32", size_of(type_of(_Image.tile_info)));
        assert(((cast(*void)(*instance.blur)) - cast(*void)(*instance)) == 304, "_Image.blur has unexpected offset % instead of 304", ((cast(*void)(*instance.blur)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.blur)) == 8, "_Image.blur has unexpected size % instead of 8", size_of(type_of(_Image.blur)));
        assert(((cast(*void)(*instance.fuzz)) - cast(*void)(*instance)) == 312, "_Image.fuzz has unexpected offset % instead of 312", ((cast(*void)(*instance.fuzz)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.fuzz)) == 8, "_Image.fuzz has unexpected size % instead of 8", size_of(type_of(_Image.fuzz)));
        assert(((cast(*void)(*instance.filter)) - cast(*void)(*instance)) == 320, "_Image.filter has unexpected offset % instead of 320", ((cast(*void)(*instance.filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.filter)) == 4, "_Image.filter has unexpected size % instead of 4", size_of(type_of(_Image.filter)));
        assert(((cast(*void)(*instance.interlace)) - cast(*void)(*instance)) == 324, "_Image.interlace has unexpected offset % instead of 324", ((cast(*void)(*instance.interlace)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.interlace)) == 4, "_Image.interlace has unexpected size % instead of 4", size_of(type_of(_Image.interlace)));
        assert(((cast(*void)(*instance.endian)) - cast(*void)(*instance)) == 328, "_Image.endian has unexpected offset % instead of 328", ((cast(*void)(*instance.endian)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.endian)) == 4, "_Image.endian has unexpected size % instead of 4", size_of(type_of(_Image.endian)));
        assert(((cast(*void)(*instance.gravity)) - cast(*void)(*instance)) == 332, "_Image.gravity has unexpected offset % instead of 332", ((cast(*void)(*instance.gravity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.gravity)) == 4, "_Image.gravity has unexpected size % instead of 4", size_of(type_of(_Image.gravity)));
        assert(((cast(*void)(*instance.compose)) - cast(*void)(*instance)) == 336, "_Image.compose has unexpected offset % instead of 336", ((cast(*void)(*instance.compose)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.compose)) == 4, "_Image.compose has unexpected size % instead of 4", size_of(type_of(_Image.compose)));
        assert(((cast(*void)(*instance.dispose)) - cast(*void)(*instance)) == 340, "_Image.dispose has unexpected offset % instead of 340", ((cast(*void)(*instance.dispose)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.dispose)) == 4, "_Image.dispose has unexpected size % instead of 4", size_of(type_of(_Image.dispose)));
        assert(((cast(*void)(*instance.scene)) - cast(*void)(*instance)) == 344, "_Image.scene has unexpected offset % instead of 344", ((cast(*void)(*instance.scene)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.scene)) == 8, "_Image.scene has unexpected size % instead of 8", size_of(type_of(_Image.scene)));
        assert(((cast(*void)(*instance.delay)) - cast(*void)(*instance)) == 352, "_Image.delay has unexpected offset % instead of 352", ((cast(*void)(*instance.delay)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.delay)) == 8, "_Image.delay has unexpected size % instead of 8", size_of(type_of(_Image.delay)));
        assert(((cast(*void)(*instance.iterations)) - cast(*void)(*instance)) == 360, "_Image.iterations has unexpected offset % instead of 360", ((cast(*void)(*instance.iterations)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.iterations)) == 8, "_Image.iterations has unexpected size % instead of 8", size_of(type_of(_Image.iterations)));
        assert(((cast(*void)(*instance.total_colors)) - cast(*void)(*instance)) == 368, "_Image.total_colors has unexpected offset % instead of 368", ((cast(*void)(*instance.total_colors)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.total_colors)) == 8, "_Image.total_colors has unexpected size % instead of 8", size_of(type_of(_Image.total_colors)));
        assert(((cast(*void)(*instance.start_loop)) - cast(*void)(*instance)) == 376, "_Image.start_loop has unexpected offset % instead of 376", ((cast(*void)(*instance.start_loop)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.start_loop)) == 8, "_Image.start_loop has unexpected size % instead of 8", size_of(type_of(_Image.start_loop)));
        assert(((cast(*void)(*instance.error)) - cast(*void)(*instance)) == 384, "_Image.error has unexpected offset % instead of 384", ((cast(*void)(*instance.error)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.error)) == 24, "_Image.error has unexpected size % instead of 24", size_of(type_of(_Image.error)));
        assert(((cast(*void)(*instance.timer)) - cast(*void)(*instance)) == 408, "_Image.timer has unexpected offset % instead of 408", ((cast(*void)(*instance.timer)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.timer)) == 64, "_Image.timer has unexpected size % instead of 64", size_of(type_of(_Image.timer)));
        assert(((cast(*void)(*instance.client_data)) - cast(*void)(*instance)) == 472, "_Image.client_data has unexpected offset % instead of 472", ((cast(*void)(*instance.client_data)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.client_data)) == 8, "_Image.client_data has unexpected size % instead of 8", size_of(type_of(_Image.client_data)));
        assert(((cast(*void)(*instance.filename)) - cast(*void)(*instance)) == 480, "_Image.filename has unexpected offset % instead of 480", ((cast(*void)(*instance.filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.filename)) == 2053, "_Image.filename has unexpected size % instead of 2053", size_of(type_of(_Image.filename)));
        assert(((cast(*void)(*instance.magick_filename)) - cast(*void)(*instance)) == 2533, "_Image.magick_filename has unexpected offset % instead of 2533", ((cast(*void)(*instance.magick_filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.magick_filename)) == 2053, "_Image.magick_filename has unexpected size % instead of 2053", size_of(type_of(_Image.magick_filename)));
        assert(((cast(*void)(*instance.magick)) - cast(*void)(*instance)) == 4586, "_Image.magick has unexpected offset % instead of 4586", ((cast(*void)(*instance.magick)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.magick)) == 2053, "_Image.magick has unexpected size % instead of 2053", size_of(type_of(_Image.magick)));
        assert(((cast(*void)(*instance.magick_columns)) - cast(*void)(*instance)) == 6640, "_Image.magick_columns has unexpected offset % instead of 6640", ((cast(*void)(*instance.magick_columns)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.magick_columns)) == 8, "_Image.magick_columns has unexpected size % instead of 8", size_of(type_of(_Image.magick_columns)));
        assert(((cast(*void)(*instance.magick_rows)) - cast(*void)(*instance)) == 6648, "_Image.magick_rows has unexpected offset % instead of 6648", ((cast(*void)(*instance.magick_rows)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.magick_rows)) == 8, "_Image.magick_rows has unexpected size % instead of 8", size_of(type_of(_Image.magick_rows)));
        assert(((cast(*void)(*instance.exception)) - cast(*void)(*instance)) == 6656, "_Image.exception has unexpected offset % instead of 6656", ((cast(*void)(*instance.exception)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.exception)) == 64, "_Image.exception has unexpected size % instead of 64", size_of(type_of(_Image.exception)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 6720, "_Image.previous has unexpected offset % instead of 6720", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.previous)) == 8, "_Image.previous has unexpected size % instead of 8", size_of(type_of(_Image.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 6728, "_Image.next has unexpected offset % instead of 6728", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.next)) == 8, "_Image.next has unexpected size % instead of 8", size_of(type_of(_Image.next)));
        assert(((cast(*void)(*instance.profiles)) - cast(*void)(*instance)) == 6736, "_Image.profiles has unexpected offset % instead of 6736", ((cast(*void)(*instance.profiles)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.profiles)) == 8, "_Image.profiles has unexpected size % instead of 8", size_of(type_of(_Image.profiles)));
        assert(((cast(*void)(*instance.is_monochrome)) - cast(*void)(*instance)) == 6744, "_Image.is_monochrome has unexpected offset % instead of 6744", ((cast(*void)(*instance.is_monochrome)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.is_monochrome)) == 4, "_Image.is_monochrome has unexpected size % instead of 4", size_of(type_of(_Image.is_monochrome)));
        assert(((cast(*void)(*instance.is_grayscale)) - cast(*void)(*instance)) == 6748, "_Image.is_grayscale has unexpected offset % instead of 6748", ((cast(*void)(*instance.is_grayscale)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.is_grayscale)) == 4, "_Image.is_grayscale has unexpected size % instead of 4", size_of(type_of(_Image.is_grayscale)));
        assert(((cast(*void)(*instance.taint)) - cast(*void)(*instance)) == 6752, "_Image.taint has unexpected offset % instead of 6752", ((cast(*void)(*instance.taint)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.taint)) == 4, "_Image.taint has unexpected size % instead of 4", size_of(type_of(_Image.taint)));
        assert(((cast(*void)(*instance.extra)) - cast(*void)(*instance)) == 6760, "_Image.extra has unexpected offset % instead of 6760", ((cast(*void)(*instance.extra)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.extra)) == 8, "_Image.extra has unexpected size % instead of 8", size_of(type_of(_Image.extra)));
        assert(((cast(*void)(*instance.ping)) - cast(*void)(*instance)) == 6768, "_Image.ping has unexpected offset % instead of 6768", ((cast(*void)(*instance.ping)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.ping)) == 4, "_Image.ping has unexpected size % instead of 4", size_of(type_of(_Image.ping)));
        assert(((cast(*void)(*instance.cache)) - cast(*void)(*instance)) == 6776, "_Image.cache has unexpected offset % instead of 6776", ((cast(*void)(*instance.cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.cache)) == 8, "_Image.cache has unexpected size % instead of 8", size_of(type_of(_Image.cache)));
        assert(((cast(*void)(*instance.default_views)) - cast(*void)(*instance)) == 6784, "_Image.default_views has unexpected offset % instead of 6784", ((cast(*void)(*instance.default_views)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.default_views)) == 8, "_Image.default_views has unexpected size % instead of 8", size_of(type_of(_Image.default_views)));
        assert(((cast(*void)(*instance.attributes)) - cast(*void)(*instance)) == 6792, "_Image.attributes has unexpected offset % instead of 6792", ((cast(*void)(*instance.attributes)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.attributes)) == 8, "_Image.attributes has unexpected size % instead of 8", size_of(type_of(_Image.attributes)));
        assert(((cast(*void)(*instance.ascii85)) - cast(*void)(*instance)) == 6800, "_Image.ascii85 has unexpected offset % instead of 6800", ((cast(*void)(*instance.ascii85)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.ascii85)) == 8, "_Image.ascii85 has unexpected size % instead of 8", size_of(type_of(_Image.ascii85)));
        assert(((cast(*void)(*instance.blob)) - cast(*void)(*instance)) == 6808, "_Image.blob has unexpected offset % instead of 6808", ((cast(*void)(*instance.blob)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.blob)) == 8, "_Image.blob has unexpected size % instead of 8", size_of(type_of(_Image.blob)));
        assert(((cast(*void)(*instance.reference_count)) - cast(*void)(*instance)) == 6816, "_Image.reference_count has unexpected offset % instead of 6816", ((cast(*void)(*instance.reference_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.reference_count)) == 8, "_Image.reference_count has unexpected size % instead of 8", size_of(type_of(_Image.reference_count)));
        assert(((cast(*void)(*instance.semaphore)) - cast(*void)(*instance)) == 6824, "_Image.semaphore has unexpected offset % instead of 6824", ((cast(*void)(*instance.semaphore)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.semaphore)) == 8, "_Image.semaphore has unexpected size % instead of 8", size_of(type_of(_Image.semaphore)));
        assert(((cast(*void)(*instance.logging)) - cast(*void)(*instance)) == 6832, "_Image.logging has unexpected offset % instead of 6832", ((cast(*void)(*instance.logging)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.logging)) == 4, "_Image.logging has unexpected size % instead of 4", size_of(type_of(_Image.logging)));
        assert(((cast(*void)(*instance.list)) - cast(*void)(*instance)) == 6840, "_Image.list has unexpected offset % instead of 6840", ((cast(*void)(*instance.list)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.list)) == 8, "_Image.list has unexpected size % instead of 8", size_of(type_of(_Image.list)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 6848, "_Image.signature has unexpected offset % instead of 6848", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Image.signature)) == 8, "_Image.signature has unexpected size % instead of 8", size_of(type_of(_Image.signature)));
        assert(size_of(_Image) == 6856, "_Image has size % instead of 6856", size_of(_Image));
    }

    {
        instance: _ImageInfo;
        assert(((cast(*void)(*instance.compression)) - cast(*void)(*instance)) == 0, "_ImageInfo.compression has unexpected offset % instead of 0", ((cast(*void)(*instance.compression)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.compression)) == 4, "_ImageInfo.compression has unexpected size % instead of 4", size_of(type_of(_ImageInfo.compression)));
        assert(((cast(*void)(*instance.temporary)) - cast(*void)(*instance)) == 4, "_ImageInfo.temporary has unexpected offset % instead of 4", ((cast(*void)(*instance.temporary)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.temporary)) == 4, "_ImageInfo.temporary has unexpected size % instead of 4", size_of(type_of(_ImageInfo.temporary)));
        assert(((cast(*void)(*instance.adjoin)) - cast(*void)(*instance)) == 8, "_ImageInfo.adjoin has unexpected offset % instead of 8", ((cast(*void)(*instance.adjoin)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.adjoin)) == 4, "_ImageInfo.adjoin has unexpected size % instead of 4", size_of(type_of(_ImageInfo.adjoin)));
        assert(((cast(*void)(*instance.antialias)) - cast(*void)(*instance)) == 12, "_ImageInfo.antialias has unexpected offset % instead of 12", ((cast(*void)(*instance.antialias)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.antialias)) == 4, "_ImageInfo.antialias has unexpected size % instead of 4", size_of(type_of(_ImageInfo.antialias)));
        assert(((cast(*void)(*instance.subimage)) - cast(*void)(*instance)) == 16, "_ImageInfo.subimage has unexpected offset % instead of 16", ((cast(*void)(*instance.subimage)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.subimage)) == 8, "_ImageInfo.subimage has unexpected size % instead of 8", size_of(type_of(_ImageInfo.subimage)));
        assert(((cast(*void)(*instance.subrange)) - cast(*void)(*instance)) == 24, "_ImageInfo.subrange has unexpected offset % instead of 24", ((cast(*void)(*instance.subrange)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.subrange)) == 8, "_ImageInfo.subrange has unexpected size % instead of 8", size_of(type_of(_ImageInfo.subrange)));
        assert(((cast(*void)(*instance.depth)) - cast(*void)(*instance)) == 32, "_ImageInfo.depth has unexpected offset % instead of 32", ((cast(*void)(*instance.depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.depth)) == 8, "_ImageInfo.depth has unexpected size % instead of 8", size_of(type_of(_ImageInfo.depth)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 40, "_ImageInfo.size has unexpected offset % instead of 40", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.size)) == 8, "_ImageInfo.size has unexpected size % instead of 8", size_of(type_of(_ImageInfo.size)));
        assert(((cast(*void)(*instance.tile)) - cast(*void)(*instance)) == 48, "_ImageInfo.tile has unexpected offset % instead of 48", ((cast(*void)(*instance.tile)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.tile)) == 8, "_ImageInfo.tile has unexpected size % instead of 8", size_of(type_of(_ImageInfo.tile)));
        assert(((cast(*void)(*instance.page)) - cast(*void)(*instance)) == 56, "_ImageInfo.page has unexpected offset % instead of 56", ((cast(*void)(*instance.page)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.page)) == 8, "_ImageInfo.page has unexpected size % instead of 8", size_of(type_of(_ImageInfo.page)));
        assert(((cast(*void)(*instance.interlace)) - cast(*void)(*instance)) == 64, "_ImageInfo.interlace has unexpected offset % instead of 64", ((cast(*void)(*instance.interlace)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.interlace)) == 4, "_ImageInfo.interlace has unexpected size % instead of 4", size_of(type_of(_ImageInfo.interlace)));
        assert(((cast(*void)(*instance.endian)) - cast(*void)(*instance)) == 68, "_ImageInfo.endian has unexpected offset % instead of 68", ((cast(*void)(*instance.endian)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.endian)) == 4, "_ImageInfo.endian has unexpected size % instead of 4", size_of(type_of(_ImageInfo.endian)));
        assert(((cast(*void)(*instance.units)) - cast(*void)(*instance)) == 72, "_ImageInfo.units has unexpected offset % instead of 72", ((cast(*void)(*instance.units)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.units)) == 4, "_ImageInfo.units has unexpected size % instead of 4", size_of(type_of(_ImageInfo.units)));
        assert(((cast(*void)(*instance.quality)) - cast(*void)(*instance)) == 80, "_ImageInfo.quality has unexpected offset % instead of 80", ((cast(*void)(*instance.quality)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.quality)) == 8, "_ImageInfo.quality has unexpected size % instead of 8", size_of(type_of(_ImageInfo.quality)));
        assert(((cast(*void)(*instance.sampling_factor)) - cast(*void)(*instance)) == 88, "_ImageInfo.sampling_factor has unexpected offset % instead of 88", ((cast(*void)(*instance.sampling_factor)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.sampling_factor)) == 8, "_ImageInfo.sampling_factor has unexpected size % instead of 8", size_of(type_of(_ImageInfo.sampling_factor)));
        assert(((cast(*void)(*instance.server_name)) - cast(*void)(*instance)) == 96, "_ImageInfo.server_name has unexpected offset % instead of 96", ((cast(*void)(*instance.server_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.server_name)) == 8, "_ImageInfo.server_name has unexpected size % instead of 8", size_of(type_of(_ImageInfo.server_name)));
        assert(((cast(*void)(*instance.font)) - cast(*void)(*instance)) == 104, "_ImageInfo.font has unexpected offset % instead of 104", ((cast(*void)(*instance.font)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.font)) == 8, "_ImageInfo.font has unexpected size % instead of 8", size_of(type_of(_ImageInfo.font)));
        assert(((cast(*void)(*instance.texture)) - cast(*void)(*instance)) == 112, "_ImageInfo.texture has unexpected offset % instead of 112", ((cast(*void)(*instance.texture)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.texture)) == 8, "_ImageInfo.texture has unexpected size % instead of 8", size_of(type_of(_ImageInfo.texture)));
        assert(((cast(*void)(*instance.density)) - cast(*void)(*instance)) == 120, "_ImageInfo.density has unexpected offset % instead of 120", ((cast(*void)(*instance.density)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.density)) == 8, "_ImageInfo.density has unexpected size % instead of 8", size_of(type_of(_ImageInfo.density)));
        assert(((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)) == 128, "_ImageInfo.pointsize has unexpected offset % instead of 128", ((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.pointsize)) == 8, "_ImageInfo.pointsize has unexpected size % instead of 8", size_of(type_of(_ImageInfo.pointsize)));
        assert(((cast(*void)(*instance.fuzz)) - cast(*void)(*instance)) == 136, "_ImageInfo.fuzz has unexpected offset % instead of 136", ((cast(*void)(*instance.fuzz)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.fuzz)) == 8, "_ImageInfo.fuzz has unexpected size % instead of 8", size_of(type_of(_ImageInfo.fuzz)));
        assert(((cast(*void)(*instance.pen)) - cast(*void)(*instance)) == 144, "_ImageInfo.pen has unexpected offset % instead of 144", ((cast(*void)(*instance.pen)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.pen)) == 4, "_ImageInfo.pen has unexpected size % instead of 4", size_of(type_of(_ImageInfo.pen)));
        assert(((cast(*void)(*instance.background_color)) - cast(*void)(*instance)) == 148, "_ImageInfo.background_color has unexpected offset % instead of 148", ((cast(*void)(*instance.background_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.background_color)) == 4, "_ImageInfo.background_color has unexpected size % instead of 4", size_of(type_of(_ImageInfo.background_color)));
        assert(((cast(*void)(*instance.border_color)) - cast(*void)(*instance)) == 152, "_ImageInfo.border_color has unexpected offset % instead of 152", ((cast(*void)(*instance.border_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.border_color)) == 4, "_ImageInfo.border_color has unexpected size % instead of 4", size_of(type_of(_ImageInfo.border_color)));
        assert(((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)) == 156, "_ImageInfo.matte_color has unexpected offset % instead of 156", ((cast(*void)(*instance.matte_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.matte_color)) == 4, "_ImageInfo.matte_color has unexpected size % instead of 4", size_of(type_of(_ImageInfo.matte_color)));
        assert(((cast(*void)(*instance.dither)) - cast(*void)(*instance)) == 160, "_ImageInfo.dither has unexpected offset % instead of 160", ((cast(*void)(*instance.dither)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.dither)) == 4, "_ImageInfo.dither has unexpected size % instead of 4", size_of(type_of(_ImageInfo.dither)));
        assert(((cast(*void)(*instance.monochrome)) - cast(*void)(*instance)) == 164, "_ImageInfo.monochrome has unexpected offset % instead of 164", ((cast(*void)(*instance.monochrome)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.monochrome)) == 4, "_ImageInfo.monochrome has unexpected size % instead of 4", size_of(type_of(_ImageInfo.monochrome)));
        assert(((cast(*void)(*instance.progress)) - cast(*void)(*instance)) == 168, "_ImageInfo.progress has unexpected offset % instead of 168", ((cast(*void)(*instance.progress)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.progress)) == 4, "_ImageInfo.progress has unexpected size % instead of 4", size_of(type_of(_ImageInfo.progress)));
        assert(((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)) == 172, "_ImageInfo.colorspace has unexpected offset % instead of 172", ((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.colorspace)) == 4, "_ImageInfo.colorspace has unexpected size % instead of 4", size_of(type_of(_ImageInfo.colorspace)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 176, "_ImageInfo.type has unexpected offset % instead of 176", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.type)) == 4, "_ImageInfo.type has unexpected size % instead of 4", size_of(type_of(_ImageInfo.type)));
        assert(((cast(*void)(*instance.group)) - cast(*void)(*instance)) == 184, "_ImageInfo.group has unexpected offset % instead of 184", ((cast(*void)(*instance.group)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.group)) == 8, "_ImageInfo.group has unexpected size % instead of 8", size_of(type_of(_ImageInfo.group)));
        assert(((cast(*void)(*instance.verbose)) - cast(*void)(*instance)) == 192, "_ImageInfo.verbose has unexpected offset % instead of 192", ((cast(*void)(*instance.verbose)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.verbose)) == 4, "_ImageInfo.verbose has unexpected size % instead of 4", size_of(type_of(_ImageInfo.verbose)));
        assert(((cast(*void)(*instance.view)) - cast(*void)(*instance)) == 200, "_ImageInfo.view has unexpected offset % instead of 200", ((cast(*void)(*instance.view)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.view)) == 8, "_ImageInfo.view has unexpected size % instead of 8", size_of(type_of(_ImageInfo.view)));
        assert(((cast(*void)(*instance.authenticate)) - cast(*void)(*instance)) == 208, "_ImageInfo.authenticate has unexpected offset % instead of 208", ((cast(*void)(*instance.authenticate)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.authenticate)) == 8, "_ImageInfo.authenticate has unexpected size % instead of 8", size_of(type_of(_ImageInfo.authenticate)));
        assert(((cast(*void)(*instance.client_data)) - cast(*void)(*instance)) == 216, "_ImageInfo.client_data has unexpected offset % instead of 216", ((cast(*void)(*instance.client_data)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.client_data)) == 8, "_ImageInfo.client_data has unexpected size % instead of 8", size_of(type_of(_ImageInfo.client_data)));
        assert(((cast(*void)(*instance.file)) - cast(*void)(*instance)) == 224, "_ImageInfo.file has unexpected offset % instead of 224", ((cast(*void)(*instance.file)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.file)) == 8, "_ImageInfo.file has unexpected size % instead of 8", size_of(type_of(_ImageInfo.file)));
        assert(((cast(*void)(*instance.magick)) - cast(*void)(*instance)) == 232, "_ImageInfo.magick has unexpected offset % instead of 232", ((cast(*void)(*instance.magick)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.magick)) == 2053, "_ImageInfo.magick has unexpected size % instead of 2053", size_of(type_of(_ImageInfo.magick)));
        assert(((cast(*void)(*instance.filename)) - cast(*void)(*instance)) == 2285, "_ImageInfo.filename has unexpected offset % instead of 2285", ((cast(*void)(*instance.filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.filename)) == 2053, "_ImageInfo.filename has unexpected size % instead of 2053", size_of(type_of(_ImageInfo.filename)));
        assert(((cast(*void)(*instance.cache)) - cast(*void)(*instance)) == 4344, "_ImageInfo.cache has unexpected offset % instead of 4344", ((cast(*void)(*instance.cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.cache)) == 8, "_ImageInfo.cache has unexpected size % instead of 8", size_of(type_of(_ImageInfo.cache)));
        assert(((cast(*void)(*instance.definitions)) - cast(*void)(*instance)) == 4352, "_ImageInfo.definitions has unexpected offset % instead of 4352", ((cast(*void)(*instance.definitions)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.definitions)) == 8, "_ImageInfo.definitions has unexpected size % instead of 8", size_of(type_of(_ImageInfo.definitions)));
        assert(((cast(*void)(*instance.attributes)) - cast(*void)(*instance)) == 4360, "_ImageInfo.attributes has unexpected offset % instead of 4360", ((cast(*void)(*instance.attributes)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.attributes)) == 8, "_ImageInfo.attributes has unexpected size % instead of 8", size_of(type_of(_ImageInfo.attributes)));
        assert(((cast(*void)(*instance.ping)) - cast(*void)(*instance)) == 4368, "_ImageInfo.ping has unexpected offset % instead of 4368", ((cast(*void)(*instance.ping)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.ping)) == 4, "_ImageInfo.ping has unexpected size % instead of 4", size_of(type_of(_ImageInfo.ping)));
        assert(((cast(*void)(*instance.preview_type)) - cast(*void)(*instance)) == 4372, "_ImageInfo.preview_type has unexpected offset % instead of 4372", ((cast(*void)(*instance.preview_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.preview_type)) == 4, "_ImageInfo.preview_type has unexpected size % instead of 4", size_of(type_of(_ImageInfo.preview_type)));
        assert(((cast(*void)(*instance.affirm)) - cast(*void)(*instance)) == 4376, "_ImageInfo.affirm has unexpected offset % instead of 4376", ((cast(*void)(*instance.affirm)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.affirm)) == 4, "_ImageInfo.affirm has unexpected size % instead of 4", size_of(type_of(_ImageInfo.affirm)));
        assert(((cast(*void)(*instance.blob)) - cast(*void)(*instance)) == 4384, "_ImageInfo.blob has unexpected offset % instead of 4384", ((cast(*void)(*instance.blob)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.blob)) == 8, "_ImageInfo.blob has unexpected size % instead of 8", size_of(type_of(_ImageInfo.blob)));
        assert(((cast(*void)(*instance.length)) - cast(*void)(*instance)) == 4392, "_ImageInfo.length has unexpected offset % instead of 4392", ((cast(*void)(*instance.length)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.length)) == 8, "_ImageInfo.length has unexpected size % instead of 8", size_of(type_of(_ImageInfo.length)));
        assert(((cast(*void)(*instance.unique)) - cast(*void)(*instance)) == 4400, "_ImageInfo.unique has unexpected offset % instead of 4400", ((cast(*void)(*instance.unique)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.unique)) == 2053, "_ImageInfo.unique has unexpected size % instead of 2053", size_of(type_of(_ImageInfo.unique)));
        assert(((cast(*void)(*instance.zero)) - cast(*void)(*instance)) == 6453, "_ImageInfo.zero has unexpected offset % instead of 6453", ((cast(*void)(*instance.zero)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.zero)) == 2053, "_ImageInfo.zero has unexpected size % instead of 2053", size_of(type_of(_ImageInfo.zero)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 8512, "_ImageInfo.signature has unexpected offset % instead of 8512", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageInfo.signature)) == 8, "_ImageInfo.signature has unexpected size % instead of 8", size_of(type_of(_ImageInfo.signature)));
        assert(size_of(_ImageInfo) == 8520, "_ImageInfo has size % instead of 8520", size_of(_ImageInfo));
    }

    {
        instance: _ImageCharacteristics;
        assert(((cast(*void)(*instance.cmyk)) - cast(*void)(*instance)) == 0, "_ImageCharacteristics.cmyk has unexpected offset % instead of 0", ((cast(*void)(*instance.cmyk)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageCharacteristics.cmyk)) == 4, "_ImageCharacteristics.cmyk has unexpected size % instead of 4", size_of(type_of(_ImageCharacteristics.cmyk)));
        assert(((cast(*void)(*instance.grayscale)) - cast(*void)(*instance)) == 4, "_ImageCharacteristics.grayscale has unexpected offset % instead of 4", ((cast(*void)(*instance.grayscale)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageCharacteristics.grayscale)) == 4, "_ImageCharacteristics.grayscale has unexpected size % instead of 4", size_of(type_of(_ImageCharacteristics.grayscale)));
        assert(((cast(*void)(*instance.monochrome)) - cast(*void)(*instance)) == 8, "_ImageCharacteristics.monochrome has unexpected offset % instead of 8", ((cast(*void)(*instance.monochrome)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageCharacteristics.monochrome)) == 4, "_ImageCharacteristics.monochrome has unexpected size % instead of 4", size_of(type_of(_ImageCharacteristics.monochrome)));
        assert(((cast(*void)(*instance.opaque)) - cast(*void)(*instance)) == 12, "_ImageCharacteristics.opaque has unexpected offset % instead of 12", ((cast(*void)(*instance.opaque)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageCharacteristics.opaque)) == 4, "_ImageCharacteristics.opaque has unexpected size % instead of 4", size_of(type_of(_ImageCharacteristics.opaque)));
        assert(((cast(*void)(*instance.palette)) - cast(*void)(*instance)) == 16, "_ImageCharacteristics.palette has unexpected offset % instead of 16", ((cast(*void)(*instance.palette)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageCharacteristics.palette)) == 4, "_ImageCharacteristics.palette has unexpected size % instead of 4", size_of(type_of(_ImageCharacteristics.palette)));
        assert(size_of(_ImageCharacteristics) == 20, "_ImageCharacteristics has size % instead of 20", size_of(_ImageCharacteristics));
    }

    {
        instance: _ImageAttribute;
        assert(((cast(*void)(*instance.key)) - cast(*void)(*instance)) == 0, "_ImageAttribute.key has unexpected offset % instead of 0", ((cast(*void)(*instance.key)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageAttribute.key)) == 8, "_ImageAttribute.key has unexpected size % instead of 8", size_of(type_of(_ImageAttribute.key)));
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 8, "_ImageAttribute.value has unexpected offset % instead of 8", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageAttribute.value)) == 8, "_ImageAttribute.value has unexpected size % instead of 8", size_of(type_of(_ImageAttribute.value)));
        assert(((cast(*void)(*instance.length)) - cast(*void)(*instance)) == 16, "_ImageAttribute.length has unexpected offset % instead of 16", ((cast(*void)(*instance.length)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageAttribute.length)) == 8, "_ImageAttribute.length has unexpected size % instead of 8", size_of(type_of(_ImageAttribute.length)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 24, "_ImageAttribute.previous has unexpected offset % instead of 24", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageAttribute.previous)) == 8, "_ImageAttribute.previous has unexpected size % instead of 8", size_of(type_of(_ImageAttribute.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 32, "_ImageAttribute.next has unexpected offset % instead of 32", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageAttribute.next)) == 8, "_ImageAttribute.next has unexpected size % instead of 8", size_of(type_of(_ImageAttribute.next)));
        assert(size_of(_ImageAttribute) == 40, "_ImageAttribute has size % instead of 40", size_of(_ImageAttribute));
    }

    {
        instance: _HistogramColorPacket;
        assert(((cast(*void)(*instance.pixel)) - cast(*void)(*instance)) == 0, "_HistogramColorPacket.pixel has unexpected offset % instead of 0", ((cast(*void)(*instance.pixel)) - cast(*void)(*instance)));
        assert(size_of(type_of(_HistogramColorPacket.pixel)) == 4, "_HistogramColorPacket.pixel has unexpected size % instead of 4", size_of(type_of(_HistogramColorPacket.pixel)));
        assert(((cast(*void)(*instance.count)) - cast(*void)(*instance)) == 8, "_HistogramColorPacket.count has unexpected offset % instead of 8", ((cast(*void)(*instance.count)) - cast(*void)(*instance)));
        assert(size_of(type_of(_HistogramColorPacket.count)) == 8, "_HistogramColorPacket.count has unexpected size % instead of 8", size_of(type_of(_HistogramColorPacket.count)));
        assert(size_of(_HistogramColorPacket) == 16, "_HistogramColorPacket has size % instead of 16", size_of(_HistogramColorPacket));
    }

    {
        instance: _DifferenceImageOptions;
        assert(((cast(*void)(*instance.channel)) - cast(*void)(*instance)) == 0, "_DifferenceImageOptions.channel has unexpected offset % instead of 0", ((cast(*void)(*instance.channel)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceImageOptions.channel)) == 4, "_DifferenceImageOptions.channel has unexpected size % instead of 4", size_of(type_of(_DifferenceImageOptions.channel)));
        assert(((cast(*void)(*instance.highlight_style)) - cast(*void)(*instance)) == 4, "_DifferenceImageOptions.highlight_style has unexpected offset % instead of 4", ((cast(*void)(*instance.highlight_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceImageOptions.highlight_style)) == 4, "_DifferenceImageOptions.highlight_style has unexpected size % instead of 4", size_of(type_of(_DifferenceImageOptions.highlight_style)));
        assert(((cast(*void)(*instance.highlight_color)) - cast(*void)(*instance)) == 8, "_DifferenceImageOptions.highlight_color has unexpected offset % instead of 8", ((cast(*void)(*instance.highlight_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceImageOptions.highlight_color)) == 4, "_DifferenceImageOptions.highlight_color has unexpected size % instead of 4", size_of(type_of(_DifferenceImageOptions.highlight_color)));
        assert(size_of(_DifferenceImageOptions) == 12, "_DifferenceImageOptions has size % instead of 12", size_of(_DifferenceImageOptions));
    }

    {
        instance: _DifferenceStatistics;
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 0, "_DifferenceStatistics.red has unexpected offset % instead of 0", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceStatistics.red)) == 8, "_DifferenceStatistics.red has unexpected size % instead of 8", size_of(type_of(_DifferenceStatistics.red)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 8, "_DifferenceStatistics.green has unexpected offset % instead of 8", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceStatistics.green)) == 8, "_DifferenceStatistics.green has unexpected size % instead of 8", size_of(type_of(_DifferenceStatistics.green)));
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 16, "_DifferenceStatistics.blue has unexpected offset % instead of 16", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceStatistics.blue)) == 8, "_DifferenceStatistics.blue has unexpected size % instead of 8", size_of(type_of(_DifferenceStatistics.blue)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 24, "_DifferenceStatistics.opacity has unexpected offset % instead of 24", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceStatistics.opacity)) == 8, "_DifferenceStatistics.opacity has unexpected size % instead of 8", size_of(type_of(_DifferenceStatistics.opacity)));
        assert(((cast(*void)(*instance.combined)) - cast(*void)(*instance)) == 32, "_DifferenceStatistics.combined has unexpected offset % instead of 32", ((cast(*void)(*instance.combined)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DifferenceStatistics.combined)) == 8, "_DifferenceStatistics.combined has unexpected size % instead of 8", size_of(type_of(_DifferenceStatistics.combined)));
        assert(size_of(_DifferenceStatistics) == 40, "_DifferenceStatistics has size % instead of 40", size_of(_DifferenceStatistics));
    }

    {
        instance: _CompositeOptions_t;
        assert(((cast(*void)(*instance.percent_brightness)) - cast(*void)(*instance)) == 0, "_CompositeOptions_t.percent_brightness has unexpected offset % instead of 0", ((cast(*void)(*instance.percent_brightness)) - cast(*void)(*instance)));
        assert(size_of(type_of(_CompositeOptions_t.percent_brightness)) == 8, "_CompositeOptions_t.percent_brightness has unexpected size % instead of 8", size_of(type_of(_CompositeOptions_t.percent_brightness)));
        assert(((cast(*void)(*instance.amount)) - cast(*void)(*instance)) == 8, "_CompositeOptions_t.amount has unexpected offset % instead of 8", ((cast(*void)(*instance.amount)) - cast(*void)(*instance)));
        assert(size_of(type_of(_CompositeOptions_t.amount)) == 8, "_CompositeOptions_t.amount has unexpected size % instead of 8", size_of(type_of(_CompositeOptions_t.amount)));
        assert(((cast(*void)(*instance.threshold)) - cast(*void)(*instance)) == 16, "_CompositeOptions_t.threshold has unexpected offset % instead of 16", ((cast(*void)(*instance.threshold)) - cast(*void)(*instance)));
        assert(size_of(type_of(_CompositeOptions_t.threshold)) == 8, "_CompositeOptions_t.threshold has unexpected size % instead of 8", size_of(type_of(_CompositeOptions_t.threshold)));
        assert(size_of(_CompositeOptions_t) == 24, "_CompositeOptions_t has size % instead of 24", size_of(_CompositeOptions_t));
    }

    {
        instance: _Ascii85Info;
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 0, "_Ascii85Info.offset has unexpected offset % instead of 0", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Ascii85Info.offset)) == 8, "_Ascii85Info.offset has unexpected size % instead of 8", size_of(type_of(_Ascii85Info.offset)));
        assert(((cast(*void)(*instance.line_break)) - cast(*void)(*instance)) == 8, "_Ascii85Info.line_break has unexpected offset % instead of 8", ((cast(*void)(*instance.line_break)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Ascii85Info.line_break)) == 8, "_Ascii85Info.line_break has unexpected size % instead of 8", size_of(type_of(_Ascii85Info.line_break)));
        assert(((cast(*void)(*instance.buffer)) - cast(*void)(*instance)) == 16, "_Ascii85Info.buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(_Ascii85Info.buffer)) == 10, "_Ascii85Info.buffer has unexpected size % instead of 10", size_of(type_of(_Ascii85Info.buffer)));
        assert(size_of(_Ascii85Info) == 32, "_Ascii85Info has size % instead of 32", size_of(_Ascii85Info));
    }

    {
        instance: _ExportPixelAreaOptions;
        assert(((cast(*void)(*instance.sample_type)) - cast(*void)(*instance)) == 0, "_ExportPixelAreaOptions.sample_type has unexpected offset % instead of 0", ((cast(*void)(*instance.sample_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.sample_type)) == 4, "_ExportPixelAreaOptions.sample_type has unexpected size % instead of 4", size_of(type_of(_ExportPixelAreaOptions.sample_type)));
        assert(((cast(*void)(*instance.double_minvalue)) - cast(*void)(*instance)) == 8, "_ExportPixelAreaOptions.double_minvalue has unexpected offset % instead of 8", ((cast(*void)(*instance.double_minvalue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.double_minvalue)) == 8, "_ExportPixelAreaOptions.double_minvalue has unexpected size % instead of 8", size_of(type_of(_ExportPixelAreaOptions.double_minvalue)));
        assert(((cast(*void)(*instance.double_maxvalue)) - cast(*void)(*instance)) == 16, "_ExportPixelAreaOptions.double_maxvalue has unexpected offset % instead of 16", ((cast(*void)(*instance.double_maxvalue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.double_maxvalue)) == 8, "_ExportPixelAreaOptions.double_maxvalue has unexpected size % instead of 8", size_of(type_of(_ExportPixelAreaOptions.double_maxvalue)));
        assert(((cast(*void)(*instance.grayscale_miniswhite)) - cast(*void)(*instance)) == 24, "_ExportPixelAreaOptions.grayscale_miniswhite has unexpected offset % instead of 24", ((cast(*void)(*instance.grayscale_miniswhite)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.grayscale_miniswhite)) == 4, "_ExportPixelAreaOptions.grayscale_miniswhite has unexpected size % instead of 4", size_of(type_of(_ExportPixelAreaOptions.grayscale_miniswhite)));
        assert(((cast(*void)(*instance.pad_bytes)) - cast(*void)(*instance)) == 32, "_ExportPixelAreaOptions.pad_bytes has unexpected offset % instead of 32", ((cast(*void)(*instance.pad_bytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.pad_bytes)) == 8, "_ExportPixelAreaOptions.pad_bytes has unexpected size % instead of 8", size_of(type_of(_ExportPixelAreaOptions.pad_bytes)));
        assert(((cast(*void)(*instance.pad_value)) - cast(*void)(*instance)) == 40, "_ExportPixelAreaOptions.pad_value has unexpected offset % instead of 40", ((cast(*void)(*instance.pad_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.pad_value)) == 1, "_ExportPixelAreaOptions.pad_value has unexpected size % instead of 1", size_of(type_of(_ExportPixelAreaOptions.pad_value)));
        assert(((cast(*void)(*instance.endian)) - cast(*void)(*instance)) == 44, "_ExportPixelAreaOptions.endian has unexpected offset % instead of 44", ((cast(*void)(*instance.endian)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.endian)) == 4, "_ExportPixelAreaOptions.endian has unexpected size % instead of 4", size_of(type_of(_ExportPixelAreaOptions.endian)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 48, "_ExportPixelAreaOptions.signature has unexpected offset % instead of 48", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaOptions.signature)) == 8, "_ExportPixelAreaOptions.signature has unexpected size % instead of 8", size_of(type_of(_ExportPixelAreaOptions.signature)));
        assert(size_of(_ExportPixelAreaOptions) == 56, "_ExportPixelAreaOptions has size % instead of 56", size_of(_ExportPixelAreaOptions));
    }

    {
        instance: _ExportPixelAreaInfo;
        assert(((cast(*void)(*instance.bytes_exported)) - cast(*void)(*instance)) == 0, "_ExportPixelAreaInfo.bytes_exported has unexpected offset % instead of 0", ((cast(*void)(*instance.bytes_exported)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ExportPixelAreaInfo.bytes_exported)) == 8, "_ExportPixelAreaInfo.bytes_exported has unexpected size % instead of 8", size_of(type_of(_ExportPixelAreaInfo.bytes_exported)));
        assert(size_of(_ExportPixelAreaInfo) == 8, "_ExportPixelAreaInfo has size % instead of 8", size_of(_ExportPixelAreaInfo));
    }

    {
        instance: _ImportPixelAreaOptions;
        assert(((cast(*void)(*instance.sample_type)) - cast(*void)(*instance)) == 0, "_ImportPixelAreaOptions.sample_type has unexpected offset % instead of 0", ((cast(*void)(*instance.sample_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.sample_type)) == 4, "_ImportPixelAreaOptions.sample_type has unexpected size % instead of 4", size_of(type_of(_ImportPixelAreaOptions.sample_type)));
        assert(((cast(*void)(*instance.double_minvalue)) - cast(*void)(*instance)) == 8, "_ImportPixelAreaOptions.double_minvalue has unexpected offset % instead of 8", ((cast(*void)(*instance.double_minvalue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.double_minvalue)) == 8, "_ImportPixelAreaOptions.double_minvalue has unexpected size % instead of 8", size_of(type_of(_ImportPixelAreaOptions.double_minvalue)));
        assert(((cast(*void)(*instance.double_maxvalue)) - cast(*void)(*instance)) == 16, "_ImportPixelAreaOptions.double_maxvalue has unexpected offset % instead of 16", ((cast(*void)(*instance.double_maxvalue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.double_maxvalue)) == 8, "_ImportPixelAreaOptions.double_maxvalue has unexpected size % instead of 8", size_of(type_of(_ImportPixelAreaOptions.double_maxvalue)));
        assert(((cast(*void)(*instance.grayscale_miniswhite)) - cast(*void)(*instance)) == 24, "_ImportPixelAreaOptions.grayscale_miniswhite has unexpected offset % instead of 24", ((cast(*void)(*instance.grayscale_miniswhite)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.grayscale_miniswhite)) == 4, "_ImportPixelAreaOptions.grayscale_miniswhite has unexpected size % instead of 4", size_of(type_of(_ImportPixelAreaOptions.grayscale_miniswhite)));
        assert(((cast(*void)(*instance.endian)) - cast(*void)(*instance)) == 28, "_ImportPixelAreaOptions.endian has unexpected offset % instead of 28", ((cast(*void)(*instance.endian)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.endian)) == 4, "_ImportPixelAreaOptions.endian has unexpected size % instead of 4", size_of(type_of(_ImportPixelAreaOptions.endian)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 32, "_ImportPixelAreaOptions.signature has unexpected offset % instead of 32", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaOptions.signature)) == 8, "_ImportPixelAreaOptions.signature has unexpected size % instead of 8", size_of(type_of(_ImportPixelAreaOptions.signature)));
        assert(size_of(_ImportPixelAreaOptions) == 40, "_ImportPixelAreaOptions has size % instead of 40", size_of(_ImportPixelAreaOptions));
    }

    {
        instance: _ImportPixelAreaInfo;
        assert(((cast(*void)(*instance.bytes_imported)) - cast(*void)(*instance)) == 0, "_ImportPixelAreaInfo.bytes_imported has unexpected offset % instead of 0", ((cast(*void)(*instance.bytes_imported)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImportPixelAreaInfo.bytes_imported)) == 8, "_ImportPixelAreaInfo.bytes_imported has unexpected size % instead of 8", size_of(type_of(_ImportPixelAreaInfo.bytes_imported)));
        assert(size_of(_ImportPixelAreaInfo) == 8, "_ImportPixelAreaInfo has size % instead of 8", size_of(_ImportPixelAreaInfo));
    }

    {
        instance: _DelegateInfo;
        assert(((cast(*void)(*instance.path)) - cast(*void)(*instance)) == 0, "_DelegateInfo.path has unexpected offset % instead of 0", ((cast(*void)(*instance.path)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.path)) == 8, "_DelegateInfo.path has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.path)));
        assert(((cast(*void)(*instance.decode)) - cast(*void)(*instance)) == 8, "_DelegateInfo.decode has unexpected offset % instead of 8", ((cast(*void)(*instance.decode)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.decode)) == 8, "_DelegateInfo.decode has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.decode)));
        assert(((cast(*void)(*instance.encode)) - cast(*void)(*instance)) == 16, "_DelegateInfo.encode has unexpected offset % instead of 16", ((cast(*void)(*instance.encode)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.encode)) == 8, "_DelegateInfo.encode has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.encode)));
        assert(((cast(*void)(*instance.commands)) - cast(*void)(*instance)) == 24, "_DelegateInfo.commands has unexpected offset % instead of 24", ((cast(*void)(*instance.commands)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.commands)) == 8, "_DelegateInfo.commands has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.commands)));
        assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 32, "_DelegateInfo.mode has unexpected offset % instead of 32", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.mode)) == 4, "_DelegateInfo.mode has unexpected size % instead of 4", size_of(type_of(_DelegateInfo.mode)));
        assert(((cast(*void)(*instance.stealth)) - cast(*void)(*instance)) == 36, "_DelegateInfo.stealth has unexpected offset % instead of 36", ((cast(*void)(*instance.stealth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.stealth)) == 4, "_DelegateInfo.stealth has unexpected size % instead of 4", size_of(type_of(_DelegateInfo.stealth)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 40, "_DelegateInfo.signature has unexpected offset % instead of 40", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.signature)) == 8, "_DelegateInfo.signature has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.signature)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 48, "_DelegateInfo.previous has unexpected offset % instead of 48", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.previous)) == 8, "_DelegateInfo.previous has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 56, "_DelegateInfo.next has unexpected offset % instead of 56", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DelegateInfo.next)) == 8, "_DelegateInfo.next has unexpected size % instead of 8", size_of(type_of(_DelegateInfo.next)));
        assert(size_of(_DelegateInfo) == 64, "_DelegateInfo has size % instead of 64", size_of(_DelegateInfo));
    }

    {
        instance: _TypeInfo;
        assert(((cast(*void)(*instance.path)) - cast(*void)(*instance)) == 0, "_TypeInfo.path has unexpected offset % instead of 0", ((cast(*void)(*instance.path)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.path)) == 8, "_TypeInfo.path has unexpected size % instead of 8", size_of(type_of(_TypeInfo.path)));
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 8, "_TypeInfo.name has unexpected offset % instead of 8", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.name)) == 8, "_TypeInfo.name has unexpected size % instead of 8", size_of(type_of(_TypeInfo.name)));
        assert(((cast(*void)(*instance.description)) - cast(*void)(*instance)) == 16, "_TypeInfo.description has unexpected offset % instead of 16", ((cast(*void)(*instance.description)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.description)) == 8, "_TypeInfo.description has unexpected size % instead of 8", size_of(type_of(_TypeInfo.description)));
        assert(((cast(*void)(*instance.family)) - cast(*void)(*instance)) == 24, "_TypeInfo.family has unexpected offset % instead of 24", ((cast(*void)(*instance.family)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.family)) == 8, "_TypeInfo.family has unexpected size % instead of 8", size_of(type_of(_TypeInfo.family)));
        assert(((cast(*void)(*instance.style)) - cast(*void)(*instance)) == 32, "_TypeInfo.style has unexpected offset % instead of 32", ((cast(*void)(*instance.style)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.style)) == 4, "_TypeInfo.style has unexpected size % instead of 4", size_of(type_of(_TypeInfo.style)));
        assert(((cast(*void)(*instance.stretch)) - cast(*void)(*instance)) == 36, "_TypeInfo.stretch has unexpected offset % instead of 36", ((cast(*void)(*instance.stretch)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.stretch)) == 4, "_TypeInfo.stretch has unexpected size % instead of 4", size_of(type_of(_TypeInfo.stretch)));
        assert(((cast(*void)(*instance.weight)) - cast(*void)(*instance)) == 40, "_TypeInfo.weight has unexpected offset % instead of 40", ((cast(*void)(*instance.weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.weight)) == 8, "_TypeInfo.weight has unexpected size % instead of 8", size_of(type_of(_TypeInfo.weight)));
        assert(((cast(*void)(*instance.encoding)) - cast(*void)(*instance)) == 48, "_TypeInfo.encoding has unexpected offset % instead of 48", ((cast(*void)(*instance.encoding)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.encoding)) == 8, "_TypeInfo.encoding has unexpected size % instead of 8", size_of(type_of(_TypeInfo.encoding)));
        assert(((cast(*void)(*instance.foundry)) - cast(*void)(*instance)) == 56, "_TypeInfo.foundry has unexpected offset % instead of 56", ((cast(*void)(*instance.foundry)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.foundry)) == 8, "_TypeInfo.foundry has unexpected size % instead of 8", size_of(type_of(_TypeInfo.foundry)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 64, "_TypeInfo.format has unexpected offset % instead of 64", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.format)) == 8, "_TypeInfo.format has unexpected size % instead of 8", size_of(type_of(_TypeInfo.format)));
        assert(((cast(*void)(*instance.metrics)) - cast(*void)(*instance)) == 72, "_TypeInfo.metrics has unexpected offset % instead of 72", ((cast(*void)(*instance.metrics)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.metrics)) == 8, "_TypeInfo.metrics has unexpected size % instead of 8", size_of(type_of(_TypeInfo.metrics)));
        assert(((cast(*void)(*instance.glyphs)) - cast(*void)(*instance)) == 80, "_TypeInfo.glyphs has unexpected offset % instead of 80", ((cast(*void)(*instance.glyphs)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.glyphs)) == 8, "_TypeInfo.glyphs has unexpected size % instead of 8", size_of(type_of(_TypeInfo.glyphs)));
        assert(((cast(*void)(*instance.stealth)) - cast(*void)(*instance)) == 88, "_TypeInfo.stealth has unexpected offset % instead of 88", ((cast(*void)(*instance.stealth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.stealth)) == 4, "_TypeInfo.stealth has unexpected size % instead of 4", size_of(type_of(_TypeInfo.stealth)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 96, "_TypeInfo.signature has unexpected offset % instead of 96", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.signature)) == 8, "_TypeInfo.signature has unexpected size % instead of 8", size_of(type_of(_TypeInfo.signature)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 104, "_TypeInfo.previous has unexpected offset % instead of 104", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.previous)) == 8, "_TypeInfo.previous has unexpected size % instead of 8", size_of(type_of(_TypeInfo.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 112, "_TypeInfo.next has unexpected offset % instead of 112", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeInfo.next)) == 8, "_TypeInfo.next has unexpected size % instead of 8", size_of(type_of(_TypeInfo.next)));
        assert(size_of(_TypeInfo) == 120, "_TypeInfo has size % instead of 120", size_of(_TypeInfo));
    }

    {
        instance: _GradientInfo;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "_GradientInfo.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.type)) == 4, "_GradientInfo.type has unexpected size % instead of 4", size_of(type_of(_GradientInfo.type)));
        assert(((cast(*void)(*instance.color)) - cast(*void)(*instance)) == 4, "_GradientInfo.color has unexpected offset % instead of 4", ((cast(*void)(*instance.color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.color)) == 4, "_GradientInfo.color has unexpected size % instead of 4", size_of(type_of(_GradientInfo.color)));
        assert(((cast(*void)(*instance.stop)) - cast(*void)(*instance)) == 8, "_GradientInfo.stop has unexpected offset % instead of 8", ((cast(*void)(*instance.stop)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.stop)) == 32, "_GradientInfo.stop has unexpected size % instead of 32", size_of(type_of(_GradientInfo.stop)));
        assert(((cast(*void)(*instance.length)) - cast(*void)(*instance)) == 40, "_GradientInfo.length has unexpected offset % instead of 40", ((cast(*void)(*instance.length)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.length)) == 8, "_GradientInfo.length has unexpected size % instead of 8", size_of(type_of(_GradientInfo.length)));
        assert(((cast(*void)(*instance.spread)) - cast(*void)(*instance)) == 48, "_GradientInfo.spread has unexpected offset % instead of 48", ((cast(*void)(*instance.spread)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.spread)) == 4, "_GradientInfo.spread has unexpected size % instead of 4", size_of(type_of(_GradientInfo.spread)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 56, "_GradientInfo.signature has unexpected offset % instead of 56", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.signature)) == 8, "_GradientInfo.signature has unexpected size % instead of 8", size_of(type_of(_GradientInfo.signature)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 64, "_GradientInfo.previous has unexpected offset % instead of 64", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.previous)) == 8, "_GradientInfo.previous has unexpected size % instead of 8", size_of(type_of(_GradientInfo.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 72, "_GradientInfo.next has unexpected offset % instead of 72", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_GradientInfo.next)) == 8, "_GradientInfo.next has unexpected size % instead of 8", size_of(type_of(_GradientInfo.next)));
        assert(size_of(_GradientInfo) == 80, "_GradientInfo has size % instead of 80", size_of(_GradientInfo));
    }

    {
        instance: _ElementReference;
        assert(((cast(*void)(*instance.id)) - cast(*void)(*instance)) == 0, "_ElementReference.id has unexpected offset % instead of 0", ((cast(*void)(*instance.id)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.id)) == 8, "_ElementReference.id has unexpected size % instead of 8", size_of(type_of(_ElementReference.id)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 8, "_ElementReference.type has unexpected offset % instead of 8", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.type)) == 4, "_ElementReference.type has unexpected size % instead of 4", size_of(type_of(_ElementReference.type)));
        assert(((cast(*void)(*instance.gradient)) - cast(*void)(*instance)) == 16, "_ElementReference.gradient has unexpected offset % instead of 16", ((cast(*void)(*instance.gradient)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.gradient)) == 80, "_ElementReference.gradient has unexpected size % instead of 80", size_of(type_of(_ElementReference.gradient)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 96, "_ElementReference.signature has unexpected offset % instead of 96", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.signature)) == 8, "_ElementReference.signature has unexpected size % instead of 8", size_of(type_of(_ElementReference.signature)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 104, "_ElementReference.previous has unexpected offset % instead of 104", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.previous)) == 8, "_ElementReference.previous has unexpected size % instead of 8", size_of(type_of(_ElementReference.previous)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 112, "_ElementReference.next has unexpected offset % instead of 112", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ElementReference.next)) == 8, "_ElementReference.next has unexpected size % instead of 8", size_of(type_of(_ElementReference.next)));
        assert(size_of(_ElementReference) == 120, "_ElementReference has size % instead of 120", size_of(_ElementReference));
    }

    {
        instance: _DrawInfo;
        assert(((cast(*void)(*instance.primitive)) - cast(*void)(*instance)) == 0, "_DrawInfo.primitive has unexpected offset % instead of 0", ((cast(*void)(*instance.primitive)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.primitive)) == 8, "_DrawInfo.primitive has unexpected size % instead of 8", size_of(type_of(_DrawInfo.primitive)));
        assert(((cast(*void)(*instance.geometry)) - cast(*void)(*instance)) == 8, "_DrawInfo.geometry has unexpected offset % instead of 8", ((cast(*void)(*instance.geometry)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.geometry)) == 8, "_DrawInfo.geometry has unexpected size % instead of 8", size_of(type_of(_DrawInfo.geometry)));
        assert(((cast(*void)(*instance.affine)) - cast(*void)(*instance)) == 16, "_DrawInfo.affine has unexpected offset % instead of 16", ((cast(*void)(*instance.affine)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.affine)) == 48, "_DrawInfo.affine has unexpected size % instead of 48", size_of(type_of(_DrawInfo.affine)));
        assert(((cast(*void)(*instance.gravity)) - cast(*void)(*instance)) == 64, "_DrawInfo.gravity has unexpected offset % instead of 64", ((cast(*void)(*instance.gravity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.gravity)) == 4, "_DrawInfo.gravity has unexpected size % instead of 4", size_of(type_of(_DrawInfo.gravity)));
        assert(((cast(*void)(*instance.fill)) - cast(*void)(*instance)) == 68, "_DrawInfo.fill has unexpected offset % instead of 68", ((cast(*void)(*instance.fill)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.fill)) == 4, "_DrawInfo.fill has unexpected size % instead of 4", size_of(type_of(_DrawInfo.fill)));
        assert(((cast(*void)(*instance.stroke)) - cast(*void)(*instance)) == 72, "_DrawInfo.stroke has unexpected offset % instead of 72", ((cast(*void)(*instance.stroke)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.stroke)) == 4, "_DrawInfo.stroke has unexpected size % instead of 4", size_of(type_of(_DrawInfo.stroke)));
        assert(((cast(*void)(*instance.stroke_width)) - cast(*void)(*instance)) == 80, "_DrawInfo.stroke_width has unexpected offset % instead of 80", ((cast(*void)(*instance.stroke_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.stroke_width)) == 8, "_DrawInfo.stroke_width has unexpected size % instead of 8", size_of(type_of(_DrawInfo.stroke_width)));
        assert(((cast(*void)(*instance.gradient)) - cast(*void)(*instance)) == 88, "_DrawInfo.gradient has unexpected offset % instead of 88", ((cast(*void)(*instance.gradient)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.gradient)) == 80, "_DrawInfo.gradient has unexpected size % instead of 80", size_of(type_of(_DrawInfo.gradient)));
        assert(((cast(*void)(*instance.fill_pattern)) - cast(*void)(*instance)) == 168, "_DrawInfo.fill_pattern has unexpected offset % instead of 168", ((cast(*void)(*instance.fill_pattern)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.fill_pattern)) == 8, "_DrawInfo.fill_pattern has unexpected size % instead of 8", size_of(type_of(_DrawInfo.fill_pattern)));
        assert(((cast(*void)(*instance.tile)) - cast(*void)(*instance)) == 176, "_DrawInfo.tile has unexpected offset % instead of 176", ((cast(*void)(*instance.tile)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.tile)) == 8, "_DrawInfo.tile has unexpected size % instead of 8", size_of(type_of(_DrawInfo.tile)));
        assert(((cast(*void)(*instance.stroke_pattern)) - cast(*void)(*instance)) == 184, "_DrawInfo.stroke_pattern has unexpected offset % instead of 184", ((cast(*void)(*instance.stroke_pattern)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.stroke_pattern)) == 8, "_DrawInfo.stroke_pattern has unexpected size % instead of 8", size_of(type_of(_DrawInfo.stroke_pattern)));
        assert(((cast(*void)(*instance.stroke_antialias)) - cast(*void)(*instance)) == 192, "_DrawInfo.stroke_antialias has unexpected offset % instead of 192", ((cast(*void)(*instance.stroke_antialias)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.stroke_antialias)) == 4, "_DrawInfo.stroke_antialias has unexpected size % instead of 4", size_of(type_of(_DrawInfo.stroke_antialias)));
        assert(((cast(*void)(*instance.text_antialias)) - cast(*void)(*instance)) == 196, "_DrawInfo.text_antialias has unexpected offset % instead of 196", ((cast(*void)(*instance.text_antialias)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.text_antialias)) == 4, "_DrawInfo.text_antialias has unexpected size % instead of 4", size_of(type_of(_DrawInfo.text_antialias)));
        assert(((cast(*void)(*instance.fill_rule)) - cast(*void)(*instance)) == 200, "_DrawInfo.fill_rule has unexpected offset % instead of 200", ((cast(*void)(*instance.fill_rule)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.fill_rule)) == 4, "_DrawInfo.fill_rule has unexpected size % instead of 4", size_of(type_of(_DrawInfo.fill_rule)));
        assert(((cast(*void)(*instance.linecap)) - cast(*void)(*instance)) == 204, "_DrawInfo.linecap has unexpected offset % instead of 204", ((cast(*void)(*instance.linecap)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.linecap)) == 4, "_DrawInfo.linecap has unexpected size % instead of 4", size_of(type_of(_DrawInfo.linecap)));
        assert(((cast(*void)(*instance.linejoin)) - cast(*void)(*instance)) == 208, "_DrawInfo.linejoin has unexpected offset % instead of 208", ((cast(*void)(*instance.linejoin)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.linejoin)) == 4, "_DrawInfo.linejoin has unexpected size % instead of 4", size_of(type_of(_DrawInfo.linejoin)));
        assert(((cast(*void)(*instance.miterlimit)) - cast(*void)(*instance)) == 216, "_DrawInfo.miterlimit has unexpected offset % instead of 216", ((cast(*void)(*instance.miterlimit)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.miterlimit)) == 8, "_DrawInfo.miterlimit has unexpected size % instead of 8", size_of(type_of(_DrawInfo.miterlimit)));
        assert(((cast(*void)(*instance.dash_offset)) - cast(*void)(*instance)) == 224, "_DrawInfo.dash_offset has unexpected offset % instead of 224", ((cast(*void)(*instance.dash_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.dash_offset)) == 8, "_DrawInfo.dash_offset has unexpected size % instead of 8", size_of(type_of(_DrawInfo.dash_offset)));
        assert(((cast(*void)(*instance.decorate)) - cast(*void)(*instance)) == 232, "_DrawInfo.decorate has unexpected offset % instead of 232", ((cast(*void)(*instance.decorate)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.decorate)) == 4, "_DrawInfo.decorate has unexpected size % instead of 4", size_of(type_of(_DrawInfo.decorate)));
        assert(((cast(*void)(*instance.compose)) - cast(*void)(*instance)) == 236, "_DrawInfo.compose has unexpected offset % instead of 236", ((cast(*void)(*instance.compose)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.compose)) == 4, "_DrawInfo.compose has unexpected size % instead of 4", size_of(type_of(_DrawInfo.compose)));
        assert(((cast(*void)(*instance.text)) - cast(*void)(*instance)) == 240, "_DrawInfo.text has unexpected offset % instead of 240", ((cast(*void)(*instance.text)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.text)) == 8, "_DrawInfo.text has unexpected size % instead of 8", size_of(type_of(_DrawInfo.text)));
        assert(((cast(*void)(*instance.font)) - cast(*void)(*instance)) == 248, "_DrawInfo.font has unexpected offset % instead of 248", ((cast(*void)(*instance.font)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.font)) == 8, "_DrawInfo.font has unexpected size % instead of 8", size_of(type_of(_DrawInfo.font)));
        assert(((cast(*void)(*instance.family)) - cast(*void)(*instance)) == 256, "_DrawInfo.family has unexpected offset % instead of 256", ((cast(*void)(*instance.family)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.family)) == 8, "_DrawInfo.family has unexpected size % instead of 8", size_of(type_of(_DrawInfo.family)));
        assert(((cast(*void)(*instance.style)) - cast(*void)(*instance)) == 264, "_DrawInfo.style has unexpected offset % instead of 264", ((cast(*void)(*instance.style)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.style)) == 4, "_DrawInfo.style has unexpected size % instead of 4", size_of(type_of(_DrawInfo.style)));
        assert(((cast(*void)(*instance.stretch)) - cast(*void)(*instance)) == 268, "_DrawInfo.stretch has unexpected offset % instead of 268", ((cast(*void)(*instance.stretch)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.stretch)) == 4, "_DrawInfo.stretch has unexpected size % instead of 4", size_of(type_of(_DrawInfo.stretch)));
        assert(((cast(*void)(*instance.weight)) - cast(*void)(*instance)) == 272, "_DrawInfo.weight has unexpected offset % instead of 272", ((cast(*void)(*instance.weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.weight)) == 8, "_DrawInfo.weight has unexpected size % instead of 8", size_of(type_of(_DrawInfo.weight)));
        assert(((cast(*void)(*instance.encoding)) - cast(*void)(*instance)) == 280, "_DrawInfo.encoding has unexpected offset % instead of 280", ((cast(*void)(*instance.encoding)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.encoding)) == 8, "_DrawInfo.encoding has unexpected size % instead of 8", size_of(type_of(_DrawInfo.encoding)));
        assert(((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)) == 288, "_DrawInfo.pointsize has unexpected offset % instead of 288", ((cast(*void)(*instance.pointsize)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.pointsize)) == 8, "_DrawInfo.pointsize has unexpected size % instead of 8", size_of(type_of(_DrawInfo.pointsize)));
        assert(((cast(*void)(*instance.density)) - cast(*void)(*instance)) == 296, "_DrawInfo.density has unexpected offset % instead of 296", ((cast(*void)(*instance.density)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.density)) == 8, "_DrawInfo.density has unexpected size % instead of 8", size_of(type_of(_DrawInfo.density)));
        assert(((cast(*void)(*instance.align)) - cast(*void)(*instance)) == 304, "_DrawInfo.align has unexpected offset % instead of 304", ((cast(*void)(*instance.align)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.align)) == 4, "_DrawInfo.align has unexpected size % instead of 4", size_of(type_of(_DrawInfo.align)));
        assert(((cast(*void)(*instance.undercolor)) - cast(*void)(*instance)) == 308, "_DrawInfo.undercolor has unexpected offset % instead of 308", ((cast(*void)(*instance.undercolor)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.undercolor)) == 4, "_DrawInfo.undercolor has unexpected size % instead of 4", size_of(type_of(_DrawInfo.undercolor)));
        assert(((cast(*void)(*instance.border_color)) - cast(*void)(*instance)) == 312, "_DrawInfo.border_color has unexpected offset % instead of 312", ((cast(*void)(*instance.border_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.border_color)) == 4, "_DrawInfo.border_color has unexpected size % instead of 4", size_of(type_of(_DrawInfo.border_color)));
        assert(((cast(*void)(*instance.server_name)) - cast(*void)(*instance)) == 320, "_DrawInfo.server_name has unexpected offset % instead of 320", ((cast(*void)(*instance.server_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.server_name)) == 8, "_DrawInfo.server_name has unexpected size % instead of 8", size_of(type_of(_DrawInfo.server_name)));
        assert(((cast(*void)(*instance.dash_pattern)) - cast(*void)(*instance)) == 328, "_DrawInfo.dash_pattern has unexpected offset % instead of 328", ((cast(*void)(*instance.dash_pattern)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.dash_pattern)) == 8, "_DrawInfo.dash_pattern has unexpected size % instead of 8", size_of(type_of(_DrawInfo.dash_pattern)));
        assert(((cast(*void)(*instance.extra)) - cast(*void)(*instance)) == 336, "_DrawInfo.extra has unexpected offset % instead of 336", ((cast(*void)(*instance.extra)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.extra)) == 8, "_DrawInfo.extra has unexpected size % instead of 8", size_of(type_of(_DrawInfo.extra)));
        assert(((cast(*void)(*instance.bounds)) - cast(*void)(*instance)) == 344, "_DrawInfo.bounds has unexpected offset % instead of 344", ((cast(*void)(*instance.bounds)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.bounds)) == 32, "_DrawInfo.bounds has unexpected size % instead of 32", size_of(type_of(_DrawInfo.bounds)));
        assert(((cast(*void)(*instance.clip_units)) - cast(*void)(*instance)) == 376, "_DrawInfo.clip_units has unexpected offset % instead of 376", ((cast(*void)(*instance.clip_units)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.clip_units)) == 4, "_DrawInfo.clip_units has unexpected size % instead of 4", size_of(type_of(_DrawInfo.clip_units)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 380, "_DrawInfo.opacity has unexpected offset % instead of 380", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.opacity)) == 1, "_DrawInfo.opacity has unexpected size % instead of 1", size_of(type_of(_DrawInfo.opacity)));
        assert(((cast(*void)(*instance.render)) - cast(*void)(*instance)) == 384, "_DrawInfo.render has unexpected offset % instead of 384", ((cast(*void)(*instance.render)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.render)) == 4, "_DrawInfo.render has unexpected size % instead of 4", size_of(type_of(_DrawInfo.render)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 388, "_DrawInfo.flags has unexpected offset % instead of 388", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.flags)) == 4, "_DrawInfo.flags has unexpected size % instead of 4", size_of(type_of(_DrawInfo.flags)));
        assert(((cast(*void)(*instance.element_reference)) - cast(*void)(*instance)) == 392, "_DrawInfo.element_reference has unexpected offset % instead of 392", ((cast(*void)(*instance.element_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.element_reference)) == 120, "_DrawInfo.element_reference has unexpected size % instead of 120", size_of(type_of(_DrawInfo.element_reference)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 512, "_DrawInfo.signature has unexpected offset % instead of 512", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_DrawInfo.signature)) == 8, "_DrawInfo.signature has unexpected size % instead of 8", size_of(type_of(_DrawInfo.signature)));
        assert(size_of(_DrawInfo) == 520, "_DrawInfo has size % instead of 520", size_of(_DrawInfo));
    }

    {
        instance: _PointInfo;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "_PointInfo.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PointInfo.x)) == 8, "_PointInfo.x has unexpected size % instead of 8", size_of(type_of(_PointInfo.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "_PointInfo.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PointInfo.y)) == 8, "_PointInfo.y has unexpected size % instead of 8", size_of(type_of(_PointInfo.y)));
        assert(size_of(_PointInfo) == 16, "_PointInfo has size % instead of 16", size_of(_PointInfo));
    }

    {
        instance: _TypeMetric;
        assert(((cast(*void)(*instance.pixels_per_em)) - cast(*void)(*instance)) == 0, "_TypeMetric.pixels_per_em has unexpected offset % instead of 0", ((cast(*void)(*instance.pixels_per_em)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.pixels_per_em)) == 16, "_TypeMetric.pixels_per_em has unexpected size % instead of 16", size_of(type_of(_TypeMetric.pixels_per_em)));
        assert(((cast(*void)(*instance.ascent)) - cast(*void)(*instance)) == 16, "_TypeMetric.ascent has unexpected offset % instead of 16", ((cast(*void)(*instance.ascent)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.ascent)) == 8, "_TypeMetric.ascent has unexpected size % instead of 8", size_of(type_of(_TypeMetric.ascent)));
        assert(((cast(*void)(*instance.descent)) - cast(*void)(*instance)) == 24, "_TypeMetric.descent has unexpected offset % instead of 24", ((cast(*void)(*instance.descent)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.descent)) == 8, "_TypeMetric.descent has unexpected size % instead of 8", size_of(type_of(_TypeMetric.descent)));
        assert(((cast(*void)(*instance.width)) - cast(*void)(*instance)) == 32, "_TypeMetric.width has unexpected offset % instead of 32", ((cast(*void)(*instance.width)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.width)) == 8, "_TypeMetric.width has unexpected size % instead of 8", size_of(type_of(_TypeMetric.width)));
        assert(((cast(*void)(*instance.height)) - cast(*void)(*instance)) == 40, "_TypeMetric.height has unexpected offset % instead of 40", ((cast(*void)(*instance.height)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.height)) == 8, "_TypeMetric.height has unexpected size % instead of 8", size_of(type_of(_TypeMetric.height)));
        assert(((cast(*void)(*instance.max_advance)) - cast(*void)(*instance)) == 48, "_TypeMetric.max_advance has unexpected offset % instead of 48", ((cast(*void)(*instance.max_advance)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.max_advance)) == 8, "_TypeMetric.max_advance has unexpected size % instead of 8", size_of(type_of(_TypeMetric.max_advance)));
        assert(((cast(*void)(*instance.bounds)) - cast(*void)(*instance)) == 56, "_TypeMetric.bounds has unexpected offset % instead of 56", ((cast(*void)(*instance.bounds)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.bounds)) == 32, "_TypeMetric.bounds has unexpected size % instead of 32", size_of(type_of(_TypeMetric.bounds)));
        assert(((cast(*void)(*instance.underline_position)) - cast(*void)(*instance)) == 88, "_TypeMetric.underline_position has unexpected offset % instead of 88", ((cast(*void)(*instance.underline_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.underline_position)) == 8, "_TypeMetric.underline_position has unexpected size % instead of 8", size_of(type_of(_TypeMetric.underline_position)));
        assert(((cast(*void)(*instance.underline_thickness)) - cast(*void)(*instance)) == 96, "_TypeMetric.underline_thickness has unexpected offset % instead of 96", ((cast(*void)(*instance.underline_thickness)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TypeMetric.underline_thickness)) == 8, "_TypeMetric.underline_thickness has unexpected size % instead of 8", size_of(type_of(_TypeMetric.underline_thickness)));
        assert(size_of(_TypeMetric) == 104, "_TypeMetric has size % instead of 104", size_of(_TypeMetric));
    }

    {
        instance: _MagickRandomKernel;
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 0, "_MagickRandomKernel.z has unexpected offset % instead of 0", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickRandomKernel.z)) == 4, "_MagickRandomKernel.z has unexpected size % instead of 4", size_of(type_of(_MagickRandomKernel.z)));
        assert(((cast(*void)(*instance.w)) - cast(*void)(*instance)) == 4, "_MagickRandomKernel.w has unexpected offset % instead of 4", ((cast(*void)(*instance.w)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickRandomKernel.w)) == 4, "_MagickRandomKernel.w has unexpected size % instead of 4", size_of(type_of(_MagickRandomKernel.w)));
        assert(size_of(_MagickRandomKernel) == 8, "_MagickRandomKernel has size % instead of 8", size_of(_MagickRandomKernel));
    }

    {
        instance: _MagickInfo;
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 0, "_MagickInfo.next has unexpected offset % instead of 0", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.next)) == 8, "_MagickInfo.next has unexpected size % instead of 8", size_of(type_of(_MagickInfo.next)));
        assert(((cast(*void)(*instance.previous)) - cast(*void)(*instance)) == 8, "_MagickInfo.previous has unexpected offset % instead of 8", ((cast(*void)(*instance.previous)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.previous)) == 8, "_MagickInfo.previous has unexpected size % instead of 8", size_of(type_of(_MagickInfo.previous)));
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 16, "_MagickInfo.name has unexpected offset % instead of 16", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.name)) == 8, "_MagickInfo.name has unexpected size % instead of 8", size_of(type_of(_MagickInfo.name)));
        assert(((cast(*void)(*instance.description)) - cast(*void)(*instance)) == 24, "_MagickInfo.description has unexpected offset % instead of 24", ((cast(*void)(*instance.description)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.description)) == 8, "_MagickInfo.description has unexpected size % instead of 8", size_of(type_of(_MagickInfo.description)));
        assert(((cast(*void)(*instance.note)) - cast(*void)(*instance)) == 32, "_MagickInfo.note has unexpected offset % instead of 32", ((cast(*void)(*instance.note)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.note)) == 8, "_MagickInfo.note has unexpected size % instead of 8", size_of(type_of(_MagickInfo.note)));
        assert(((cast(*void)(*instance.version)) - cast(*void)(*instance)) == 40, "_MagickInfo.version has unexpected offset % instead of 40", ((cast(*void)(*instance.version)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.version)) == 8, "_MagickInfo.version has unexpected size % instead of 8", size_of(type_of(_MagickInfo.version)));
        assert(((cast(*void)(*instance.module)) - cast(*void)(*instance)) == 48, "_MagickInfo.module has unexpected offset % instead of 48", ((cast(*void)(*instance.module)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.module)) == 8, "_MagickInfo.module has unexpected size % instead of 8", size_of(type_of(_MagickInfo.module)));
        assert(((cast(*void)(*instance.decoder)) - cast(*void)(*instance)) == 56, "_MagickInfo.decoder has unexpected offset % instead of 56", ((cast(*void)(*instance.decoder)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.decoder)) == 8, "_MagickInfo.decoder has unexpected size % instead of 8", size_of(type_of(_MagickInfo.decoder)));
        assert(((cast(*void)(*instance.encoder)) - cast(*void)(*instance)) == 64, "_MagickInfo.encoder has unexpected offset % instead of 64", ((cast(*void)(*instance.encoder)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.encoder)) == 8, "_MagickInfo.encoder has unexpected size % instead of 8", size_of(type_of(_MagickInfo.encoder)));
        assert(((cast(*void)(*instance.magick)) - cast(*void)(*instance)) == 72, "_MagickInfo.magick has unexpected offset % instead of 72", ((cast(*void)(*instance.magick)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.magick)) == 8, "_MagickInfo.magick has unexpected size % instead of 8", size_of(type_of(_MagickInfo.magick)));
        assert(((cast(*void)(*instance.client_data)) - cast(*void)(*instance)) == 80, "_MagickInfo.client_data has unexpected offset % instead of 80", ((cast(*void)(*instance.client_data)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.client_data)) == 8, "_MagickInfo.client_data has unexpected size % instead of 8", size_of(type_of(_MagickInfo.client_data)));
        assert(((cast(*void)(*instance.adjoin)) - cast(*void)(*instance)) == 88, "_MagickInfo.adjoin has unexpected offset % instead of 88", ((cast(*void)(*instance.adjoin)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.adjoin)) == 4, "_MagickInfo.adjoin has unexpected size % instead of 4", size_of(type_of(_MagickInfo.adjoin)));
        assert(((cast(*void)(*instance.raw)) - cast(*void)(*instance)) == 92, "_MagickInfo.raw has unexpected offset % instead of 92", ((cast(*void)(*instance.raw)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.raw)) == 4, "_MagickInfo.raw has unexpected size % instead of 4", size_of(type_of(_MagickInfo.raw)));
        assert(((cast(*void)(*instance.stealth)) - cast(*void)(*instance)) == 96, "_MagickInfo.stealth has unexpected offset % instead of 96", ((cast(*void)(*instance.stealth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.stealth)) == 4, "_MagickInfo.stealth has unexpected size % instead of 4", size_of(type_of(_MagickInfo.stealth)));
        assert(((cast(*void)(*instance.seekable_stream)) - cast(*void)(*instance)) == 100, "_MagickInfo.seekable_stream has unexpected offset % instead of 100", ((cast(*void)(*instance.seekable_stream)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.seekable_stream)) == 4, "_MagickInfo.seekable_stream has unexpected size % instead of 4", size_of(type_of(_MagickInfo.seekable_stream)));
        assert(((cast(*void)(*instance.blob_support)) - cast(*void)(*instance)) == 104, "_MagickInfo.blob_support has unexpected offset % instead of 104", ((cast(*void)(*instance.blob_support)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.blob_support)) == 4, "_MagickInfo.blob_support has unexpected size % instead of 4", size_of(type_of(_MagickInfo.blob_support)));
        assert(((cast(*void)(*instance.thread_support)) - cast(*void)(*instance)) == 108, "_MagickInfo.thread_support has unexpected offset % instead of 108", ((cast(*void)(*instance.thread_support)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.thread_support)) == 4, "_MagickInfo.thread_support has unexpected size % instead of 4", size_of(type_of(_MagickInfo.thread_support)));
        assert(((cast(*void)(*instance.coder_class)) - cast(*void)(*instance)) == 112, "_MagickInfo.coder_class has unexpected offset % instead of 112", ((cast(*void)(*instance.coder_class)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.coder_class)) == 4, "_MagickInfo.coder_class has unexpected size % instead of 4", size_of(type_of(_MagickInfo.coder_class)));
        assert(((cast(*void)(*instance.extension_treatment)) - cast(*void)(*instance)) == 116, "_MagickInfo.extension_treatment has unexpected offset % instead of 116", ((cast(*void)(*instance.extension_treatment)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.extension_treatment)) == 4, "_MagickInfo.extension_treatment has unexpected size % instead of 4", size_of(type_of(_MagickInfo.extension_treatment)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 120, "_MagickInfo.signature has unexpected offset % instead of 120", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_MagickInfo.signature)) == 8, "_MagickInfo.signature has unexpected size % instead of 8", size_of(type_of(_MagickInfo.signature)));
        assert(size_of(_MagickInfo) == 128, "_MagickInfo has size % instead of 128", size_of(_MagickInfo));
    }

    {
        instance: _PixelIteratorOptions;
        assert(((cast(*void)(*instance.max_threads)) - cast(*void)(*instance)) == 0, "_PixelIteratorOptions.max_threads has unexpected offset % instead of 0", ((cast(*void)(*instance.max_threads)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelIteratorOptions.max_threads)) == 4, "_PixelIteratorOptions.max_threads has unexpected size % instead of 4", size_of(type_of(_PixelIteratorOptions.max_threads)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 8, "_PixelIteratorOptions.signature has unexpected offset % instead of 8", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_PixelIteratorOptions.signature)) == 8, "_PixelIteratorOptions.signature has unexpected size % instead of 8", size_of(type_of(_PixelIteratorOptions.signature)));
        assert(size_of(_PixelIteratorOptions) == 16, "_PixelIteratorOptions has size % instead of 16", size_of(_PixelIteratorOptions));
    }

    {
        instance: _QuantizeInfo;
        assert(((cast(*void)(*instance.number_colors)) - cast(*void)(*instance)) == 0, "_QuantizeInfo.number_colors has unexpected offset % instead of 0", ((cast(*void)(*instance.number_colors)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.number_colors)) == 8, "_QuantizeInfo.number_colors has unexpected size % instead of 8", size_of(type_of(_QuantizeInfo.number_colors)));
        assert(((cast(*void)(*instance.tree_depth)) - cast(*void)(*instance)) == 8, "_QuantizeInfo.tree_depth has unexpected offset % instead of 8", ((cast(*void)(*instance.tree_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.tree_depth)) == 4, "_QuantizeInfo.tree_depth has unexpected size % instead of 4", size_of(type_of(_QuantizeInfo.tree_depth)));
        assert(((cast(*void)(*instance.dither)) - cast(*void)(*instance)) == 12, "_QuantizeInfo.dither has unexpected offset % instead of 12", ((cast(*void)(*instance.dither)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.dither)) == 4, "_QuantizeInfo.dither has unexpected size % instead of 4", size_of(type_of(_QuantizeInfo.dither)));
        assert(((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)) == 16, "_QuantizeInfo.colorspace has unexpected offset % instead of 16", ((cast(*void)(*instance.colorspace)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.colorspace)) == 4, "_QuantizeInfo.colorspace has unexpected size % instead of 4", size_of(type_of(_QuantizeInfo.colorspace)));
        assert(((cast(*void)(*instance.measure_error)) - cast(*void)(*instance)) == 20, "_QuantizeInfo.measure_error has unexpected offset % instead of 20", ((cast(*void)(*instance.measure_error)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.measure_error)) == 4, "_QuantizeInfo.measure_error has unexpected size % instead of 4", size_of(type_of(_QuantizeInfo.measure_error)));
        assert(((cast(*void)(*instance.signature)) - cast(*void)(*instance)) == 24, "_QuantizeInfo.signature has unexpected offset % instead of 24", ((cast(*void)(*instance.signature)) - cast(*void)(*instance)));
        assert(size_of(type_of(_QuantizeInfo.signature)) == 8, "_QuantizeInfo.signature has unexpected size % instead of 8", size_of(type_of(_QuantizeInfo.signature)));
        assert(size_of(_QuantizeInfo) == 32, "_QuantizeInfo has size % instead of 32", size_of(_QuantizeInfo));
    }

    {
        instance: _ImageChannelStatistics;
        assert(((cast(*void)(*instance.maximum)) - cast(*void)(*instance)) == 0, "_ImageChannelStatistics.maximum has unexpected offset % instead of 0", ((cast(*void)(*instance.maximum)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageChannelStatistics.maximum)) == 8, "_ImageChannelStatistics.maximum has unexpected size % instead of 8", size_of(type_of(_ImageChannelStatistics.maximum)));
        assert(((cast(*void)(*instance.minimum)) - cast(*void)(*instance)) == 8, "_ImageChannelStatistics.minimum has unexpected offset % instead of 8", ((cast(*void)(*instance.minimum)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageChannelStatistics.minimum)) == 8, "_ImageChannelStatistics.minimum has unexpected size % instead of 8", size_of(type_of(_ImageChannelStatistics.minimum)));
        assert(((cast(*void)(*instance.mean)) - cast(*void)(*instance)) == 16, "_ImageChannelStatistics.mean has unexpected offset % instead of 16", ((cast(*void)(*instance.mean)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageChannelStatistics.mean)) == 8, "_ImageChannelStatistics.mean has unexpected size % instead of 8", size_of(type_of(_ImageChannelStatistics.mean)));
        assert(((cast(*void)(*instance.standard_deviation)) - cast(*void)(*instance)) == 24, "_ImageChannelStatistics.standard_deviation has unexpected offset % instead of 24", ((cast(*void)(*instance.standard_deviation)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageChannelStatistics.standard_deviation)) == 8, "_ImageChannelStatistics.standard_deviation has unexpected size % instead of 8", size_of(type_of(_ImageChannelStatistics.standard_deviation)));
        assert(((cast(*void)(*instance.variance)) - cast(*void)(*instance)) == 32, "_ImageChannelStatistics.variance has unexpected offset % instead of 32", ((cast(*void)(*instance.variance)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageChannelStatistics.variance)) == 8, "_ImageChannelStatistics.variance has unexpected size % instead of 8", size_of(type_of(_ImageChannelStatistics.variance)));
        assert(size_of(_ImageChannelStatistics) == 40, "_ImageChannelStatistics has size % instead of 40", size_of(_ImageChannelStatistics));
    }

    {
        instance: _ImageStatistics;
        assert(((cast(*void)(*instance.red)) - cast(*void)(*instance)) == 0, "_ImageStatistics.red has unexpected offset % instead of 0", ((cast(*void)(*instance.red)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageStatistics.red)) == 40, "_ImageStatistics.red has unexpected size % instead of 40", size_of(type_of(_ImageStatistics.red)));
        assert(((cast(*void)(*instance.green)) - cast(*void)(*instance)) == 40, "_ImageStatistics.green has unexpected offset % instead of 40", ((cast(*void)(*instance.green)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageStatistics.green)) == 40, "_ImageStatistics.green has unexpected size % instead of 40", size_of(type_of(_ImageStatistics.green)));
        assert(((cast(*void)(*instance.blue)) - cast(*void)(*instance)) == 80, "_ImageStatistics.blue has unexpected offset % instead of 80", ((cast(*void)(*instance.blue)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageStatistics.blue)) == 40, "_ImageStatistics.blue has unexpected size % instead of 40", size_of(type_of(_ImageStatistics.blue)));
        assert(((cast(*void)(*instance.opacity)) - cast(*void)(*instance)) == 120, "_ImageStatistics.opacity has unexpected offset % instead of 120", ((cast(*void)(*instance.opacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(_ImageStatistics.opacity)) == 40, "_ImageStatistics.opacity has unexpected size % instead of 40", size_of(type_of(_ImageStatistics.opacity)));
        assert(size_of(_ImageStatistics) == 160, "_ImageStatistics has size % instead of 160", size_of(_ImageStatistics));
    }

    {
        instance: _TokenInfo;
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 0, "_TokenInfo.state has unexpected offset % instead of 0", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TokenInfo.state)) == 4, "_TokenInfo.state has unexpected size % instead of 4", size_of(type_of(_TokenInfo.state)));
        assert(((cast(*void)(*instance.flag)) - cast(*void)(*instance)) == 4, "_TokenInfo.flag has unexpected offset % instead of 4", ((cast(*void)(*instance.flag)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TokenInfo.flag)) == 4, "_TokenInfo.flag has unexpected size % instead of 4", size_of(type_of(_TokenInfo.flag)));
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 8, "_TokenInfo.offset has unexpected offset % instead of 8", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TokenInfo.offset)) == 8, "_TokenInfo.offset has unexpected size % instead of 8", size_of(type_of(_TokenInfo.offset)));
        assert(((cast(*void)(*instance.quote)) - cast(*void)(*instance)) == 16, "_TokenInfo.quote has unexpected offset % instead of 16", ((cast(*void)(*instance.quote)) - cast(*void)(*instance)));
        assert(size_of(type_of(_TokenInfo.quote)) == 1, "_TokenInfo.quote has unexpected size % instead of 1", size_of(type_of(_TokenInfo.quote)));
        assert(size_of(_TokenInfo) == 24, "_TokenInfo has size % instead of 24", size_of(_TokenInfo));
    }
}


#if OS == .MACOS {
    libgraphicsmagick     :: #library,no_dll "macos/lib/libGraphicsMagick";
    libgraphicsmagickwand :: #library,no_dll "macos/lib/libGraphicsMagickWand";
}
#if OS == .LINUX {
    libgraphicsmagick     :: #library,no_dll "linux/lib/libGraphicsMagick";
    libgraphicsmagickwand :: #library,no_dll "linux/lib/libGraphicsMagickWand";
}

